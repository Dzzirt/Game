# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/enemy.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 323 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/enemy.cpp" 2
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\sstream" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\string" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ios" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\climits" 1 3




# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xkeycheck.h" 1 3
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 1 3








# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 45 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\sal.h" 1 3
# 2381 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\sal.h" 3
extern "C" {
# 2987 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\sal.h" 3
}



# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ConcurrencySal.h" 1 3
# 22 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ConcurrencySal.h" 3
extern "C" {
# 354 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ConcurrencySal.h" 3
}
# 2990 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\sal.h" 2 3
# 45 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 1 3
# 15 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
#pragma pack(push, 8)


extern "C" {
# 30 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
        typedef unsigned int uintptr_t;
# 39 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
        typedef char* va_list;
# 118 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
}



    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    }
# 157 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vadefs.h" 3
#pragma pack(pop)
# 46 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 2 3
# 81 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
#pragma pack(push, 8)
# 81 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
 extern "C" {
# 198 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
    typedef unsigned int size_t;
    typedef int ptrdiff_t;
    typedef int intptr_t;
# 237 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];


    }
# 288 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
    void __cdecl __security_init_cookie(void);


        void __fastcall __security_check_cookie( uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);






extern uintptr_t __security_cookie;







}
# 307 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 3
#pragma pack(pop)
# 9 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 1 3
# 10 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 2 3


#pragma pack(push, 8)
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
 extern "C" {
# 119 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}



    typedef bool __crt_bool;
# 217 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
    __declspec(dllimport) void __cdecl _invalid_parameter(
                   wchar_t const*,
                   wchar_t const*,
                   wchar_t const*,
                   unsigned int,
                   uintptr_t
        );


__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
               wchar_t const*,
               wchar_t const*,
               wchar_t const*,
               unsigned int,
               uintptr_t);
# 448 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
                        int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data* locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
# 489 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
        typedef __time64_t time_t;
# 499 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
    typedef size_t rsize_t;
# 1901 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
}
# 1901 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt.h" 3
#pragma pack(pop)
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\crtdefs.h" 2 3
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 2 3


#pragma pack(push,8)
# 190 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
#pragma detect_mismatch("_MSC_VER", "1900")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
# 205 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
# 347 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\use_ansi.h" 1 3
# 57 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\use_ansi.h" 3
#pragma comment(lib, "msvcprt" "d" "")
# 347 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 2 3
# 526 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;
# 545 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable: 4412)
class __declspec(dllimport) _Lockit
 {
public:
# 578 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() noexcept;


 static void __cdecl _Lockit_ctor(int);
 static void __cdecl _Lockit_dtor(int);

private:
 static void __cdecl _Lockit_ctor(_Lockit *);
 static void __cdecl _Lockit_ctor(_Lockit *, int);
 static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
# 611 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 };
# 698 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
class __declspec(dllimport) _Init_locks
 {
public:
# 714 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 __thiscall _Init_locks();
 __thiscall ~_Init_locks() noexcept;


private:
 static void __cdecl _Init_locks_ctor(_Init_locks *);
 static void __cdecl _Init_locks_dtor(_Init_locks *);
# 731 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
 };

#pragma warning(pop)
}
# 743 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\yvals.h" 3
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;







#pragma pack(pop)
# 5 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\climits" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 1 3
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 2 3


#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
 extern "C" {
# 88 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
}
# 88 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits.h" 3
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\climits" 2 3
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 1 3
# 12 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4738)
#pragma warning(disable: 4820)






 struct _exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    };






        struct _complex
        {
            double x, y;
        };
# 52 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
typedef float float_t;
typedef double double_t;
# 68 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
        extern double const _HUGE;
# 159 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
void __cdecl _fperrraise( int _Except);

               __declspec(dllimport) short __cdecl _dclass( double _X);
               __declspec(dllimport) short __cdecl _ldclass( long double _X);
               __declspec(dllimport) short __cdecl _fdclass( float _X);

               __declspec(dllimport) int __cdecl _dsign( double _X);
               __declspec(dllimport) int __cdecl _ldsign( long double _X);
               __declspec(dllimport) int __cdecl _fdsign( float _X);

               __declspec(dllimport) int __cdecl _dpcomp( double _X, double _Y);
               __declspec(dllimport) int __cdecl _ldpcomp( long double _X, long double _Y);
               __declspec(dllimport) int __cdecl _fdpcomp( float _X, float _Y);

               __declspec(dllimport) short __cdecl _dtest( double* _Px);
               __declspec(dllimport) short __cdecl _ldtest( long double* _Px);
               __declspec(dllimport) short __cdecl _fdtest( float* _Px);

__declspec(dllimport) short __cdecl _d_int( double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _ld_int( long double* _Px, short _Xexp);
__declspec(dllimport) short __cdecl _fd_int( float* _Px, short _Xexp);

__declspec(dllimport) short __cdecl _dscale( double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _ldscale( long double* _Px, long _Lexp);
__declspec(dllimport) short __cdecl _fdscale( float* _Px, long _Lexp);

__declspec(dllimport) short __cdecl _dunscale( short* _Pex, double* _Px);
__declspec(dllimport) short __cdecl _ldunscale( short* _Pex, long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale( short* _Pex, float* _Px);

               __declspec(dllimport) short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
               __declspec(dllimport) short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);

               __declspec(dllimport) short __cdecl _dnorm( unsigned short* _Ps);
               __declspec(dllimport) short __cdecl _fdnorm( unsigned short* _Ps);

               __declspec(dllimport) double __cdecl _dpoly( double _X, double const* _Tab, int _N);
               __declspec(dllimport) long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
               __declspec(dllimport) float __cdecl _fdpoly( float _X, float const* _Tab, int _N);

               __declspec(dllimport) double __cdecl _dlog( double _X, int _Baseflag);
               __declspec(dllimport) long double __cdecl _ldlog( long double _X, int _Baseflag);
               __declspec(dllimport) float __cdecl _fdlog( float _X, int _Baseflag);

               __declspec(dllimport) double __cdecl _dsin( double _X, unsigned int _Qoff);
               __declspec(dllimport) long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
               __declspec(dllimport) float __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
# 276 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
extern "C++"
{
                   inline int fpclassify( float _X) throw()
    {
        return _fdtest(&_X);
    }

                   inline int fpclassify( double _X) throw()
    {
        return _dtest(&_X);
    }

                   inline int fpclassify( long double _X) throw()
    {
        return _ldtest(&_X);
    }

                   inline bool signbit( float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

                   inline bool signbit( double _X) throw()
    {
        return _dsign(_X) != 0;
    }

                   inline bool signbit( long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

                   inline int _fpcomp( float _X, float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

                   inline int _fpcomp( double _X, double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

                   inline int _fpcomp( long double _X, long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {
        typedef double _Type;
    };

    template <> struct _Real_type<float>
    {
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {
        typedef long double _Type;
    };

    template <class _T1, class _T2>
                   inline int _fpcomp( _T1 _X, _T2 _Y) throw()
    {
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
                   inline bool isfinite( _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
                   inline bool isinf( _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
                   inline bool isnan( _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
                   inline bool isnormal( _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isgreaterequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isless( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessequal( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool islessgreater( _Ty1 _X, _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
                   inline bool isunordered( _Ty1 _X, _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}






               int __cdecl abs( int _X);
               long __cdecl labs( long _X);
               long long __cdecl llabs( long long _X);

               double __cdecl acos( double _X);
               double __cdecl asin( double _X);
               double __cdecl atan( double _X);
               double __cdecl atan2( double _Y, double _X);

               double __cdecl cos( double _X);
               double __cdecl cosh( double _X);
               double __cdecl exp( double _X);
                                  double __cdecl fabs( double _X);
               double __cdecl fmod( double _X, double _Y);
               double __cdecl log( double _X);
               double __cdecl log10( double _X);
               double __cdecl pow( double _X, double _Y);
               double __cdecl sin( double _X);
               double __cdecl sinh( double _X);
                                  double __cdecl sqrt( double _X);
               double __cdecl tan( double _X);
               double __cdecl tanh( double _X);

               __declspec(dllimport) double __cdecl acosh( double _X);
               __declspec(dllimport) double __cdecl asinh( double _X);
               __declspec(dllimport) double __cdecl atanh( double _X);
               __declspec(dllimport) double __cdecl atof( char const* _String);
               __declspec(dllimport) double __cdecl _atof_l( char const* _String, _locale_t _Locale);
               __declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
               __declspec(dllimport) double __cdecl cbrt( double _X);
               __declspec(dllimport) double __cdecl ceil( double _X);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl erf( double _X);
               __declspec(dllimport) double __cdecl erfc( double _X);
               __declspec(dllimport) double __cdecl exp2( double _X);
               __declspec(dllimport) double __cdecl expm1( double _X);
               __declspec(dllimport) double __cdecl fdim( double _X, double _Y);
               __declspec(dllimport) double __cdecl floor( double _X);
               __declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
               __declspec(dllimport) double __cdecl fmax( double _X, double _Y);
               __declspec(dllimport) double __cdecl fmin( double _X, double _Y);
               __declspec(dllimport) double __cdecl frexp( double _X, int* _Y);
               __declspec(dllimport) double __cdecl hypot( double _X, double _Y);
               __declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
               __declspec(dllimport) int __cdecl ilogb( double _X);
               __declspec(dllimport) double __cdecl ldexp( double _X, int _Y);
               __declspec(dllimport) double __cdecl lgamma( double _X);
               __declspec(dllimport) long long __cdecl llrint( double _X);
               __declspec(dllimport) long long __cdecl llround( double _X);
               __declspec(dllimport) double __cdecl log1p( double _X);
               __declspec(dllimport) double __cdecl log2( double _X);
               __declspec(dllimport) double __cdecl logb( double _X);
               __declspec(dllimport) long __cdecl lrint( double _X);
               __declspec(dllimport) long __cdecl lround( double _X);

int __cdecl _matherr( struct _exception* _Except);

               __declspec(dllimport) double __cdecl modf( double _X, double* _Y);
               __declspec(dllimport) double __cdecl nan( char const*);
               __declspec(dllimport) double __cdecl nearbyint( double _X);
               __declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
               __declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
               __declspec(dllimport) double __cdecl remainder( double _X, double _Y);
               __declspec(dllimport) double __cdecl remquo( double _X, double _Y, int* _Z);
               __declspec(dllimport) double __cdecl rint( double _X);
               __declspec(dllimport) double __cdecl round( double _X);
               __declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
               __declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
               __declspec(dllimport) double __cdecl tgamma( double _X);
               __declspec(dllimport) double __cdecl trunc( double _X);
               __declspec(dllimport) double __cdecl _j0( double _X );
               __declspec(dllimport) double __cdecl _j1( double _X );
               __declspec(dllimport) double __cdecl _jn(int _X, double _Y);
               __declspec(dllimport) double __cdecl _y0( double _X);
               __declspec(dllimport) double __cdecl _y1( double _X);
               __declspec(dllimport) double __cdecl _yn( int _X, double _Y);

               __declspec(dllimport) float __cdecl acoshf( float _X);
               __declspec(dllimport) float __cdecl asinhf( float _X);
               __declspec(dllimport) float __cdecl atanhf( float _X);
               __declspec(dllimport) float __cdecl cbrtf( float _X);
               __declspec(dllimport) float __cdecl _chgsignf( float _X);
               __declspec(dllimport) float __cdecl copysignf( float _Number, float _Sign);
               __declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
               __declspec(dllimport) float __cdecl erff( float _X);
               __declspec(dllimport) float __cdecl erfcf( float _X);
               __declspec(dllimport) float __cdecl expm1f( float _X);
               __declspec(dllimport) float __cdecl exp2f( float _X);
               __declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
               __declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
               __declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
               __declspec(dllimport) float __cdecl fminf( float _X, float _Y);
               __declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
               __declspec(dllimport) int __cdecl ilogbf( float _X);
               __declspec(dllimport) float __cdecl lgammaf( float _X);
               __declspec(dllimport) long long __cdecl llrintf( float _X);
               __declspec(dllimport) long long __cdecl llroundf( float _X);
               __declspec(dllimport) float __cdecl log1pf( float _X);
               __declspec(dllimport) float __cdecl log2f( float _X);
               __declspec(dllimport) float __cdecl logbf( float _X);
               __declspec(dllimport) long __cdecl lrintf( float _X);
               __declspec(dllimport) long __cdecl lroundf( float _X);
               __declspec(dllimport) float __cdecl nanf( char const*);
               __declspec(dllimport) float __cdecl nearbyintf( float _X);
               __declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
               __declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
               __declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
               __declspec(dllimport) float __cdecl remquof( float _X, float _Y, int* _Z);
               __declspec(dllimport) float __cdecl rintf( float _X);
               __declspec(dllimport) float __cdecl roundf( float _X);
               __declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
               __declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
               __declspec(dllimport) float __cdecl tgammaf( float _X);
               __declspec(dllimport) float __cdecl truncf( float _X);



                   __declspec(dllimport) int __cdecl _set_SSE2_enable( int _Flag);
# 608 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
                   __inline float __cdecl acosf( float _X)
    {
        return (float)acos(_X);
    }

                   __inline float __cdecl asinf( float _X)
    {
        return (float)asin(_X);
    }

                   __inline float __cdecl atan2f( float _Y, float _X)
    {
        return (float)atan2(_Y, _X);
    }

                   __inline float __cdecl atanf( float _X)
    {
        return (float)atan(_X);
    }

                   __inline float __cdecl ceilf( float _X)
    {
        return (float)ceil(_X);
    }

                   __inline float __cdecl cosf( float _X)
    {
        return (float)cos(_X);
    }

                   __inline float __cdecl coshf( float _X)
    {
        return (float)cosh(_X);
    }

                   __inline float __cdecl expf( float _X)
    {
        return (float)exp(_X);
    }
# 656 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
                   __inline float __cdecl fabsf( float _X)
    {
        return (float)fabs(_X);
    }
# 670 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
                   __inline float __cdecl floorf( float _X)
    {
        return (float)floor(_X);
    }

                   __inline float __cdecl fmodf( float _X, float _Y)
    {
        return (float)fmod(_X, _Y);
    }



               __inline float __cdecl frexpf( float _X, int *_Y)
{
    return (float)frexp(_X, _Y);
}

               __inline float __cdecl hypotf( float _X, float _Y)
{
    return _hypotf(_X, _Y);
}

               __inline float __cdecl ldexpf( float _X, int _Y)
{
    return (float)ldexp(_X, _Y);
}
# 711 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
                   __inline float __cdecl log10f( float _X)
    {
        return (float)log10(_X);
    }

                   __inline float __cdecl logf( float _X)
    {
        return (float)log(_X);
    }

                   __inline float __cdecl modff( float _X, float* _Y)
    {
        double _F, _I;
        _F = modf(_X, &_I);
        *_Y = (float)_I;
        return (float)_F;
    }

                   __inline float __cdecl powf( float _X, float _Y)
    {
        return (float)pow(_X, _Y);
    }

                   __inline float __cdecl sinf( float _X)
    {
        return (float)sin(_X);
    }

                   __inline float __cdecl sinhf( float _X)
    {
        return (float)sinh(_X);
    }

                   __inline float __cdecl sqrtf( float _X)
    {
        return (float)sqrt(_X);
    }

                   __inline float __cdecl tanf( float _X)
    {
        return (float)tan(_X);
    }

                   __inline float __cdecl tanhf( float _X)
    {
        return (float)tanh(_X);
    }



               __declspec(dllimport) long double __cdecl acoshl( long double _X);

               __inline long double __cdecl acosl( long double _X)
{
    return acos((double)_X);
}

               __declspec(dllimport) long double __cdecl asinhl( long double _X);

               __inline long double __cdecl asinl( long double _X)
{
    return asin((double)_X);
}

               __inline long double __cdecl atan2l( long double _Y, long double _X)
{
    return atan2((double)_Y, (double)_X);
}

               __declspec(dllimport) long double __cdecl atanhl( long double _X);

               __inline long double __cdecl atanl( long double _X)
{
    return atan((double)_X);
}

               __declspec(dllimport) long double __cdecl cbrtl( long double _X);

               __inline long double __cdecl ceill( long double _X)
{
    return ceil((double)_X);
}

               __inline long double __cdecl _chgsignl( long double _X)
{
    return _chgsign((double)_X);
}

               __declspec(dllimport) long double __cdecl copysignl( long double _Number, long double _Sign);

               __inline long double __cdecl _copysignl( long double _Number, long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

               __inline long double __cdecl coshl( long double _X)
{
    return cosh((double)_X);
}

               __inline long double __cdecl cosl( long double _X)
{
    return cos((double)_X);
}

               __declspec(dllimport) long double __cdecl erfl( long double _X);
               __declspec(dllimport) long double __cdecl erfcl( long double _X);

               __inline long double __cdecl expl( long double _X)
{
    return exp((double)_X);
}

               __declspec(dllimport) long double __cdecl exp2l( long double _X);
               __declspec(dllimport) long double __cdecl expm1l( long double _X);

               __inline long double __cdecl fabsl( long double _X)
{
    return fabs((double)_X);
}

               __declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

               __inline long double __cdecl floorl( long double _X)
{
    return floor((double)_X);
}

               __declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
               __declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

               __inline long double __cdecl fmodl( long double _X, long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

               __inline long double __cdecl frexpl( long double _X, int *_Y)
{
    return frexp((double)_X, _Y);
}

               __declspec(dllimport) int __cdecl ilogbl( long double _X);

               __inline long double __cdecl _hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

               __inline long double __cdecl hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

               __inline long double __cdecl ldexpl( long double _X, int _Y)
{
    return ldexp((double)_X, _Y);
}

               __declspec(dllimport) long double __cdecl lgammal( long double _X);
               __declspec(dllimport) long long __cdecl llrintl( long double _X);
               __declspec(dllimport) long long __cdecl llroundl( long double _X);

               __inline long double __cdecl logl( long double _X)
{
    return log((double)_X);
}

               __inline long double __cdecl log10l( long double _X)
{
    return log10((double)_X);
}

               __declspec(dllimport) long double __cdecl log1pl( long double _X);
               __declspec(dllimport) long double __cdecl log2l( long double _X);
               __declspec(dllimport) long double __cdecl logbl( long double _X);
               __declspec(dllimport) long __cdecl lrintl( long double _X);
               __declspec(dllimport) long __cdecl lroundl( long double _X);

               __inline long double __cdecl modfl( long double _X, long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

               __declspec(dllimport) long double __cdecl nanl( char const*);
               __declspec(dllimport) long double __cdecl nearbyintl( long double _X);
               __declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

               __inline long double __cdecl powl( long double _X, long double _Y)
{
    return pow((double)_X, (double)_Y);
}

               __declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
               __declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int* _Z);
               __declspec(dllimport) long double __cdecl rintl( long double _X);
               __declspec(dllimport) long double __cdecl roundl( long double _X);
               __declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
               __declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

               __inline long double __cdecl sinhl( long double _X)
{
    return sinh((double)_X);
}

               __inline long double __cdecl sinl( long double _X)
{
    return sin((double)_X);
}

               __inline long double __cdecl sqrtl( long double _X)
{
    return sqrt((double)_X);
}

               __inline long double __cdecl tanhl( long double _X)
{
    return tanh((double)_X);
}

               __inline long double __cdecl tanl( long double _X)
{
    return tan((double)_X);
}

               __declspec(dllimport) long double __cdecl tgammal( long double _X);
               __declspec(dllimport) long double __cdecl truncl( long double _X);
# 963 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
            extern double HUGE;




        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





#pragma warning(pop)



}
# 983 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\math.h" 3
#pragma pack(pop)
# 12 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 2 3





template<class _Ty>
                inline _Ty _Pow_int(_Ty _Xx, int _Yx) noexcept
 {
 unsigned int _Nx;
 if (_Yx >= 0)
  _Nx = static_cast<unsigned int>(_Yx);
 else
  _Nx = static_cast<unsigned int>(-_Yx);

 for (_Ty _Zx = static_cast<_Ty>(1); ; _Xx *= _Xx)
  {
  if ((_Nx & 1) != 0)
   _Zx *= _Xx;
  if ((_Nx >>= 1) == 0)
   return (_Yx < 0 ? static_cast<_Ty>(1) / _Zx : _Zx);
  }
 }

               inline double abs( double _Xx) noexcept
 {
 return (:: fabs(_Xx));
 }

               inline double pow( double _Xx, int _Yx) noexcept
 {
 return (_Pow_int(_Xx, _Yx));
 }

               inline float abs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float acos( float _Xx) noexcept
 {
 return (:: acosf(_Xx));
 }

               inline float acosh( float _Xx) noexcept
 {
 return (:: acoshf(_Xx));
 }

               inline float asin( float _Xx) noexcept
 {
 return (:: asinf(_Xx));
 }

               inline float asinh( float _Xx) noexcept
 {
 return (:: asinhf(_Xx));
 }

               inline float atan( float _Xx) noexcept
 {
 return (:: atanf(_Xx));
 }

               inline float atanh( float _Xx) noexcept
 {
 return (:: atanhf(_Xx));
 }

               inline float atan2( float _Yx, float _Xx) noexcept
 {
 return (:: atan2f(_Yx, _Xx));
 }

               inline float cbrt( float _Xx) noexcept
 {
 return (:: cbrtf(_Xx));
 }

               inline float ceil( float _Xx) noexcept
 {
 return (:: ceilf(_Xx));
 }

               inline float copysign( float _Number,
      float _Sign) noexcept
 {
 return (:: copysignf(_Number, _Sign));
 }

               inline float cos( float _Xx) noexcept
 {
 return (:: cosf(_Xx));
 }

               inline float cosh( float _Xx) noexcept
 {
 return (:: coshf(_Xx));
 }

               inline float erf( float _Xx) noexcept
 {
 return (:: erff(_Xx));
 }

               inline float erfc( float _Xx) noexcept
 {
 return (:: erfcf(_Xx));
 }

               inline float exp( float _Xx) noexcept
 {
 return (:: expf(_Xx));
 }

               inline float exp2( float _Xx) noexcept
 {
 return (:: exp2f(_Xx));
 }

               inline float expm1( float _Xx) noexcept
 {
 return (:: expm1f(_Xx));
 }

               inline float fabs( float _Xx) noexcept
 {
 return (:: fabsf(_Xx));
 }

               inline float fdim( float _Xx, float _Yx) noexcept
 {
 return (:: fdimf(_Xx, _Yx));
 }

               inline float floor( float _Xx) noexcept
 {
 return (:: floorf(_Xx));
 }

               inline float fma( float _Xx, float _Yx,
      float _Zx) noexcept
 {
 return (:: fmaf(_Xx, _Yx, _Zx));
 }

               inline float fmax( float _Xx, float _Yx) noexcept
 {
 return (:: fmaxf(_Xx, _Yx));
 }

               inline float fmin( float _Xx, float _Yx) noexcept
 {
 return (:: fminf(_Xx, _Yx));
 }

               inline float fmod( float _Xx, float _Yx) noexcept
 {
 return (:: fmodf(_Xx, _Yx));
 }

               inline float frexp( float _Xx, int* _Yx) noexcept
 {
 return (:: frexpf(_Xx, _Yx));
 }

               inline float hypot( float _Xx, float _Yx) noexcept
 {
 return (:: hypotf(_Xx, _Yx));
 }

               inline int ilogb( float _Xx) noexcept
 {
 return (:: ilogbf(_Xx));
 }

               inline float ldexp( float _Xx, int _Yx) noexcept
 {
 return (:: ldexpf(_Xx, _Yx));
 }

               inline float lgamma( float _Xx) noexcept
 {
 return (:: lgammaf(_Xx));
 }

               inline long long llrint( float _Xx) noexcept
 {
 return (:: llrintf(_Xx));
 }

               inline long long llround( float _Xx) noexcept
 {
 return (:: llroundf(_Xx));
 }

               inline float log( float _Xx) noexcept
 {
 return (:: logf(_Xx));
 }

               inline float log10( float _Xx) noexcept
 {
 return (:: log10f(_Xx));
 }

               inline float log1p( float _Xx) noexcept
 {
 return (:: log1pf(_Xx));
 }

               inline float log2( float _Xx) noexcept
 {
 return (:: log2f(_Xx));
 }

               inline float logb( float _Xx) noexcept
 {
 return (:: logbf(_Xx));
 }

               inline long lrint( float _Xx) noexcept
 {
 return (:: lrintf(_Xx));
 }

               inline long lround( float _Xx) noexcept
 {
 return (:: lroundf(_Xx));
 }

               inline float modf( float _Xx, float* _Yx) noexcept
 {
 return (:: modff(_Xx, _Yx));
 }

               inline float nearbyint( float _Xx) noexcept
 {
 return (:: nearbyintf(_Xx));
 }

               inline float nextafter( float _Xx, float _Yx) noexcept
 {
 return (:: nextafterf(_Xx, _Yx));
 }

               inline float nexttoward( float _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardf(_Xx, _Yx));
 }

               inline float pow( float _Xx,
      float _Yx) noexcept
 {
 return (:: powf(_Xx, _Yx));
 }

               inline float pow( float _Xx, int _Yx) noexcept
 {
 return (_Pow_int(_Xx, _Yx));
 }

               inline float remainder( float _Xx, float _Yx) noexcept
 {
 return (:: remainderf(_Xx, _Yx));
 }

               inline float remquo( float _Xx, float _Yx,
       int *_Zx) noexcept
 {
 return (:: remquof(_Xx, _Yx, _Zx));
 }

               inline float rint( float _Xx) noexcept
 {
 return (:: rintf(_Xx));
 }

               inline float round( float _Xx) noexcept
 {
 return (:: roundf(_Xx));
 }

               inline float scalbln( float _Xx, long _Yx) noexcept
 {
 return (:: scalblnf(_Xx, _Yx));
 }

               inline float scalbn( float _Xx, int _Yx) noexcept
 {
 return (:: scalbnf(_Xx, _Yx));
 }

               inline float sin( float _Xx) noexcept
 {
 return (:: sinf(_Xx));
 }

               inline float sinh( float _Xx) noexcept
 {
 return (:: sinhf(_Xx));
 }

               inline float sqrt( float _Xx) noexcept
 {
 return (:: sqrtf(_Xx));
 }

               inline float tan( float _Xx) noexcept
 {
 return (:: tanf(_Xx));
 }

               inline float tanh( float _Xx) noexcept
 {
 return (:: tanhf(_Xx));
 }

               inline float tgamma( float _Xx) noexcept
 {
 return (:: tgammaf(_Xx));
 }

               inline float trunc( float _Xx) noexcept
 {
 return (:: truncf(_Xx));
 }

               inline long double abs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double acos( long double _Xx) noexcept
 {
 return (:: acosl(_Xx));
 }

               inline long double acosh( long double _Xx) noexcept
 {
 return (:: acoshl(_Xx));
 }

               inline long double asin( long double _Xx) noexcept
 {
 return (:: asinl(_Xx));
 }

               inline long double asinh( long double _Xx) noexcept
 {
 return (:: asinhl(_Xx));
 }

               inline long double atan( long double _Xx) noexcept
 {
 return (:: atanl(_Xx));
 }

               inline long double atanh( long double _Xx) noexcept
 {
 return (:: atanhl(_Xx));
 }

               inline long double atan2( long double _Yx,
      long double _Xx) noexcept
 {
 return (:: atan2l(_Yx, _Xx));
 }

               inline long double cbrt( long double _Xx) noexcept
 {
 return (:: cbrtl(_Xx));
 }

               inline long double ceil( long double _Xx) noexcept
 {
 return (:: ceill(_Xx));
 }

               inline long double copysign( long double _Number,
      long double _Sign) noexcept
 {
 return (:: copysignl(_Number, _Sign));
 }

               inline long double cos( long double _Xx) noexcept
 {
 return (:: cosl(_Xx));
 }

               inline long double cosh( long double _Xx) noexcept
 {
 return (:: coshl(_Xx));
 }

               inline long double erf( long double _Xx) noexcept
 {
 return (:: erfl(_Xx));
 }

               inline long double erfc( long double _Xx) noexcept
 {
 return (:: erfcl(_Xx));
 }

               inline long double exp( long double _Xx) noexcept
 {
 return (:: expl(_Xx));
 }

               inline long double exp2( long double _Xx) noexcept
 {
 return (:: exp2l(_Xx));
 }

               inline long double expm1( long double _Xx) noexcept
 {
 return (:: expm1l(_Xx));
 }

               inline long double fabs( long double _Xx) noexcept
 {
 return (:: fabsl(_Xx));
 }

               inline long double fdim( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fdiml(_Xx, _Yx));
 }

               inline long double floor( long double _Xx) noexcept
 {
 return (:: floorl(_Xx));
 }

               inline long double fma( long double _Xx,
      long double _Yx, long double _Zx) noexcept
 {
 return (:: fmal(_Xx, _Yx, _Zx));
 }

               inline long double fmax( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmaxl(_Xx, _Yx));
 }

               inline long double fmin( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fminl(_Xx, _Yx));
 }

               inline long double fmod( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: fmodl(_Xx, _Yx));
 }

               inline long double frexp( long double _Xx,
       int* _Yx) noexcept
 {
 return (:: frexpl(_Xx, _Yx));
 }

               inline long double hypot( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: hypotl(_Xx, _Yx));
 }

               inline int ilogb( long double _Xx) noexcept
 {
 return (:: ilogbl(_Xx));
 }

               inline long double ldexp( long double _Xx,
      int _Yx) noexcept
 {
 return (:: ldexpl(_Xx, _Yx));
 }

               inline long double lgamma( long double _Xx) noexcept
 {
 return (:: lgammal(_Xx));
 }

               inline long long llrint( long double _Xx) noexcept
 {
 return (:: llrintl(_Xx));
 }

               inline long long llround( long double _Xx) noexcept
 {
 return (:: llroundl(_Xx));
 }

               inline long double log( long double _Xx) noexcept
 {
 return (:: logl(_Xx));
 }

               inline long double log10( long double _Xx) noexcept
 {
 return (:: log10l(_Xx));
 }

               inline long double log1p( long double _Xx) noexcept
 {
 return (:: log1pl(_Xx));
 }

               inline long double log2( long double _Xx) noexcept
 {
 return (:: log2l(_Xx));
 }

               inline long double logb( long double _Xx) noexcept
 {
 return (:: logbl(_Xx));
 }

               inline long lrint( long double _Xx) noexcept
 {
 return (:: lrintl(_Xx));
 }

               inline long lround( long double _Xx) noexcept
 {
 return (:: lroundl(_Xx));
 }

               inline long double modf( long double _Xx,
       long double* _Yx) noexcept
 {
 return (:: modfl(_Xx, _Yx));
 }

               inline long double nearbyint( long double _Xx) noexcept
 {
 return (:: nearbyintl(_Xx));
 }

               inline long double nextafter( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nextafterl(_Xx, _Yx));
 }

               inline long double nexttoward( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: nexttowardl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: powl(_Xx, _Yx));
 }

               inline long double pow( long double _Xx,
      int _Yx) noexcept
 {
 return (_Pow_int(_Xx, _Yx));
 }

               inline long double remainder( long double _Xx,
      long double _Yx) noexcept
 {
 return (:: remainderl(_Xx, _Yx));
 }

               inline long double remquo( long double _Xx,
      long double _Yx, int *_Zx) noexcept
 {
 return (:: remquol(_Xx, _Yx, _Zx));
 }

               inline long double rint( long double _Xx) noexcept
 {
 return (:: rintl(_Xx));
 }

               inline long double round( long double _Xx) noexcept
 {
 return (:: roundl(_Xx));
 }

               inline long double scalbln( long double _Xx,
      long _Yx) noexcept
 {
 return (:: scalblnl(_Xx, _Yx));
 }

               inline long double scalbn( long double _Xx,
      int _Yx) noexcept
 {
 return (:: scalbnl(_Xx, _Yx));
 }

               inline long double sin( long double _Xx) noexcept
 {
 return (:: sinl(_Xx));
 }

               inline long double sinh( long double _Xx) noexcept
 {
 return (:: sinhl(_Xx));
 }

               inline long double sqrt( long double _Xx) noexcept
 {
 return (:: sqrtl(_Xx));
 }

               inline long double tan( long double _Xx) noexcept
 {
 return (:: tanl(_Xx));
 }

               inline long double tanh( long double _Xx) noexcept
 {
 return (:: tanhl(_Xx));
 }

               inline long double tgamma( long double _Xx) noexcept
 {
 return (:: tgammal(_Xx));
 }

               inline long double trunc( long double _Xx) noexcept
 {
 return (:: truncl(_Xx));
 }
# 656 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 1 3







# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtr1common" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdlib" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdlib" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 1 3
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_malloc.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_malloc.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_malloc.h" 3
 extern "C" {
# 54 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_malloc.h" 3
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
         size_t _Count,
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
                            size_t _Count,
                            size_t _Size
    );


__declspec(dllimport) int __cdecl _callnewh(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                            void* _Block,
                            size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
                                   void* _Block
    );

__declspec(dllimport)
void __cdecl free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
         size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl malloc(
                            size_t _Size
    );


__declspec(dllimport)
size_t __cdecl _msize(
                  void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
                                    void* _Block,
                                    size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
                                   void* _Block,
                                   size_t _Size
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
                                   void* _Block
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
                            size_t _Size,
                            size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
                            size_t _Size,
                            size_t _Alignment,
                            size_t _Offset
    );


__declspec(dllimport)
size_t __cdecl _aligned_msize(
                  void* _Block,
                  size_t _Alignment,
                  size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment
    );


__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment
    );
# 214 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_malloc.h" 3
}
# 214 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_malloc.h" 3
#pragma pack(pop)
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_search.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_search.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stddef.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stddef.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stddef.h" 3
 extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;





__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);
# 46 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stddef.h" 3
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



}
# 52 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stddef.h" 3
#pragma pack(pop)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_search.h" 2 3


#pragma pack(push, 8)
# 16 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_search.h" 3
 extern "C" {






    __declspec(dllimport) void* __cdecl bsearch_s(
                                                           void const* _Key,
                                                           void const* _Base,
                                                           rsize_t _NumOfElements,
                                                           rsize_t _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                           void* _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
                                                                void* _Base,
                                                                rsize_t _NumOfElements,
                                                                rsize_t _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                                void* _Context
        );






__declspec(dllimport) void* __cdecl bsearch(
                                                       void const* _Key,
                                                       void const* _Base,
                                                       size_t _NumOfElements,
                                                       size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
                                                            void* _Base,
                                                            size_t _NumOfElements,
                                                            size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );


__declspec(dllimport) void* __cdecl _lfind_s(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                          void* _Context
    );


__declspec(dllimport) void* __cdecl _lfind(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          unsigned int _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );


__declspec(dllimport) void* __cdecl _lsearch_s(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                size_t _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                                void* _Context
    );


__declspec(dllimport) void* __cdecl _lsearch(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                unsigned int _SizeOfElements,
         int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );
# 184 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_search.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                              void const* _Key,
                                                              void const* _Base,
                                                              unsigned int* _NumOfElements,
                                                              unsigned int _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                   void const* _Key,
                                                                   void* _Base,
                                                                   unsigned int* _NumOfElements,
                                                                   unsigned int _SizeOfElements,
             int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );





}
# 206 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_search.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
 extern "C" {
# 48 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
__declspec(dllimport) errno_t __cdecl _itow_s(
                                 int _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow(int _Value, wchar_t *_Buffer, int _Radix);
# 71 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ltow_s(
                                 long _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value, wchar_t *_Buffer, int _Radix);







__declspec(dllimport) errno_t __cdecl _ultow_s(
                                 unsigned long _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix);







__declspec(dllimport) double __cdecl wcstod(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) double __cdecl _wcstod_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl wcstol(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _wcstol_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl wcstoll(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _wcstoll_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl wcstoul(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl wcstoull(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl wcstold(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) long double __cdecl _wcstold_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl wcstof(
                             wchar_t const* _String,
                             wchar_t** _EndPtr
    );


__declspec(dllimport) float __cdecl _wcstof_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl _wtof(
           wchar_t const* _String
    );


__declspec(dllimport) double __cdecl _wtof_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wtoi(
           wchar_t const* _String
    );


__declspec(dllimport) int __cdecl _wtoi_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl _wtol(
           wchar_t const* _String
    );


__declspec(dllimport) long __cdecl _wtol_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl _wtoll(
           wchar_t const* _String
    );


__declspec(dllimport) long long __cdecl _wtoll_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                                 __int64 _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _i64tow(
                           __int64 _Value,
                           wchar_t* _Buffer,
                           int _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                 unsigned __int64 _Value,
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                           unsigned __int64 _Value,
                           wchar_t* _Buffer,
                           int _Radix
    );


__declspec(dllimport) __int64 __cdecl _wtoi64(
           wchar_t const* _String
    );


__declspec(dllimport) __int64 __cdecl _wtoi64_l(
             wchar_t const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _wcstoi64(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                             wchar_t const* _String,
                             wchar_t** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );






__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
                                     wchar_t* _Buffer,
                                     wchar_t const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount,
                                 wchar_t const* _Drive,
                                 wchar_t const* _Dir,
                                 wchar_t const* _Filename,
                                 wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
# 360 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);
# 369 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
__declspec(dllimport) void __cdecl _wperror(
               wchar_t const* _ErrMsg
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _wsplitpath(
                             wchar_t const* _FullPath,
                             wchar_t* _Drive,
                             wchar_t* _Dir,
                             wchar_t* _Filename,
                             wchar_t* _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                       wchar_t const* _FullPath,
                                       wchar_t* _Drive,
                                       size_t _DriveCount,
                                       wchar_t* _Dir,
                                       size_t _DirCount,
                                       wchar_t* _Filename,
                                       size_t _FilenameCount,
                                       wchar_t* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( wchar_t const* _Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 407 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                                                                                    wchar_t** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    wchar_t const* _VarName
        );



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
               wchar_t const* _VarName
        );



    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                         size_t* _RequiredCount,
                                         wchar_t* _Buffer,
                                         size_t _BufferCount,
                                         wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t* _RequiredCount, wchar_t (&_Buffer)[_Size], wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 438 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
    __declspec(dllimport) int __cdecl _wputenv(
               wchar_t const* _EnvString
        );


    __declspec(dllimport) errno_t __cdecl _wputenv_s(
               wchar_t const* _Name,
               wchar_t const* _Value
        );

    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                     wchar_t const* _Filename,
                                     wchar_t const* _VarName,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t *_ResultPath);






    __declspec(dllimport) int __cdecl _wsystem(
                   wchar_t const* _Command
        );





}
# 477 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdlib.h" 3
#pragma pack(pop)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 2 3



#pragma pack(push, 8)
# 17 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
 extern "C" {
# 33 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) void __cdecl _swab(
                                                                     char* _Buf1,
                                                                     char* _Buf2,
                                                                     int _SizeInBytes
    );
# 50 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
         unsigned int _Flags,
         unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);
# 139 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
    int __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit( _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));
# 154 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
                 _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);


    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
# 207 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror( char const* _ErrMsg);




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char** __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int* __cdecl __p__fmode (void);
# 250 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _get_pgmptr ( char** _Value);


__declspec(dllimport) errno_t __cdecl _get_wpgmptr( wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode ( int _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode ( int* _PMode);
# 266 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

               int __cdecl abs ( int _Number);
               long __cdecl labs ( long _Number);
               long long __cdecl llabs ( long long _Number);
               __int64 __cdecl _abs64( __int64 _Number);

               unsigned short __cdecl _byteswap_ushort( unsigned short _Number);
               unsigned long __cdecl _byteswap_ulong ( unsigned long _Number);
               unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Number);

               __declspec(dllimport) div_t __cdecl div ( int _Numerator, int _Denominator);
               __declspec(dllimport) ldiv_t __cdecl ldiv ( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotl(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotl64(
         unsigned __int64 _Value,
         int _Shift
    );

unsigned int __cdecl _rotr(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotr(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotr64(
         unsigned __int64 _Value,
         int _Shift
    );

#pragma warning(pop)






__declspec(dllimport) void __cdecl srand( unsigned int _Seed);

               __declspec(dllimport) int __cdecl rand(void);
# 352 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
# 385 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
#pragma pack(push, 4)
 typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#pragma pack(pop)
# 406 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








 __declspec(dllimport) double __cdecl atof ( char const* _String);
                                  __declspec(dllimport) int __cdecl atoi ( char const* _String);
                                  __declspec(dllimport) long __cdecl atol ( char const* _String);
                                  __declspec(dllimport) long long __cdecl atoll ( char const* _String);
                                  __declspec(dllimport) __int64 __cdecl _atoi64( char const* _String);

               __declspec(dllimport) double __cdecl _atof_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoi_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _atol_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _atoll_l ( char const* _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( char const* _String, _locale_t _Locale);

               __declspec(dllimport) int __cdecl _atoflt ( _CRT_FLOAT* _Result, char const* _String);
               __declspec(dllimport) int __cdecl _atodbl ( _CRT_DOUBLE* _Result, char* _String);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE* _Result, char* _String);


__declspec(dllimport) int __cdecl _atoflt_l(
             _CRT_FLOAT* _Result,
             char const* _String,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _atodbl_l(
             _CRT_DOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );



__declspec(dllimport) int __cdecl _atoldbl_l(
             _LDOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );


__declspec(dllimport) float __cdecl strtof(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) float __cdecl _strtof_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) double __cdecl strtod(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) double __cdecl _strtod_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long double __cdecl strtold(
                             char const* _String,
                             char** _EndPtr
    );


__declspec(dllimport) long double __cdecl _strtold_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


__declspec(dllimport) long __cdecl strtol(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long __cdecl _strtol_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) long long __cdecl strtoll(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) long long __cdecl _strtoll_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long __cdecl strtoul(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned long long __cdecl strtoull(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) __int64 __cdecl _strtoi64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );
# 617 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _itoa_s(
                                 int _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa(int _Value, char *_Buffer, int _Radix);
# 641 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ltoa_s(
                                 long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa(long _Value, char *_Buffer, int _Radix);
# 664 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ultoa_s(
                                 unsigned long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value, char *_Buffer, int _Radix);
# 687 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _i64toa_s(
                                 __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                           __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );



__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                                 unsigned __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                           unsigned __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );
# 732 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) errno_t __cdecl _ecvt_s(
                                 char* _Buffer,
          size_t _BufferCount,
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int* _PtDec, int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
# 750 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );



__declspec(dllimport) errno_t __cdecl _fcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _FractionalDigitCount,
                                 int* _PtDec,
                                 int* _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
# 780 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
          double _Value,
          int _FractionalDigitCount,
          int* _PtDec,
          int* _PtSign
    );


__declspec(dllimport) errno_t __cdecl _gcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _DigitCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                           double _Value,
                           int _DigitCount,
                           char* _Buffer
    );
# 834 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);


    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);





__declspec(dllimport) int __cdecl mblen(
                                                char const* _Ch,
                                                size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _mblen_l(
                                                char const* _Ch,
                                                size_t _MaxCount,
                                                _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrlen(
           char const* _String
    );



__declspec(dllimport) size_t __cdecl _mbstrlen_l(
             char const* _String,
             _locale_t _Locale
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen(
           char const* _String,
           size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
             char const* _String,
             size_t _MaxCount,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl mbtowc(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes
    );


__declspec(dllimport) int __cdecl _mbtowc_l(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes,
                                         _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount,
                                                              _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], char const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 941 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
# 953 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
                                   char* _MbCh,
                                   wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
                             char* _MbCh,
                             wchar_t _WCh,
                             _locale_t _Locale
    );




    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                                 int* _SizeConverted,
                                                                 char* _MbCh,
                                                                 rsize_t _SizeInBytes,
                                                                 wchar_t _WCh
        );




__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                                     int* _SizeConverted,
                                     char* _MbCh,
                                     size_t _SizeInBytes,
                                     wchar_t _WCh,
                                     _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }







__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);







__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes,
                                                                       _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
# 1029 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
# 1059 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
                                     char* _Buffer,
                                     char const* _Path,
                                     size_t _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 char const* _Drive,
                                 char const* _Dir,
                                 char const* _Filename,
                                 char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
# 1086 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);
# 1095 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                             char const* _FullPath,
                             char* _Drive,
                             char* _Dir,
                             char* _Filename,
                             char* _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                       char const* _FullPath,
                                       char* _Drive,
                                       size_t _DriveCount,
                                       char* _Dir,
                                       size_t _DirCount,
                                       char* _Filename,
                                       size_t _FilenameCount,
                                       char* _Ext,
                                       size_t _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( char const* _Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
# 1132 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                         size_t* _RequiredCount,
                                         char* _Buffer,
                                         rsize_t _BufferCount,
                                         char const* _VarName
        );






    __declspec(dllimport) int* __cdecl __p___argc (void);
    __declspec(dllimport) char*** __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);
# 1158 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) char*** __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);
# 1182 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl getenv(
               char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t* _RequiredCount, char (&_Buffer)[_Size], char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
# 1200 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
                                                                                    char** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    char const* _VarName
        );





    __declspec(dllimport) int __cdecl system(
                   char const* _Command
        );



#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv(
               char const* _EnvString
        );


    __declspec(dllimport) errno_t __cdecl _putenv_s(
               char const* _Name,
               char const* _Value
        );

#pragma warning(pop)

 __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                     char const* _Filename,
                                     char const* _VarName,
                                     char* _Buffer,
                                     size_t _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(char const* _Filename, char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }






    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char *_Buffer);







    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
             int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
             unsigned _Frequency,
             unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
             unsigned long _Duration
        );
# 1289 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
              double _Value,
              int _DigitCount,
              int* _PtDec,
              int* _PtSign
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
              double _Value,
              int _FractionalDigitCount,
              int* _PtDec,
              int* _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                               double _Value,
                               int _DigitCount,
                               char* _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                               int _Value,
                               char* _Buffer,
                               int _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                               long _Value,
                               char* _Buffer,
                               int _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
                                        char* _Buf1,
                                        char* _Buf2,
                                        int _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                               unsigned long _Value,
                               char* _Buffer,
                               int _Radix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
                   char const* _EnvString
            );



#pragma warning(pop)

 _onexit_t __cdecl onexit( _onexit_t _Func);





}
# 1363 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdlib.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdlib" 2 3




namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtr1common" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

struct _Nil
 {
 };


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;

 constexpr operator value_type() const noexcept
  {
  return (value);
  }

 constexpr value_type operator()() const noexcept
  {
  return (value);
  }
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool _Val>
 using bool_constant = integral_constant<bool, _Val>;


template<bool _Val>
 struct _Cat_base
  : integral_constant<bool, _Val>
 {
 };


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 typedef _Ty type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };


template<class _Ty1,
 class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };


template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, size_t _Nx>
 struct remove_const<const _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, size_t _Nx>
 struct remove_volatile<volatile _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };

template<>
 struct _Is_integral<char16_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<char32_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<__int64>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned __int64>
  : true_type
 {
 };



template<class _Ty>
 struct is_integral
  : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_arithmetic
  : _Cat_base<is_integral<_Ty>::value
   || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct remove_reference
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 typedef _Ty type;
 };


struct _Wrap_int
 {
 _Wrap_int(int)
  {
  }
 };

template<class _Ty>
 struct _Identity
 {
 typedef _Ty type;
 };
# 349 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtr1common" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
template<class _Ty>
 struct _Promote_to_float
 {
 typedef typename conditional<is_integral<_Ty>::value,
  double, _Ty>::type type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_float_type
 {
 typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
 typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
 typedef typename conditional<is_same<_Ty1f, long double>::value
  || is_same<_Ty2f, long double>::value, long double,
  typename conditional<is_same<_Ty1f, double>::value
   || is_same<_Ty2f, double>::value, double,
   float>::type>::type type;
 };
}
# 76 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 3
template<class _Ty1,
 class _Ty2> inline
 typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
  && ::std:: is_arithmetic<_Ty2>::value,
  typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
 pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (:: pow(type(_Left), type(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C" double __cdecl asin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C" double __cdecl atan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C" double __cdecl cos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C" double __cdecl cosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C" double __cdecl exp( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C" double __cdecl fabs( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left, int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left, int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C" double __cdecl log10( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C" double __cdecl sin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C" double __cdecl sinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C" double __cdecl sqrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C" double __cdecl tan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C" double __cdecl tanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }
# 125 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtgmath.h" 3
inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle,
 long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }



inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl hypot( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left, long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left, int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }


#pragma warning(pop)
#pragma pack(pop)
# 656 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cmath" 2 3




namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 1 3
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_stdio_config.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_stdio_config.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_stdio_config.h" 3
 extern "C" {
# 65 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_stdio_config.h" 3
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")






__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}




__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}
# 105 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_stdio_config.h" 3
}
# 105 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_stdio_config.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 2 3


#pragma pack(push, 8)
# 15 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
 extern "C" {
# 25 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);
# 47 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(dllimport) wint_t __cdecl fgetwc(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
            wchar_t _Character,
            FILE* _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
         wchar_t _Character
    );


__declspec(dllimport) wint_t __cdecl getwc(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl getwchar(void);




__declspec(dllimport) wchar_t* __cdecl fgetws(
                                 wchar_t* _Buffer,
                                 int _BufferCount,
                                 FILE* _Stream
    );


__declspec(dllimport) int __cdecl fputws(
            wchar_t const* _Buffer,
            FILE* _Stream
    );



__declspec(dllimport) wchar_t* __cdecl _getws_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount
    );

extern "C++" { template <size_t _Size> inline wchar_t* __cdecl _getws_s(wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }






__declspec(dllimport) wint_t __cdecl putwc(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
         wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
           wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
            wint_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) FILE * __cdecl _wfdopen(
           int _FileHandle,
           wchar_t const* _Mode
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
                              FILE** _Stream,
                              wchar_t const* _FileName,
                              wchar_t const* _Mode
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfreopen(
            wchar_t const* _FileName,
            wchar_t const* _Mode,
            FILE* _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
                              FILE** _Stream,
                              wchar_t const* _FileName,
                              wchar_t const* _Mode,
                              FILE* _OldStream
    );


__declspec(dllimport) FILE* __cdecl _wfsopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
           int _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
               wchar_t const* _ErrorMessage
    );




    __declspec(dllimport) FILE* __cdecl _wpopen(
               wchar_t const* _Command,
               wchar_t const* _Mode
        );



__declspec(dllimport) int __cdecl _wremove(
           wchar_t const* _FileName
    );





__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
               wchar_t const* _Directory,
               wchar_t const* _FilePrefix
    );





__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
                                 wchar_t* _Buffer,
                                 size_t _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);
# 219 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
            wchar_t _Character,
            FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
            wint_t _Character,
            FILE* _Stream
    );
# 267 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwprintf(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwprintf_s_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfwprintf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfwprintf_p_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfwprintf_p(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwprintf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwprintf_s_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vwprintf_p(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fwprintf_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fwprintf(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_s_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fwprintf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fwprintf_p_l(
                                            FILE* const _Stream,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwprintf_p(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl wprintf(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_s_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl wprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _wprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wprintf_p(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 700 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                           unsigned __int64 _Options,
                                           FILE* _Stream,
                                           wchar_t const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );


__inline int __cdecl _vfwscanf_l(
            FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfwscanf(
            FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfwscanf_s_l(
                                  FILE* const _Stream,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfwscanf_s(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }




__inline int __cdecl _vwscanf_l(
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vwscanf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vwscanf_s_l(
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vwscanf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fwscanf_l(
                                           FILE* const _Stream,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fwscanf(
                                 FILE* const _Stream,
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fwscanf_s_l(
                                             FILE* const _Stream,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fwscanf_s(
                                       FILE* const _Stream,
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _wscanf_l(
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl wscanf(
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _wscanf_s_l(
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl wscanf_s(
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1001 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            size_t _MaxCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );



__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                            unsigned __int64 _Options,
                                            wchar_t* _Buffer,
                                            size_t _BufferCount,
                                            wchar_t const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf_l(
                                                wchar_t* const _Buffer,
                                                size_t const _BufferCount,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}


#pragma warning(push)
#pragma warning(disable: 4793)



__inline int __cdecl _vsnwprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnwprintf_s(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _snwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vsnwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);








#pragma warning(pop)


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf(
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _Format,
                                             va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
}


extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1148 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__inline int __cdecl _vswprintf_c_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vswprintf_c(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vswprintf_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl __vswprintf_l(
                                            wchar_t* const _Buffer,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




__inline int __cdecl _vswprintf(
                                  wchar_t* const _Buffer,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}




__inline int __cdecl vswprintf(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            va_list _ArgList
    )



{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vswprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}





    __inline int __cdecl vswprintf_s(
                                      wchar_t* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1300 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__inline int __cdecl _vswprintf_p_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vswprintf_p(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vscwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vscwprintf(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscwprintf_l(_Format, 0, _ArgList);
}




__inline int __cdecl _vscwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vscwprintf_p(
                                  wchar_t const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}




__inline int __cdecl __swprintf_l(
                                            wchar_t* const _Buffer,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf(
                                  wchar_t* const _Buffer,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl swprintf(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)


#pragma warning(disable: 4793 4996)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __swprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __vswprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
# 1495 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _swprintf( wchar_t *_Buffer, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vswprintf( wchar_t *_Buffer, wchar_t const* _Format, va_list _Args);






#pragma warning(pop)



__inline int __cdecl _swprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl swprintf_s(
                                      wchar_t* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" {
# 1548 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(push)
# 1548 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
;
# 1548 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(disable: 4793)
# 1548 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1548 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1548 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
; }
# 1557 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__inline int __cdecl _swprintf_p_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_p(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_c_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swprintf_c(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwprintf_l(
                                             wchar_t* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf(
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_s_l(
                                            wchar_t* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwprintf_s(
                                  wchar_t* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" {
# 1731 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(push)
# 1731 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
;
# 1731 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(disable: 4793)
# 1731 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 1731 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1731 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
; }
# 1740 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__inline int __cdecl _scwprintf_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf_p_l(
                                            wchar_t const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _scwprintf_p(
                                  wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)



 extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int swprintf(
                                          wchar_t* const _Buffer,
                                          wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl vswprintf(
                                          wchar_t* const _Buffer,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            ) throw()
        {
#pragma warning(suppress: 28719)
 return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int _swprintf_l(
                                                    wchar_t* const _Buffer,
                                                    wchar_t const* const _Format,
                                                    _locale_t const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl _vswprintf_l(
                                                    wchar_t* const _Buffer,
                                                    wchar_t const* const _Format,
                                                    _locale_t const _Locale,
                                                    va_list _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }



#pragma warning(pop)
# 1890 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                           unsigned __int64 _Options,
                                           wchar_t const* _Buffer,
                                           size_t _BufferCount,
                                           wchar_t const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );



__inline int __cdecl _vswscanf_l(
                                  wchar_t const* const _Buffer,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




__inline int __cdecl vswscanf(
                                  wchar_t const* _Buffer,
                                  wchar_t const* _Format,
                                  va_list _ArgList
    )



{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}




__inline int __cdecl _vswscanf_s_l(
                                  wchar_t const* const _Buffer,
                                  wchar_t const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}






    __inline int __cdecl vswscanf_s(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }




extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Buffer)[_Size], wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
# 1978 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwscanf_l(
                                           wchar_t const* const _Buffer,
                                           size_t const _BufferCount,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
                                           va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}




__inline int __cdecl _vsnwscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
                                             va_list _ArgList
    )



{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _swscanf_l(
                                           wchar_t const* const _Buffer,
                                           wchar_t const* const _Format,
                                           _locale_t _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl swscanf(
                                 wchar_t const* const _Buffer,
                                 wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _swscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}






    __inline int __cdecl swscanf_s(
                                       wchar_t const* const _Buffer,
                                       wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf_l(
                                           wchar_t const* const _Buffer,
                                           size_t const _BufferCount,
                                           wchar_t const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf(
                                     wchar_t const* const _Buffer,
                                     size_t const _BufferCount,
                                     wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf_s_l(
                                             wchar_t const* const _Buffer,
                                             size_t const _BufferCount,
                                             wchar_t const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snwscanf_s(
                                      wchar_t const* const _Buffer,
                                      size_t const _BufferCount,
                                      wchar_t const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 2195 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
}
# 2195 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstdio.h" 3
#pragma pack(pop)
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 2 3


#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
 extern "C" {
# 68 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
              FILE* _Stream,
              char*** _Base,
              char*** _Pointer,
              int** _Count
    );
# 89 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
    __declspec(dllimport) errno_t __cdecl clearerr_s(
                FILE* _Stream
        );


    __declspec(dllimport) errno_t __cdecl fopen_s(
                                  FILE** _Stream,
                                  char const* _FileName,
                                  char const* _Mode
        );



    __declspec(dllimport) size_t __cdecl fread_s(
                                                                           void* _Buffer,
                                                                           size_t _BufferSize,
                                                                           size_t _ElementSize,
                                                                           size_t _ElementCount,
                                                                           FILE* _Stream
        );


    __declspec(dllimport) errno_t __cdecl freopen_s(
                                  FILE** _Stream,
                                  char const* _FileName,
                                  char const* _Mode,
                                  FILE* _OldStream
        );


    __declspec(dllimport) char* __cdecl gets_s(
                              char* _Buffer,
                              rsize_t _Size
        );


    __declspec(dllimport) errno_t __cdecl tmpfile_s(
                                     FILE** _Stream
        );



    __declspec(dllimport) errno_t __cdecl tmpnam_s(
                              char* _Buffer,
                              rsize_t _Size
        );



__declspec(dllimport) void __cdecl clearerr(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl fclose(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);


__declspec(dllimport) FILE* __cdecl _fdopen(
           int _FileHandle,
           char const* _Mode
    );


__declspec(dllimport) int __cdecl feof(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl ferror(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
                FILE* _Stream
    );



__declspec(dllimport) int __cdecl fgetc(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);



__declspec(dllimport) int __cdecl fgetpos(
            FILE* _Stream,
            fpos_t* _Position
    );



__declspec(dllimport) char* __cdecl fgets(
                              char* _Buffer,
                              int _MaxCount,
                              FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fileno(
         FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl fopen(
           char const* _FileName,
           char const* _Mode
    );




__declspec(dllimport) int __cdecl fputc(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
         int _Character
    );



__declspec(dllimport) int __cdecl fputs(
            char const* _Buffer,
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
                                                     void* _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                     FILE* _Stream
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl freopen(
            char const* _FileName,
            char const* _Mode,
            FILE* _Stream
    );


__declspec(dllimport) FILE* __cdecl _fsopen(
           char const* _FileName,
           char const* _Mode,
           int _ShFlag
    );



__declspec(dllimport) int __cdecl fsetpos(
            FILE* _Stream,
            fpos_t const* _Position
    );



__declspec(dllimport) int __cdecl fseek(
            FILE* _Stream,
            long _Offset,
            int _Origin
    );



__declspec(dllimport) int __cdecl _fseeki64(
            FILE* _Stream,
            __int64 _Offset,
            int _Origin
    );



__declspec(dllimport) long __cdecl ftell(
            FILE* _Stream
    );



__declspec(dllimport) __int64 __cdecl _ftelli64(
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
                                                   void const* _Buffer,
                                                   size_t _ElementSize,
                                                   size_t _ElementCount,
                                                   FILE* _Stream
    );



__declspec(dllimport) int __cdecl getc(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl getchar(void);


__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }




__declspec(dllimport) int __cdecl _getw(
            FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
               char const* _ErrorMessage
    );





    __declspec(dllimport) int __cdecl _pclose(
                FILE* _Stream
        );


    __declspec(dllimport) FILE* __cdecl _popen(
               char const* _Command,
               char const* _Mode
        );





__declspec(dllimport) int __cdecl putc(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
         int _Character
    );


__declspec(dllimport) int __cdecl puts(
           char const* _Buffer
    );



__declspec(dllimport) int __cdecl _putw(
            int _Word,
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
           char const* _FileName
    );


__declspec(dllimport) int __cdecl rename(
           char const* _OldFileName,
           char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
           char const* _FileName
    );



    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
    __declspec(dllimport) int __cdecl unlink(
               char const* _FileName
        );





__declspec(dllimport) void __cdecl rewind(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl setbuf(
                                                        FILE* _Stream,
                                                        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
         int _Maximum
    );



__declspec(dllimport) int __cdecl setvbuf(
                                 FILE* _Stream,
                                 char* _Buffer,
                                 int _Mode,
                                 size_t _Size
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
               char const* _DirectoryName,
               char const* _FilePrefix
    );





               __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl tmpnam( char *_Buffer);







__declspec(dllimport) int __cdecl ungetc(
            int _Character,
            FILE* _Stream
    );
# 458 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__declspec(dllimport) void __cdecl _lock_file(
            FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fclose_nolock(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fflush_nolock(
                FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fgetc_nolock(
            FILE* _Stream
    );



__declspec(dllimport) int __cdecl _fputc_nolock(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
                                                     void* _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                     FILE* _Stream
    );



__declspec(dllimport) size_t __cdecl _fread_nolock_s(
                                                                     void* _Buffer,
                                                                     size_t _BufferSize,
                                                                     size_t _ElementSize,
                                                                     size_t _ElementCount,
                                                                     FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
            FILE* _Stream,
            long _Offset,
            int _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
            FILE* _Stream,
            __int64 _Offset,
            int _Origin
    );


__declspec(dllimport) long __cdecl _ftell_nolock(
            FILE* _Stream
    );


__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
            FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
                                                   void const* _Buffer,
                                                   size_t _ElementSize,
                                                   size_t _ElementCount,
                                                   FILE* _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
            int _Character,
            FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
            int _Character,
            FILE* _Stream
    );
# 583 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__declspec(dllimport) int* __cdecl __p__commode(void);
# 603 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                            unsigned __int64 _Options,
                                            FILE* _Stream,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__inline int __cdecl _vfprintf_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfprintf(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfprintf_s_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}





    __inline int __cdecl vfprintf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vfprintf_p_l(
             FILE* const _Stream,
             char const* const _Format,
             _locale_t const _Locale,
             va_list _ArgList
    )



{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl _vfprintf_p(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vprintf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _vprintf_s_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vprintf_s(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }





__inline int __cdecl _vprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}



__inline int __cdecl _vprintf_p(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}



__inline int __cdecl _fprintf_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl fprintf(
                                  FILE* const _Stream,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(dllimport) int __cdecl _set_printf_count_output(
         int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fprintf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _fprintf_p_l(
                                            FILE* const _Stream,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fprintf_p(
                                  FILE* const _Stream,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl printf(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_s_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl printf_s(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





__inline int __cdecl _printf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _printf_p(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 1040 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                           unsigned __int64 _Options,
                                           FILE* _Stream,
                                           char const* _Format,
                                           _locale_t _Locale,
                                           va_list _Arglist
    );


__inline int __cdecl _vfscanf_l(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}



__inline int __cdecl vfscanf(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}



__inline int __cdecl _vfscanf_s_l(
                                  FILE* const _Stream,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}






    __inline int __cdecl vfscanf_s(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }





__inline int __cdecl _vscanf_l(
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}



__inline int __cdecl vscanf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}



__inline int __cdecl _vscanf_s_l(
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}





    __inline int __cdecl vscanf_s(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fscanf_l(
                                           FILE* const _Stream,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fscanf(
                                 FILE* const _Stream,
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _fscanf_s_l(
                                             FILE* const _Stream,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl fscanf_s(
                                       FILE* const _Stream,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _scanf_l(
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl scanf(
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scanf_s_l(
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl scanf_s(
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 1333 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            size_t _MaxCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                            unsigned __int64 _Options,
                                            char* _Buffer,
                                            size_t _BufferCount,
                                            char const* _Format,
                                            _locale_t _Locale,
                                            va_list _ArgList
    );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnprintf_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf(
                                             char* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
                                             va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
}
# 1426 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__inline int __cdecl vsnprintf(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsprintf_l(
                           char* const _Buffer,
                           char const* const _Format,
                           _locale_t const _Locale,
                           va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl vsprintf(
                                  char* const _Buffer,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
#pragma warning(pop)
}




__inline int __cdecl _vsprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}






    __inline int __cdecl vsprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
# 1532 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__inline int __cdecl _vsprintf_p_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsprintf_p(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}




__inline int __cdecl _vsnprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf_s(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}


extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1619 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
    __inline int __cdecl vsnprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      size_t const _MaxCount,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
# 1646 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__inline int __cdecl _vscprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



__inline int __cdecl _vscprintf(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscprintf_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vscprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}



__inline int __cdecl _vscprintf_p(
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}



__inline int __cdecl _vsnprintf_c_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
                                            va_list _ArgList
    )



{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}




__inline int __cdecl _vsnprintf_c(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sprintf_l(
                                            char* const _Buffer,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl sprintf(
                                  char* const _Buffer,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(push)
#pragma warning(disable: 4996)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl sprintf( char *_Buffer, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);





#pragma warning(pop)



__inline int __cdecl _sprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}






    __inline int __cdecl sprintf_s(
                                      char* const _Buffer,
                                      size_t const _BufferCount,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }




extern "C++" {
# 1846 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma warning(push)
# 1846 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
;
# 1846 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 1846 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); }
# 1846 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma warning(pop)
# 1846 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
; }







__inline int __cdecl _sprintf_p_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _sprintf_p(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snprintf_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
    return _Result;
}
# 1932 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__inline int __cdecl snprintf(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snprintf(
                                             char* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress: 28719)
 _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _snprintf( char *_Buffer, size_t _BufferCount, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _vsnprintf( char *_Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
# 1982 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__inline int __cdecl _snprintf_c_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_c(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_s_l(
                                            char* const _Buffer,
                                            size_t const _BufferCount,
                                            size_t const _MaxCount,
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snprintf_s(
                                  char* const _Buffer,
                                  size_t const _BufferCount,
                                  size_t const _MaxCount,
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


extern "C++" {
# 2064 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma warning(push)
# 2064 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
;
# 2064 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma warning(disable: 4793)
# 2064 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], size_t _BufferCount, char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); }
# 2064 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma warning(pop)
# 2064 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
; }
# 2073 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
__inline int __cdecl _scprintf_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p_l(
                                            char const* const _Format,
                                            _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _scprintf_p(
                                  char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}







__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                           unsigned __int64 _Options,
                                           char const* _Buffer,
                                           size_t _BufferCount,
                                           char const* _Format,
                                           _locale_t _Locale,
                                           va_list _ArgList
    );


__inline int __cdecl _vsscanf_l(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}



__inline int __cdecl vsscanf(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  va_list _ArgList
    )



{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}



__inline int __cdecl _vsscanf_s_l(
                                  char const* const _Buffer,
                                  char const* const _Format,
                                  _locale_t const _Locale,
                                  va_list _ArgList
    )



{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}




#pragma warning(push)
#pragma warning(disable: 6530)


 __inline int __cdecl vsscanf_s(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }


    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(char const (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }






#pragma warning(pop)



 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sscanf_l(
                                           char const* const _Buffer,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl sscanf(
                                 char const* const _Buffer,
                                 char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _sscanf_s_l(
                                             char const* const _Buffer,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}





    __inline int __cdecl sscanf_s(
                                       char const* const _Buffer,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf_l(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
                                           _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}




__inline int __cdecl _snscanf_s_l(
                                             char const* const _Buffer,
                                             size_t const _BufferCount,
                                             char const* const _Format,
                                             _locale_t const _Locale,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}



__inline int __cdecl _snscanf_s(
                                           char const* const _Buffer,
                                           size_t const _BufferCount,
                                           char const* const _Format,
    ...)



{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}


#pragma warning(pop)
# 2437 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
    __declspec(dllimport) char* __cdecl tempnam(
                   char const* _Directory,
                   char const* _FilePrefix
        );





                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE* __cdecl fdopen( int _FileHandle, char const* _Format);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE* _Stream);
                       __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);





}
# 2461 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\stdio.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 2 3
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdio" 3
typedef FILE FILE;


namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstring" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstring" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 1 3
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memory.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memory.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 1 3
# 11 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\errno.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\errno.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\errno.h" 3
 extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno( int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno( int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno( unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno( unsigned long * _Value);
# 129 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\errno.h" 3
}
# 129 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\errno.h" 3
#pragma pack(pop)
# 11 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 2 3




#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
 extern "C" {




__declspec(dllimport) void const* __cdecl memchr(
                                    void const* _Buf,
                                    int _Val,
                                    size_t _MaxCount
    );


int __cdecl memcmp(
                            void const* _Buf1,
                            void const* _Buf2,
                            size_t _Size
    );
# 40 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
void* __cdecl memcpy(
                                  void* _Dst,
                                  void const* _Src,
                                  size_t _Size
    );


__declspec(dllimport) void* __cdecl memmove(
                                      void* _Dst,
                                      void const* _Src,
                                      size_t _Size
    );
# 60 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
void* __cdecl memset(
                                  void* _Dst,
                                  int _Val,
                                  size_t _Size
    );


__declspec(dllimport) char const* __cdecl strchr(
           char const* _Str,
           int _Val
    );


__declspec(dllimport) char const* __cdecl strrchr(
           char const* _Str,
           int _Ch
    );


__declspec(dllimport) char const* __cdecl strstr(
           char const* _Str,
           char const* _SubStr
    );



__declspec(dllimport) wchar_t const* __cdecl wcschr(
           wchar_t const* _Str,
           wchar_t _Ch
    );


__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
           wchar_t const* _Str,
           wchar_t _Ch
    );



__declspec(dllimport) wchar_t const* __cdecl wcsstr(
           wchar_t const* _Str,
           wchar_t const* _SubStr
    );



}
# 106 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_string.h" 3
#pragma pack(pop)
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 2 3


#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 3
 extern "C" {
# 35 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 3
    static __inline errno_t __cdecl memcpy_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline errno_t __cdecl memmove_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





}
# 88 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memcpy_s.h" 3
#pragma pack(pop)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memory.h" 2 3





#pragma pack(push, 8)
# 19 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memory.h" 3
 extern "C" {




__declspec(dllimport) int __cdecl _memicmp(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size
    );


__declspec(dllimport) int __cdecl _memicmp_l(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size,
                                _locale_t _Locale
    );
# 77 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memory.h" 3
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _Size
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
                                    void const* _Buf1,
                                    void const* _Buf2,
                                    size_t _Size
        );





    extern "C++"
    inline void* __cdecl memchr(
                                 void* _Pv,
                                 int _C,
                                 size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }




}
# 110 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_memory.h" 3
#pragma pack(pop)
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 1 3
# 16 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
#pragma pack(push, 8)
# 16 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
 extern "C" {
# 28 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
    __declspec(dllimport) errno_t __cdecl wcscat_s(
                                        wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcscpy_s(
                                     wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


    __declspec(dllimport) errno_t __cdecl wcsncat_s(
                                        wchar_t* _Destination,
                                        rsize_t _SizeInWords,
                                        wchar_t const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
                                     wchar_t* _Destination,
                                     rsize_t _SizeInWords,
                                     wchar_t const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
        );
# 79 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
           wchar_t const* _String
    );







extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }







    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);
# 106 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) int __cdecl wcscmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);






__declspec(dllimport) size_t __cdecl wcscspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcslen(
           wchar_t const* _String
    );
# 143 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) size_t __cdecl wcsnlen(
                               wchar_t const* _Source,
                               size_t _MaxCount
    );
# 159 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
    static __inline size_t __cdecl wcsnlen_s(
                                   wchar_t const* _Source,
                                   size_t _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 185 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) int __cdecl wcsncmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 207 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
           wchar_t const* _String,
           wchar_t const* _Control
    );


__declspec(dllimport) size_t __cdecl wcsspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
    );
# 236 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
#pragma warning(push)
#pragma warning(disable: 4141 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
                      wchar_t* const _String,
                      wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }






        extern "C++" __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
                          wchar_t* _String,
                          wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }


#pragma warning(pop)






 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
         int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     int _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
               wchar_t const* _String
    );

                   __declspec(dllimport) errno_t __cdecl __wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }





               __declspec(dllimport) int __cdecl _wcsicmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

               __declspec(dllimport) int __cdecl _wcsicmp_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );

               __declspec(dllimport) int __cdecl _wcsnicmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

               __declspec(dllimport) int __cdecl _wcsnicmp_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

                   __declspec(dllimport) errno_t __cdecl _wcsnset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Destination)[_Size], wchar_t _Value, size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset( wchar_t *_String, wchar_t _Value, size_t _MaxCount);







__declspec(dllimport) wchar_t* __cdecl _wcsrev(
              wchar_t* _String
    );

                   __declspec(dllimport) errno_t __cdecl _wcsset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_String)[_Size], wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset( wchar_t *_String, wchar_t _Value);






                   __declspec(dllimport) errno_t __cdecl _wcslwr_s(
                                    wchar_t* _String,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
                                    wchar_t* _String,
                                    size_t _SizeInWords,
                                    _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);







__declspec(dllimport) errno_t __cdecl _wcsupr_s(
                             wchar_t* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);





__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
                             wchar_t* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
# 449 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
__declspec(dllimport) size_t __cdecl wcsxfrm(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );


__declspec(dllimport) int __cdecl wcscoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcscoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsicoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


__declspec(dllimport) int __cdecl _wcsicoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsncoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsncoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _wcsnicoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _wcsnicoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );
# 528 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
extern "C++" {



    inline wchar_t* __cdecl wcschr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }


    inline wchar_t* __cdecl wcspbrk( wchar_t* _String, wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }


    inline wchar_t* __cdecl wcsrchr( wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }



    inline wchar_t* __cdecl wcsstr( wchar_t* _String, wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
# 572 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
               wchar_t const* _String
        );
# 584 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
               wchar_t const* _String1,
               wchar_t const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
                                   wchar_t const* _String1,
                                   wchar_t const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsnset(
                                     wchar_t* _String,
                                     wchar_t _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsrev(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsset(
                  wchar_t* _String,
                  wchar_t _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcslwr(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

    __declspec(dllimport) wchar_t* __cdecl wcsupr(
                  wchar_t* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
               wchar_t const* _String1,
               wchar_t const* _String2
        );





}
# 640 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wstring.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 2 3





#pragma pack(push, 8)
# 18 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
 extern "C" {
# 27 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
    __declspec(dllimport) errno_t __cdecl strcpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strcat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source
        );


    __declspec(dllimport) errno_t __cdecl strerror_s(
                                     char* _Buffer,
                                     size_t _SizeInBytes,
                                     int _ErrorNumber);


    __declspec(dllimport) errno_t __cdecl strncat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source,
                                        rsize_t _MaxCount
        );


    __declspec(dllimport) errno_t __cdecl strncpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source,
                                     rsize_t _MaxCount
        );


    __declspec(dllimport) char* __cdecl strtok_s(
                                      char* _String,
                                      char const* _Delimiter,
                                      char** _Context
        );



__declspec(dllimport) void* __cdecl _memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }







    __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcat( char *_Destination, char const* _Source);
# 95 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
int __cdecl strcmp(
           char const* _Str1,
           char const* _Str2
    );


__declspec(dllimport) int __cdecl _strcmpi(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl strcoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _strcoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );

char* __cdecl strcpy(
                                                 char* _Dest,
                                                 char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Destination)[_Size], char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcpy( char *_Destination, char const* _Source);






__declspec(dllimport) size_t __cdecl strcspn(
           char const* _Str,
           char const* _Control
    );







__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
               char const* _Source
    );







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _strerror(
               char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }






               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
         int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }






__declspec(dllimport) int __cdecl _stricmp(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll(
           char const* _String1,
           char const* _String2
    );


__declspec(dllimport) int __cdecl _stricoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _stricmp_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


size_t __cdecl strlen(
           char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);





__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l( char *_String, _locale_t _Locale);






__declspec(dllimport) char* __cdecl strncat(
                              char* _Dest,
                              char const* _Source,
                              size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat( char *_Destination, char const* _Source, size_t _Count);
# 277 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
__declspec(dllimport) int __cdecl strncmp(
                               char const* _Str1,
                               char const* _Str2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicmp_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strnicoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strnicoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


__declspec(dllimport) int __cdecl _strncoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


__declspec(dllimport) int __cdecl _strncoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
                            char const* _String,
                            size_t _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy( char *_Destination, char const* _Source, size_t _Count);
# 357 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strnlen(
                               char const* _String,
                               size_t _MaxCount
    );
# 373 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
    static __inline size_t __cdecl strnlen_s(
                                   char const* _String,
                                   size_t _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }



__declspec(dllimport) char* __cdecl _strnset(
                              char* _Dest,
                              int _Val,
                              size_t _Count
    );


__declspec(dllimport) errno_t __cdecl _strnset_s(
                                    char* _String,
                                    size_t _SizeInBytes,
                                    int _Value,
                                    size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset( char *_Destination, int _Value, size_t _Count);
# 413 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
__declspec(dllimport) char const* __cdecl strpbrk(
           char const* _Str,
           char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
              char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
                                        char* _Destination,
                                        size_t _DestinationSize,
                                        int _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strset( char *_Destination, int _Value);





char* __cdecl _strset(
              char* _Dest,
              int _Value
    );


__declspec(dllimport) size_t __cdecl strspn(
           char const* _Str,
           char const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
                  char* _String,
                  char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
                             char* _String,
                             size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);





__declspec(dllimport) errno_t __cdecl _strupr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l( char *_String, _locale_t _Locale);
# 496 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
__declspec(dllimport) size_t __cdecl strxfrm(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount
    );



__declspec(dllimport) size_t __cdecl _strxfrm_l(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );




extern "C++"
{

    inline char* __cdecl strchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strpbrk( char* const _String, char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }


    inline char* __cdecl strrchr( char* const _String, int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }


    inline char* __cdecl strstr( char* const _String, char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
# 551 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
                   char const* _String
        );






                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
               char const* _String1,
               char const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
               char const* _String1,
               char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
                  char* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
                                   char const* _String1,
                                   char const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
                                     char* _String,
                                     int _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
                  char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
                  char* _String,
                  int _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
                  char* _String
        );





}
# 611 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\string.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstring" 2 3




namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstddef" 1 3
# 17 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstddef" 3
namespace std {
using :: ptrdiff_t; using :: size_t;
}



namespace std {
typedef double max_align_t;
}
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 2 3



# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\initializer_list" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 constexpr initializer_list() noexcept
  : _First(0), _Last(0)
  {
  }

 constexpr initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) noexcept
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 constexpr const _Elem *begin() const noexcept
  {
  return (_First);
  }

 constexpr const _Elem *end() const noexcept
  {
  return (_Last);
  }

 constexpr size_t size() const noexcept
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem> inline
 constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.end());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 9 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 24 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
namespace std {
# 129 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
template<bool,
 class _Ty1,
 class _Ty2>
 struct _If
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct _If<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

template<class _Ty>
 struct _Always_false
 {
 static const bool value = false;
 };





template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };



template<class _Ty = void>
 struct plus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


typedef int _Is_trans;


template<>
 struct plus<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


}



namespace std {

inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
 {






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
 const size_t _FNV_offset_basis = 2166136261U;
 const size_t _FNV_prime = 16777619U;


 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }
 return (_Val);
 }


template<class _Kty>
 struct _Bitwise_hash
 {
 typedef _Kty argument_type;
 typedef size_t result_type;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
  }
 };


template<class _Kty>
 struct hash
  : public _Bitwise_hash<_Kty>
 {
 static const bool _Value = __is_enum(_Kty);
 static_assert(_Value,
  "The C++ Standard doesn't provide a hash for this type.");
 };
template<>
 struct hash<bool>
  : public _Bitwise_hash<bool>
 {
 };

template<>
 struct hash<char>
  : public _Bitwise_hash<char>
 {
 };

template<>
 struct hash<signed char>
  : public _Bitwise_hash<signed char>
 {
 };

template<>
 struct hash<unsigned char>
  : public _Bitwise_hash<unsigned char>
 {
 };

template<>
 struct hash<char16_t>
  : public _Bitwise_hash<char16_t>
 {
 };

template<>
 struct hash<char32_t>
  : public _Bitwise_hash<char32_t>
 {
 };


template<>
 struct hash<wchar_t>
  : public _Bitwise_hash<wchar_t>
 {
 };


template<>
 struct hash<short>
  : public _Bitwise_hash<short>
 {
 };

template<>
 struct hash<unsigned short>
  : public _Bitwise_hash<unsigned short>
 {
 };

template<>
 struct hash<int>
  : public _Bitwise_hash<int>
 {
 };

template<>
 struct hash<unsigned int>
  : public _Bitwise_hash<unsigned int>
 {
 };

template<>
 struct hash<long>
  : public _Bitwise_hash<long>
 {
 };

template<>
 struct hash<unsigned long>
  : public _Bitwise_hash<unsigned long>
 {
 };

template<>
 struct hash<long long>
  : public _Bitwise_hash<long long>
 {
 };

template<>
 struct hash<unsigned long long>
  : public _Bitwise_hash<unsigned long long>
 {
 };

template<>
 struct hash<float>
  : public _Bitwise_hash<float>
 {
 typedef float _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<double>
  : public _Bitwise_hash<double>
 {
 typedef double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
  : public _Bitwise_hash<long double>
 {
 typedef long double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<class _Ty>
 struct hash<_Ty *>
  : public _Bitwise_hash<_Ty *>
 {
 };
}


namespace std {
namespace tr1 {
using ::std:: hash;
}
}
# 627 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
namespace std {

template<class... _Types>
 struct _Arg_types
 {
 };

template<class _Ty1>
 struct _Arg_types<_Ty1>
 {
 typedef _Ty1 argument_type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Arg_types<_Ty1, _Ty2>
 {
 typedef _Ty1 first_argument_type;
 typedef _Ty2 second_argument_type;
 };


template<class _Ty>
 struct _Is_function
 {
 typedef false_type _Bool_type;
 };
# 665 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstddef" 3
template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...)> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...)> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; };


template<class _Ret,
 class... _Types>
 struct _Is_function<_Ret (_Types..., ...)>
 {
 typedef true_type _Bool_type;
 typedef _Ret result_type;
 };

template<class _Ty>
 struct is_function
  : _Is_function<_Ty>::_Bool_type
 {
 };


template<class _Ty> inline
 _Ty *_Addressof(_Ty& _Val, true_type) noexcept
 {
 return (_Val);
 }

template<class _Ty> inline
 _Ty *_Addressof(_Ty& _Val, false_type) noexcept
 {
 return (reinterpret_cast<_Ty *>(
  &const_cast<char&>(
  reinterpret_cast<const volatile char&>(_Val))));
 }

template<class _Ty> inline
 _Ty *addressof(_Ty& _Val) noexcept
 {
 return (_Addressof(_Val, is_function<_Ty>()));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4180 4296)
# 66 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
namespace std {

template<class _Ty>
 struct _Ptr_traits
 {
 };

template<class _Ty>
 struct _Ptr_traits<_Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<const _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<volatile _Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Ptr_traits<const volatile _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Is_memfunptr
 {
 typedef false_type _Bool_type;
 };
# 119 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };
# 133 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };




template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef const volatile _Ty type;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 typedef _Ty& type;
 };
# 172 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<> struct add_lvalue_reference< void> { typedef void type; }; template<> struct add_lvalue_reference<const void> { typedef const void type; }; template<> struct add_lvalue_reference<volatile void> { typedef volatile void type; }; template<> struct add_lvalue_reference<const volatile void> { typedef const volatile void type; };



template<class _Ty>
 struct add_rvalue_reference
 {
 typedef _Ty&& type;
 };
# 189 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<> struct add_rvalue_reference< void> { typedef void type; }; template<> struct add_rvalue_reference<const void> { typedef const void type; }; template<> struct add_rvalue_reference<volatile void> { typedef volatile void type; }; template<> struct add_rvalue_reference<const volatile void> { typedef const volatile void type; };



template<class _Ty>
 typename add_rvalue_reference<_Ty>::type
  declval() noexcept;


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, size_t _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };
# 249 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };



template<class _Ty>
 struct add_pointer
 {
 typedef typename remove_reference<_Ty>::type *type;
 };



template<class _Ty>
 struct _Is_void
  : false_type
 {
 };

template<>
 struct _Is_void<void>
  : true_type
 {
 };

template<class _Ty>
 struct is_void
  : _Is_void<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };


template<class _Ty>
 struct is_reference
  : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };



template<class _Ty,
 bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1,
 class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
  : true_type
 {
 typedef _Ty2 _Class_type;
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
 {
 };


template<class _Ty>
 struct is_member_function_pointer
  : _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
 {
 };


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };



template<class _Ty>
 struct is_null_pointer
  : _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
 {
 };


template<class _Ty>
 struct is_union : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_fundamental
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
  : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From,
 class _To>
 struct is_convertible
  : _Cat_base<__is_convertible_to(_From, _To)>
 {
 };


template<class _Ty>
 struct is_enum
  : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
  : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
  : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value
  || is_null_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_const
  : _Cat_base<_Ptr_traits<_Ty *>::_Is_const
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty, size_t _Nx>
 struct is_const<_Ty[_Nx]>
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_const<const _Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_volatile
  : _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_pod : _Cat_base<__is_pod(_Ty)>
 {
 };


template<class _Ty>
 struct is_empty : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract : _Cat_base<__is_abstract(_Ty)>
 {
 };


template<class _Ty>
 struct is_final : _Cat_base<__is_final(_Ty)>
 {
 };


template<class _Ty>
 struct is_standard_layout : _Cat_base<__is_standard_layout(_Ty)>
 {
 };


template<class _Ty>
 struct is_literal_type : _Cat_base<__is_literal_type(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivial : _Cat_base<__is_trivial(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivially_copyable : _Cat_base<__is_trivially_copyable(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor
  : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_constructible
  : _Cat_base<__is_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_move_constructible

  : is_constructible<
   _Ty,

   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct _Is_assignable
 {
 template<class _Dest,
  class _Src>
  static auto _Fn(int)
   -> decltype((void)(::std:: declval<_Dest>() = ::std:: declval<_Src>()),
    true_type());

 template<class _Dest,
  class _Src>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_To, _From>(0)) type;
 };

template<class _To,
 class _From>
 struct is_assignable
  : _Is_assignable<_To, _From>::type
 {
 };


template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct is_destructible
  : _Cat_base<__is_destructible(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_trivially_copy_constructible
  : is_trivially_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_constructible

  : is_trivially_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _To,
 class _From>
 struct is_trivially_assignable

  : _Cat_base<__is_trivially_assignable(_To, _From)>

 {
 };


template<class _Ty>
 struct is_trivially_copy_assignable

  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct is_trivially_move_assignable

  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct is_trivially_destructible
  : _Cat_base<__has_trivial_destructor(_Ty)>
 {
 };




template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };


template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _To,
 class _From>
 struct is_nothrow_assignable

  : _Cat_base<__is_nothrow_assignable(_To, _From)>

 {
 };


template<class _Ty>
 struct is_nothrow_copy_assignable

  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct is_nothrow_move_assignable

  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct is_nothrow_destructible
  : _Cat_base<__is_nothrow_destructible(_Ty)>
 {
 };


template<class _Ty,
 bool = is_integral<_Ty>::value>
 struct _Sign_base
 {
 typedef typename remove_cv<_Ty>::type _Uty;
 typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
 typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
 };

template<class _Ty>
 struct _Sign_base<_Ty, false>
 {

 typedef is_floating_point<_Ty> _Signed;
 typedef false_type _Unsigned;
 };

template<class _Ty>
 struct is_signed
  : _Sign_base<_Ty>::_Signed
 {
 };


template<class _Ty>
 struct is_unsigned
  : _Sign_base<_Ty>::_Unsigned
 {
 };


template<class _Ty>
 struct _Change_sign
 {
 static_assert(
  ((is_integral<_Ty>::value || is_enum<_Ty>::value)
   && !is_same<_Ty, bool>::value),
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 typedef
  typename _If<is_same<_Ty, signed char>::value
   || is_same<_Ty, unsigned char >::value, signed char,
  typename _If<is_same<_Ty, short >::value
   || is_same<_Ty, unsigned short >::value, short,
  typename _If<is_same<_Ty, int >::value
   || is_same<_Ty, unsigned int >::value, int,
  typename _If<is_same<_Ty, long >::value
   || is_same<_Ty, unsigned long >::value, long,
  typename _If<is_same<_Ty, long long >::value
   || is_same<_Ty, unsigned long long>::value, long long,
  typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
  typename _If<sizeof (_Ty) == sizeof (short ), short,
  typename _If<sizeof (_Ty) == sizeof (int ), int,
  typename _If<sizeof (_Ty) == sizeof (long ), long,
   long long
  >::type>::type>::type>::type>::type>::type>::type>::type>::type
   _Signed;

 typedef
  typename _If<is_same<_Signed, signed char>::value, unsigned char,
  typename _If<is_same<_Signed, short >::value, unsigned short,
  typename _If<is_same<_Signed, int >::value, unsigned int,
  typename _If<is_same<_Signed, long >::value, unsigned long,
   unsigned long long
  >::type>::type>::type>::type
   _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 typedef const typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 typedef typename _Change_sign<_Ty>::_Signed type;
 };


template<class _Ty>
 struct make_unsigned
 {
 typedef typename _Change_sign<_Ty>::_Unsigned type;
 };



template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, alignof(_Ty)>
 {
 };






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 typedef _Align_type<max_align_t, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
 };

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
 };





template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
 {
 static const size_t value = 0;
 };

template<size_t _Val>
 struct _Maximum<_Val>
 {
 static const size_t value = _Val;
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static const size_t _Max_len = _Maximum<
  _Len, sizeof(_Types)...>::value;
 static const size_t alignment_value = _Maximum<
  alignment_of<_Types>::value...>::value;
 typedef typename aligned_storage<_Max_len, alignment_value>::type type;
 };


template<class _Ty>
 struct underlying_type
 {
 typedef __underlying_type(_Ty) type;
 };


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, size_t _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, size_t _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };


template<class _Base,
 class _Der>
 struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };


template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::type>::type type;
 };

namespace tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
 }


template<class... _Ty>
 struct common_type;

template<class _Ty>
 struct common_type<_Ty>
 {
 typedef typename decay<_Ty>::type type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type<_Ty0, _Ty1>
 {
 typedef typename decay<
  decltype(_Always_false<_Ty0>::value
   ? ::std:: declval<_Ty0>()
   : ::std:: declval<_Ty1>())
 >::type type;
 };

template<class _Ty0,
 class _Ty1,
 class... _Ty>
 struct common_type<_Ty0, _Ty1, _Ty...>
 {
 typedef typename common_type<
  typename common_type<_Ty0, _Ty1>::type, _Ty...
 >::type type;
 };


template<class _Ty,
 _Ty... _Vals>
 struct integer_sequence
 {
 static_assert(is_integral<_Ty>::value,
  "integer_sequence<T, I...> requires T to be an integral type.");

 typedef integer_sequence<_Ty, _Vals...> type;
 typedef _Ty value_type;

 static constexpr size_t size() noexcept
  {
  return (sizeof...(_Vals));
  }
 };


template<bool _Negative,
 bool _Zero,
 class _Int_con,
 class _Int_seq>
 struct _Make_seq
 {
 static_assert(!_Negative,
  "make_integer_sequence<T, N> requires N to be non-negative.");
 };

template<class _Ty,
 _Ty... _Vals>
 struct _Make_seq<false, true,
  integral_constant<_Ty, 0>,
  integer_sequence<_Ty, _Vals...> >
  : integer_sequence<_Ty, _Vals...>
 {
 };

template<class _Ty,
 _Ty _Ix,
 _Ty... _Vals>
 struct _Make_seq<false, false,
  integral_constant<_Ty, _Ix>,
  integer_sequence<_Ty, _Vals...> >
  : _Make_seq<false, _Ix == 1,
   integral_constant<_Ty, _Ix - 1>,
   integer_sequence<_Ty, _Ix - 1, _Vals...> >
 {
 };

template<class _Ty,
 _Ty _Size>
 using make_integer_sequence = typename _Make_seq<_Size < 0, _Size == 0,
  integral_constant<_Ty, _Size>, integer_sequence<_Ty> >::type;

template<size_t... _Vals>
 using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
 using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
 using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };


template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type& _Arg) noexcept
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty> inline
 constexpr _Ty&& forward(
  typename remove_reference<_Ty>::type&& _Arg) noexcept
 {
 static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename remove_reference<_Ty>::type&&
  move(_Ty&& _Arg) noexcept
 {
 return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename remove_reference<_Ty>::type&&
  _Move(_Ty&& _Arg) noexcept
 {
 return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
 }


template<class _Ty> inline
 constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
  && is_copy_constructible<_Ty>::value,
   const _Ty&, _Ty&&>::type
 move_if_noexcept(_Ty& _Arg) noexcept
 {
 return (::std:: move(_Arg));
 }


template<class _Ty> inline
 typename decay<_Ty>::type _Decay_copy(_Ty&& _Arg)
 {
 return (::std:: forward<_Ty>(_Arg));
 }


template<class...>
 struct _Param_tester
 {
 typedef void type;
 };


template<class... _Types>
 using void_t = typename _Param_tester<_Types...>::type;


struct _Invoker_pmf_object
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmf_pointer
 {
 template<class _Decayed,
  class _Ty1,
  class... _Types2>
  static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
  -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...))
  {
  return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
   ::std:: forward<_Types2>(_Args2)...));
  }
 };

struct _Invoker_pmd_object
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
  {
  return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
  }
 };

struct _Invoker_pmd_pointer
 {
 template<class _Decayed,
  class _Ty1>
  static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
  -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
  {
  return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
  }
 };

struct _Invoker_functor
 {
 template<class _Callable,
  class... _Types>
  static auto _Call(_Callable&& _Obj, _Types&&... _Args)
  -> decltype(::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: forward<_Callable>(_Obj)(
   ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Callable,
 class _Ty1,
 class _Decayed = typename decay<_Callable>::type,
 bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
 bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
 struct _Invoker1;

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
  : _If<is_base_of<
   typename _Is_memfunptr<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmf_object,
  _Invoker_pmf_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
  : _If<is_base_of<
   typename _Is_member_object_pointer<_Decayed>::_Class_type,
   typename decay<_Ty1>::type>::value,
  _Invoker_pmd_object,
  _Invoker_pmd_pointer>::type
 {
 };

template<class _Callable,
 class _Ty1,
 class _Decayed>
 struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class... _Types>
 struct _Invoker;

template<class _Callable>
 struct _Invoker<_Callable>
  : _Invoker_functor
 {
 };

template<class _Callable,
 class _Ty1,
 class... _Types2>
 struct _Invoker<_Callable, _Ty1, _Types2...>
  : _Invoker1<_Callable, _Ty1>
 {
 };

template<class _Callable,
 class... _Types> inline
 auto invoke(_Callable&& _Obj, _Types&&... _Args)
 -> decltype(_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
 {
 return (_Invoker<_Callable, _Types...>::_Call(
  ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
 }

template<class _Rx,
 bool = is_void<_Rx>::value>
 struct _Forced
 {
 };

struct _Unforced
 {
 };

template<class _Cv_void,
 class... _Valtys> inline
 void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
 {
 ::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
 }

template<class _Rx,
 class... _Valtys> inline
 _Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }

template<class... _Valtys> inline
 auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
 -> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
 {
 return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
 }


template<class _Fty>
 struct result_of
 {
 static_assert(_Always_false<_Fty>::value,
  "result_of<CallableType> is invalid; use "
  "result_of<CallableType(zero or more argument types)> instead.");
 };
# 1529 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\type_traits" 3
template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> { typedef decltype(::std:: invoke(::std:: declval<_Fty>(), ::std:: declval<_Args>()...)) type; }; template<class _Fty, class... _Args> struct result_of<_Fty __fastcall (_Args...)> { typedef decltype(::std:: invoke(::std:: declval<_Fty>(), ::std:: declval<_Args>()...)) type; }; template<class _Fty, class... _Args> struct result_of<_Fty __stdcall (_Args...)> { typedef decltype(::std:: invoke(::std:: declval<_Fty>(), ::std:: declval<_Args>()...)) type; }; template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> { typedef decltype(::std:: invoke(::std:: declval<_Fty>(), ::std:: declval<_Args>()...)) type; };



template<class _Ty,
 class = void>
 struct _Weak_result_type
 {
 };

template<class _Ty>
 struct _Weak_result_type<_Ty, typename _Param_tester<
  typename _Ty::result_type>::type>
 {
 typedef typename _Ty::result_type result_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_argument_type
  : _Weak_result_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_argument_type<_Ty, typename _Param_tester<
  typename _Ty::argument_type>::type>
  : _Weak_result_type<_Ty>
 {
 typedef typename _Ty::argument_type argument_type;
 };

template<class _Ty,
 class = void>
 struct _Weak_binary_args
  : _Weak_argument_type<_Ty>
 {
 };

template<class _Ty>
 struct _Weak_binary_args<_Ty, typename _Param_tester<
  typename _Ty::first_argument_type,
  typename _Ty::second_argument_type>::type>
  : _Weak_argument_type<_Ty>
 {
 typedef typename _Ty::first_argument_type first_argument_type;
 typedef typename _Ty::second_argument_type second_argument_type;
 };

template<class _Ty>
 struct _Weak_types
 {
 typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
 typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
 typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
  typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
  _Weak_binary_args<_Ty> >::type>::type type;
 };


template<class _Ty>
 class reference_wrapper
  : public _Weak_types<_Ty>::type
 {
public:
 static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
  "reference_wrapper<T> requires T to be an object type "
  "or a function type.");

 typedef _Ty type;

 reference_wrapper(_Ty& _Val) noexcept
  : _Ptr(::std:: addressof(_Val))
  {
  }

 operator _Ty&() const noexcept
  {
  return (*_Ptr);
  }

 _Ty& get() const noexcept
  {
  return (*_Ptr);
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
  }

 reference_wrapper(_Ty&&) = delete;

private:
 _Ty *_Ptr;
 };


template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(_Ty& _Val) noexcept
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: ref(_Val.get()));
 }

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) noexcept
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty> inline
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) noexcept
 {
 return (::std:: cref(_Val.get()));
 }


template<class _Ty>
 struct _Unrefwrap_helper
 {
 typedef _Ty type;
 static const bool _Is_refwrap = false;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty> >
 {
 typedef _Ty& type;
 static const bool _Is_refwrap = true;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 typedef typename decay<_Ty>::type _Ty1;
 typedef typename _Unrefwrap_helper<_Ty1>::type type;
 static const bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
 };

namespace tr1 {
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
 }


template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 3
}




# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
 extern "C" {
# 39 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;
# 54 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
void* __cdecl _alloca( size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);


    __declspec(dllimport) int __cdecl _heapmin(void);


        __declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO* _EntryInfo);



                       __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
# 84 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
    typedef char __static_assert_t[(sizeof(unsigned int) <= 8) != 0];


#pragma warning(push)
#pragma warning(disable: 6540)

 __inline void* _MarkAllocaS( void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 8;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 8;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

#pragma warning(pop)
# 144 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
#pragma warning(push)
#pragma warning(disable: 6014)
 __inline void __cdecl _freea( void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 8;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }






        }
    }
#pragma warning(pop)
# 177 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
}
# 177 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\malloc.h" 3
#pragma pack(pop)
# 36 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 1 3
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_terminate.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_terminate.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_terminate.h" 3
 extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();
# 28 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_terminate.h" 3
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();



        __declspec(dllimport) terminate_handler __cdecl set_terminate(
                     terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();





}
# 43 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_terminate.h" 3
#pragma pack(pop)
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 2 3




#pragma pack(push, 8)
# 15 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 3
 extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);



        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
                     unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
                     _se_translator_function _NewSETranslator
            );



    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
             type_info const& _Type,
             _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int __cdecl __uncaught_exceptions();



}
# 61 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\eh.h" 3
#pragma pack(pop)
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 2 3






#pragma pack(push, 8)


#pragma pack(push, 8)
# 19 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 3
 extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
          __std_exception_data const* _From,
          __std_exception_data* _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
            __std_exception_data* _Data
    );

}
# 36 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_exception.h" 3
#pragma pack(pop)



namespace std {

class exception
{
public:

    exception()
        : _Data()
    {
    }

    explicit exception(char const* const _Message)
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int)
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other)
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other)
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

}


#pragma pack(pop)
# 37 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 2 3


namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;


inline terminate_handler __cdecl get_terminate()
 {
 return (_get_terminate());
 }

inline unexpected_handler __cdecl get_unexpected()
 {
 return (_get_unexpected());
 }


}
# 241 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\exception" 3
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap( void*, void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException( void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr() throw ()
  {
  __ExceptionPtrCreate(this);
  }

 exception_ptr(nullptr_t) throw ()
  {
  __ExceptionPtrCreate(this);
  }

 ~exception_ptr() throw ()
  {
  __ExceptionPtrDestroy(this);
  }

 exception_ptr(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }

 exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }

 exception_ptr& operator=(nullptr_t) throw ()
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 typedef exception_ptr _Myt;

 explicit operator bool() const throw ()
  {
  return __ExceptionPtrToBool(this);
  }

 void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception() throw ()
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }

 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }

private:
 void* _Data1;
 void* _Data2;
 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception() noexcept
 {
 return exception_ptr::_Current_exception();
 }

inline void rethrow_exception( exception_ptr _Ptr)
 {
 _Ptr._RethrowException();
 }

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except)
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }


class nested_exception
 {
public:
 nested_exception() noexcept
  : _Exc(::std:: current_exception())
  {
  }

 nested_exception(const nested_exception&) noexcept = default;
 nested_exception& operator=(const nested_exception&) noexcept = default;
 virtual ~nested_exception() noexcept = default;

 __declspec(noreturn) void rethrow_nested() const
  {
  if (_Exc)
   ::std:: rethrow_exception(_Exc);
  else
   ::std:: terminate();
  }

 ::std:: exception_ptr nested_ptr() const noexcept
  {
  return (_Exc);
  }

private:
 ::std:: exception_ptr _Exc;
 };


template<class _Ty,
 class _Uty>
 struct _With_nested
  : _Uty, nested_exception
 {
 explicit _With_nested(_Ty&& _Arg)
  : _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
  {
  }
 };

template<class _Ty> inline
 __declspec(noreturn) void _Throw_with_nested(_Ty&& _Arg, true_type)
 {
 typedef typename remove_reference<_Ty>::type _Uty;
 typedef _With_nested<_Ty, _Uty> _Glued;

 throw _Glued(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty> inline
 __declspec(noreturn) void _Throw_with_nested(_Ty&& _Arg, false_type)
 {
 typedef typename decay<_Ty>::type _Decayed;

 throw _Decayed(::std:: forward<_Ty>(_Arg));
 }

template<class _Ty> inline
 __declspec(noreturn) void throw_with_nested(_Ty&& _Arg)
 {
 typedef typename remove_reference<_Ty>::type _Uty;

 integral_constant<bool,
  is_class<_Uty>::value
  && !is_base_of<nested_exception, _Uty>::value
  && !is_final<_Uty>::value> _Tag;

 _Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
 }


template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
 {
 const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

 if (_Nested)
  _Nested->rethrow_nested();
 }

template<class _Ty> inline
 void _Rethrow_if_nested(const _Ty *, false_type)
 {
 }

template<class _Ty> inline
 void rethrow_if_nested(const _Ty& _Arg)
 {
 integral_constant<bool,
  is_polymorphic<_Ty>::value
  && (!is_base_of<nested_exception, _Ty>::value
   || is_convertible<_Ty *, nested_exception *>::value)> _Tag;

 _Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdint" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdint" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdint.h" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdint.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdint.h" 2 3




typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cstdint" 2 3




namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;

 namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
 }
}
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ymath.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 33 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ymath.h" 3
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cfloat" 1 3






# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
 extern "C" {
# 226 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
         unsigned int _NewValue,
         unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
              unsigned int* _CurrentState,
              unsigned int _NewValue,
              unsigned int _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);




    __declspec(dllimport) void __cdecl _statusfp2(
                  unsigned int* _X86Status,
                  unsigned int* _SSE2Status
        );







__declspec(dllimport) unsigned int __cdecl _control87(
         unsigned int _NewValue,
         unsigned int _Mask
    );



    __declspec(dllimport) int __cdecl __control87_2(
                  unsigned int _NewValue,
                  unsigned int _Mask,
                  unsigned int* _X86ControlWord,
                  unsigned int* _Sse2ControlWord
        );




__declspec(dllimport) int* __cdecl __fpecode(void);




__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);
# 307 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);
# 334 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
    __declspec(dllimport) void __cdecl fpreset(void);
# 401 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
}
# 401 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\float.h" 3
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cfloat" 2 3
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 2 3



# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cwchar" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cwchar" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 1 3
# 15 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 3
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
                                                  wchar_t* _Buffer,
                                                  size_t _BufferCount,
                                                  size_t* _SizeRead
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }







    __declspec(dllimport) int __cdecl _cputws(
               wchar_t const* _Buffer
        );

                       __declspec(dllimport) wint_t __cdecl _getwch (void);
                       __declspec(dllimport) wint_t __cdecl _getwche (void);
                       __declspec(dllimport) wint_t __cdecl _putwch ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch( wint_t _Character);

                       __declspec(dllimport) wint_t __cdecl _getwch_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
                       __declspec(dllimport) wint_t __cdecl _putwch_nolock ( wchar_t _Character);
                       __declspec(dllimport) wint_t __cdecl _ungetwch_nolock( wint_t _Character);
# 62 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vcwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_s(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwprintf_p(
                                      const wchar_t* const _Format,
                                      va_list _ArgList
        )



    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }



    __inline int __cdecl _cwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_s(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
# 279 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 3
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)
 }



    __inline int __cdecl _vcwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vcwscanf_s(
                                               wchar_t const* const _Format,
                                               va_list _ArgList
        )



    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)

 ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



    __inline int __cdecl _cwscanf_s(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }






}
# 431 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wconio.h" 3
#pragma pack(pop)
# 15 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 3
 extern "C" {
# 31 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 3
    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t* __cdecl __pwctype_func(void);
# 63 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 3
               __declspec(dllimport) int __cdecl iswalnum ( wint_t _C);
               __declspec(dllimport) int __cdecl iswalpha ( wint_t _C);
               __declspec(dllimport) int __cdecl iswascii ( wint_t _C);
               __declspec(dllimport) int __cdecl iswblank ( wint_t _C);
               __declspec(dllimport) int __cdecl iswcntrl ( wint_t _C);


               __declspec(dllimport) int __cdecl iswdigit ( wint_t _C);

               __declspec(dllimport) int __cdecl iswgraph ( wint_t _C);
               __declspec(dllimport) int __cdecl iswlower ( wint_t _C);
               __declspec(dllimport) int __cdecl iswprint ( wint_t _C);
               __declspec(dllimport) int __cdecl iswpunct ( wint_t _C);
               __declspec(dllimport) int __cdecl iswspace ( wint_t _C);
               __declspec(dllimport) int __cdecl iswupper ( wint_t _C);
               __declspec(dllimport) int __cdecl iswxdigit ( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl __iswcsym ( wint_t _C);

               __declspec(dllimport) int __cdecl _iswalnum_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswalpha_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswblank_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcntrl_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswdigit_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswgraph_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswlower_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswprint_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswpunct_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswspace_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswupper_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsymf_l ( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswcsym_l ( wint_t _C, _locale_t _Locale);


               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);

               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);



                   __declspec(dllimport) int __cdecl isleadbyte( int _C);
                   __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
# 199 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 3
}
# 199 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wctype.h" 3
#pragma pack(pop)
# 16 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wdirect.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wdirect.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wdirect.h" 3
 extern "C" {
# 22 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wdirect.h" 3
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );



__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                     int _Drive,
                                     wchar_t* _DstBuf,
                                     int _SizeInWords
    );







__declspec(dllimport) int __cdecl _wchdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wmkdir(
           wchar_t const* _Path
    );


__declspec(dllimport) int __cdecl _wrmdir(
           wchar_t const* _Path
    );



}
# 57 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wdirect.h" 3
#pragma pack(pop)
# 17 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 1 3
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_share.h" 1 3
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 2 3


#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 3
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)
# 36 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 3
typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata32i64_t
{
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    wchar_t name[260];
};

struct _wfinddata64i32_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
};

struct _wfinddata64_t
{
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    wchar_t name[260];
};
# 98 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 3
__declspec(dllimport) int __cdecl _waccess(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
           wchar_t const* _FileName,
           int _AccessMode
    );


__declspec(dllimport) int __cdecl _wchmod(
           wchar_t const* _FileName,
           int _Mode
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
           wchar_t const* _FileName,
           int _PermissionMode
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
           wchar_t const* _FileName,
           struct _wfinddata32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32(
          intptr_t _FindHandle,
          struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
           wchar_t const* _FileName
    );


__declspec(dllimport) int __cdecl _wrename(
           wchar_t const* _OldFileName,
           wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
                                    wchar_t* _TemplateName,
                                    size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);






__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
           wchar_t const* _FileName,
           struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
           wchar_t const* _FileName,
           struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
           wchar_t const* _FileName,
           struct _wfinddata64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext32i64(
          intptr_t _FindHandle,
          struct _wfinddata32i64_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64i32(
          intptr_t _FindHandle,
          struct _wfinddata64i32_t* _FindData
    );



__declspec(dllimport) int __cdecl _wfindnext64(
          intptr_t _FindHandle,
          struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
           int* _FileHandle,
           wchar_t const* _FileName,
           int _OpenFlag,
           int _ShareFlag,
           int _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
           wchar_t const* _FileName,
           int _OFlag,
           int _ShFlag,
           int _PMode,
           int* _PFileHandle,
           int _BSecure
    );






    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
               wchar_t const* _FileName,
               int _OFlag,
               int _ShFlag,
               int _PMode = 0
        )
    {
        int _FileHandle;

        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }
# 273 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 3
#pragma warning(pop)



}
# 277 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wio.h" 3
#pragma pack(pop)
# 18 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wprocess.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wprocess.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wprocess.h" 3
 extern "C" {





    __declspec(dllimport) intptr_t __cdecl _wexecl(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecle(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclp(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclpe(
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecv(
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecve(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvp(
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnl(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnle(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlp(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnv(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnve(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvp(
               int _Mode,
               wchar_t const* _FileName,
               wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList,
                   wchar_t const* const* _Env
        );

    __declspec(dllimport) int __cdecl _wsystem(
                   wchar_t const* _Command
        );





}
# 119 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wprocess.h" 3
#pragma pack(pop)
# 19 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3




# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
 extern "C" {
# 22 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))


__declspec(dllimport) wchar_t* __cdecl _wasctime(
         struct tm const* _Tm
    );



__declspec(dllimport) errno_t __cdecl _wasctime_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
# 65 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
__declspec(dllimport) size_t __cdecl wcsftime(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _wcsftime_l(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) errno_t __cdecl _wstrdate_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);





__declspec(dllimport) errno_t __cdecl _wstrtime_s(
                                                         wchar_t* _Buffer,
                                                         size_t _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
# 160 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
#pragma warning(push)
#pragma warning(disable: 4996)
# 185 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
 static __inline wchar_t * __cdecl _wctime(
                 time_t const* const _Time)
        {
            return _wctime64(_Time);
        }


        static __inline errno_t __cdecl _wctime_s(
                                                                wchar_t* const _Buffer,
                                                                size_t const _SizeInWords,
                                                                time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }



#pragma warning(pop)




}
# 208 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\corecrt_wtime.h" 3
#pragma pack(pop)
# 23 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 1 3
# 11 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/types.h" 1 3
# 15 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/types.h" 3
    typedef unsigned short _ino_t;


        typedef _ino_t ino_t;
# 27 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/types.h" 3
    typedef unsigned int _dev_t;


        typedef _dev_t dev_t;
# 39 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/types.h" 3
    typedef long _off_t;


        typedef _off_t off_t;
# 11 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 2 3


#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 3
 extern "C" {



#pragma warning(push)
#pragma warning(disable: 4820)








struct _stat32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat32i64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
};

struct _stat64i32
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};

struct _stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};




    struct stat
    {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
    };
# 157 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 3
__declspec(dllimport) int __cdecl _fstat32(
          int _FileHandle,
          struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
          int _FileHandle,
          struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
          int _FileHandle,
          struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
          int _FileHandle,
          struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
           char const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
           char const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
           char const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
           char const* _FileName,
           struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
           wchar_t const* _FileName,
           struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
           wchar_t const* _FileName,
           struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
           wchar_t const* _FileName,
           struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
           wchar_t const* _FileName,
           struct _stat64* _Stat
    );
# 236 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 3
        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }






#pragma warning(pop)



}
# 256 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\sys/stat.h" 3
#pragma pack(pop)
# 24 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 2 3




#pragma pack(push, 8)
# 28 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
 extern "C" {
# 37 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
typedef wchar_t _Wint_t;




__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
               int _Category,
               wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
           int _Category,
           wchar_t const* _Locale
    );



__declspec(dllimport) wint_t __cdecl btowc(
         int _Ch
    );

__declspec(dllimport) size_t __cdecl mbrlen(
                                                   char const* _Ch,
                                                   size_t _SizeInBytes,
                                                   mbstate_t* _State
    );

__declspec(dllimport) size_t __cdecl mbrtowc(
                                                   wchar_t* _DstCh,
                                                   char const* _SrcCh,
                                                   size_t _SizeInBytes,
                                                   mbstate_t* _State
    );


__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                      size_t* _Retval,
                                      wchar_t* _Dst,
                                      size_t _Size,
                                      char const** _PSrc,
                                      size_t _N,
                                      mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t* _Retval, wchar_t (&_Dest)[_Size], char const** _PSource, size_t _Count, mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
# 92 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, char const** _PSrc, size_t _Count, mbstate_t* _State);
# 101 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
__declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                     size_t* _Retval,
                                     char* _Dst,
                                     size_t _SizeInBytes,
                                     wchar_t _Ch,
                                     mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
# 118 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t* _State);







__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                      size_t* _Retval,
                                                      char* _Dst,
                                                      size_t _SizeInBytes,
                                                      wchar_t const** _Src,
                                                      size_t _Size,
                                                      mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t* _Retval, char (&_Dest)[_Size], wchar_t const** _PSrc, size_t _Count, mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
# 145 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, wchar_t const** _PSource, size_t _Count, mbstate_t* _State);







__declspec(dllimport) int __cdecl wctob(
         wint_t _WCh
    );
# 164 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
        errno_t __cdecl wmemcpy_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );


        errno_t __cdecl wmemmove_s(
                                         wchar_t* _S1,
                                         rsize_t _N1,
                                         wchar_t const* _S2,
                                         rsize_t _N
            );



    __inline int __cdecl fwide(
                 FILE* _F,
                 int _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
                 mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
                       wchar_t const* _S,
                       wchar_t _C,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
                       wchar_t const* _S1,
                       wchar_t const* _S2,
                       size_t _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }



    __inline
    wchar_t* __cdecl wmemcpy(
                             wchar_t* _S1,
                             wchar_t const* _S2,
                             size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4995 4996 6386)
 return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

    __inline
    wchar_t* __cdecl wmemmove(
                                 wchar_t* _S1,
                                 wchar_t const* _S2,
                                 size_t _N
        )
    {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }



    __inline wchar_t* __cdecl wmemset(
                             wchar_t* _S,
                             wchar_t _C,
                             size_t _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }



        extern "C++" inline wchar_t* __cdecl wmemchr(
                           wchar_t* _S,
                           wchar_t _C,
                           size_t _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }







}
# 285 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\wchar.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cwchar" 2 3



typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4756)

namespace std {
# 56 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 3
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static constexpr bool has_denorm_loss = (bool)(false);
 static constexpr bool has_infinity = (bool)(false);
 static constexpr bool has_quiet_NaN = (bool)(false);
 static constexpr bool has_signaling_NaN = (bool)(false);
 static constexpr bool is_bounded = (bool)(false);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(false);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr bool is_specialized = (bool)(false);
 static constexpr bool tinyness_before = (bool)(false);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
 static constexpr int digits = (int)(0);
 static constexpr int digits10 = (int)(0);

 static constexpr int max_digits10 = (int)(0);

 static constexpr int max_exponent = (int)(0);
 static constexpr int max_exponent10 = (int)(0);
 static constexpr int min_exponent = (int)(0);
 static constexpr int min_exponent10 = (int)(0);
 static constexpr int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static constexpr _Ty (min)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty (max)() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty lowest() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty round_error() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty infinity() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (_Ty());
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (_Ty());
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(true);
 static constexpr bool is_integer = (bool)(true);
 static constexpr bool is_modulo = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static constexpr bool has_denorm_loss = (bool)(true);
 static constexpr bool has_infinity = (bool)(true);
 static constexpr bool has_quiet_NaN = (bool)(true);
 static constexpr bool has_signaling_NaN = (bool)(true);
 static constexpr bool is_bounded = (bool)(true);
 static constexpr bool is_exact = (bool)(false);
 static constexpr bool is_iec559 = (bool)(true);
 static constexpr bool is_integer = (bool)(false);
 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(true);
 static constexpr bool is_specialized = (bool)(true);
 static constexpr bool tinyness_before = (bool)(true);
 static constexpr bool traps = (bool)(false);
 static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
 static constexpr int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)((-128) != 0);
 static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((_Ty)0x0000);
  }

 static constexpr _Ty (max)() noexcept
  {
  return ((_Ty)0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(0x0000 != 0);
 static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (false);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (true);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_modulo = (bool)(false);
 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(1);
 static constexpr int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-128));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (127);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 - 1);
 static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8);
 static constexpr int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-32768));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (32767);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (short) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned short));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };



template<> class numeric_limits<char16_t>
 : public _Num_int_base
 {
public:
 typedef char16_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char16_t));
 static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);

 };


template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647 - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (int) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned int));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return ((-2147483647L - 1));
  }

 static constexpr _Ty (max)() noexcept
  {
  return (2147483647L);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (long) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffUL);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned long));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };


template<> class numeric_limits<char32_t>
 : public _Num_int_base
 {
public:
 typedef char32_t _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (char32_t));
 static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);

 };



template<> class numeric_limits<__int64>
 : public _Num_int_base
 {
public:
 typedef __int64 _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (-0x7fffffffffffffff - 1);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0x7fffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(true);
 static constexpr int digits = (int)(8 * sizeof (__int64) - 1);
 static constexpr int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned __int64>
 : public _Num_int_base
 {
public:
 typedef unsigned __int64 _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (0);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (0xffffffffffffffff);
  }

 static constexpr _Ty lowest() noexcept
  {
  return ((min)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (0);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (0);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (0);
  }

 static constexpr _Ty quiet_NaN() noexcept
  {
  return (0);
  }

 static constexpr _Ty signaling_NaN() noexcept
  {
  return (0);
  }

 static constexpr bool is_signed = (bool)(false);
 static constexpr int digits = (int)(8 * sizeof (unsigned __int64));
 static constexpr int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);

 };



template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (1.175494351e-38F);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (3.402823466e+38F);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (1.192092896e-07F);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5F);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (1.401298464e-45F);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (((float)(1e+300 * 1e+300)));
  }

 static _Ty quiet_NaN() noexcept
  {
  return (:: _FNan._Float);
  }

 static _Ty signaling_NaN() noexcept
  {
  return (:: _FSnan._Float);
  }

 static constexpr int digits = (int)(24);
 static constexpr int digits10 = (int)(6);

 static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)128);
 static constexpr int max_exponent10 = (int)((int)38);
 static constexpr int min_exponent = (int)((int)(-125));
 static constexpr int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (((float)(1e+300 * 1e+300)));
  }

 static _Ty quiet_NaN() noexcept
  {
  return (:: _Nan._Double);
  }

 static _Ty signaling_NaN() noexcept
  {
  return (:: _Snan._Double);
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static constexpr _Ty (min)() noexcept
  {
  return (2.2250738585072014e-308);
  }

 static constexpr _Ty (max)() noexcept
  {
  return (1.7976931348623158e+308);
  }

 static constexpr _Ty lowest() noexcept
  {
  return (-(max)());
  }

 static constexpr _Ty epsilon() noexcept
  {
  return (2.2204460492503131e-016);
  }

 static constexpr _Ty round_error() noexcept
  {
  return (0.5L);
  }

 static constexpr _Ty denorm_min() noexcept
  {
  return (4.9406564584124654e-324);
  }

 static constexpr _Ty infinity() noexcept
  {
  return (((float)(1e+300 * 1e+300)));
  }

 static _Ty quiet_NaN() noexcept
  {
  return (:: _LNan._Long_double);
  }

 static _Ty signaling_NaN() noexcept
  {
  return (:: _LSnan._Long_double);
  }

 static constexpr int digits = (int)(53);
 static constexpr int digits10 = (int)(15);

 static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static constexpr int max_exponent = (int)((int)1024);
 static constexpr int max_exponent10 = (int)((int)308);
 static constexpr int min_exponent = (int)((int)(-1021));
 static constexpr int min_exponent10 = (int)((int)(-307));
 };
# 1490 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\limits" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\new" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new.h" 2 3



extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985)






 namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }



__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) throw();


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );


__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();




    inline void* __cdecl operator new(size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }





    inline void* __cdecl operator new[](size_t _Size, void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }




#pragma warning(pop)
#pragma pack(pop)

}
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\new" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)






namespace std {




typedef void (__cdecl * new_handler) ();



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 noexcept;

__declspec(dllimport) new_handler __cdecl get_new_handler()
 noexcept;
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 1 3







# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\utility" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 1 3
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 1 3
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new_debug.h" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_new_debug.h" 3
extern "C++" {

#pragma pack(push, 8)







 __declspec(allocator) void* __cdecl operator new(
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );


    __declspec(allocator) void* __cdecl operator new[](
               size_t _Size,
               int _BlockUse,
               char const* _FileName,
               int _LineNumber
        );

    void __cdecl operator delete(
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void* _Block,
        int _BlockUse,
        char const* _FileName,
        int _LineNumber
        ) throw();





#pragma pack(pop)

}
# 12 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 2 3


#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
 extern "C" {



typedef void* _HFILE;
# 44 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*, int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);
# 107 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;
# 151 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
        __declspec(dllimport) int* __cdecl __p__crtDbgFlag(void);
        __declspec(dllimport) long* __cdecl __p__crtBreakAlloc(void);




        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(void);

        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
                     _CRT_ALLOC_HOOK _PfnNewHook
            );

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(void);

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
                     _CRT_DUMP_CLIENT _PFnNewDump
            );



    __declspec(dllimport) int __cdecl _CrtCheckMemory(void);

    typedef void (__cdecl* _CrtDoForAllClientObjectsCallback)(void*, void*);

    __declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
             _CrtDoForAllClientObjectsCallback _Callback,
             void* _Context
        );

    __declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(void);

    __declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
                  void const* _Block,
                  unsigned int _Size,
                  long* _RequestNumber,
                  char** _FileName,
                  int* _LineNumber
        );


    __declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
                 void const* _Pointer
        );


    __declspec(dllimport) int __cdecl _CrtIsValidPointer(
                 void const* _Pointer,
                 unsigned int _Size,
                 int _ReadWrite
        );

    __declspec(dllimport) void __cdecl _CrtMemCheckpoint(
              _CrtMemState* _State
        );

    __declspec(dllimport) int __cdecl _CrtMemDifference(
              _CrtMemState* _State,
              _CrtMemState const* _OldState,
              _CrtMemState const* _NewState
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
                 _CrtMemState const* _State
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
             _CrtMemState const* _State
        );


    __declspec(dllimport) int __cdecl _CrtReportBlockType(
                 void const* _Block
        );

    __declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
             long _NewValue
        );

    __declspec(dllimport) int __cdecl _CrtSetDbgFlag(
             int _NewFlag
        );
# 327 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
    __declspec(dllimport) void __cdecl _aligned_free_dbg(
                                       void* _Block
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_malloc_dbg(
                   size_t _Size,
                   size_t _Alignment,
                   char const* _FileName,
                   int _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _aligned_msize_dbg(
                      void* _Block,
                      size_t _Alignment,
                      size_t _Offset
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_malloc_dbg(
                   size_t _Size,
                   size_t _Alignment,
                   size_t _Offset,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       size_t _Alignment,
                                       size_t _Offset,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       size_t _Alignment,
                                       size_t _Offset,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       size_t _Alignment,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       size_t _Alignment,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _calloc_dbg(
                   size_t _Count,
                   size_t _Size,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _expand_dbg(
                      void* _Block,
                      size_t _Size,
                      int _BlockUse,
                      char const* _FileName,
                      int _LineNumber
        );

    __declspec(dllimport) void __cdecl _free_dbg(
                                       void* _Block,
                                       int _BlockUse
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _malloc_dbg(
                   size_t _Size,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _msize_dbg(
                      void* _Block,
                      int _BlockUse
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _realloc_dbg(
                                       void* _Block,
                                       size_t _Size,
                                       int _BlockUse,
                                       char const* _FileName,
                                       int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) void* __cdecl _recalloc_dbg(
                                       void* _Block,
                                       size_t _Count,
                                       size_t _Size,
                                       int _BlockUse,
                                       char const* _FileName,
                                       int _LineNumber
        );



    __declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
                                                                              char** _PBuffer,
                                       size_t* _PBufferSizeInBytes,
                                       char const* _VarName,
                                       int _BlockType,
                                       char const* _FileName,
                                       int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath_dbg(
                                         char* _FullPath,
                                         char const* _Path,
                                         size_t _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) char* __cdecl _getcwd_dbg(
                                         char* _DstBuf,
                                         int _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );




    __declspec(dllimport) __declspec(allocator) char* __cdecl _getdcwd_dbg(
                                         int _Drive,
                                         char* _DstBuf,
                                         int _SizeInBytes,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) char* __cdecl _strdup_dbg(
                   char const* _String,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam_dbg(
                   char const* _DirName,
                   char const* _FilePrefix,
                   int _BlockType,
                   char const* _FileName,
                   int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup_dbg(
                   wchar_t const* _String,
                   int _BlockUse,
                   char const* _FileName,
                   int _LineNumber
        );



    __declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
                                                                              wchar_t** _PBuffer,
                                         size_t* _PBufferSizeInWords,
                                         wchar_t const* _VarName,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath_dbg(
                                         wchar_t* _FullPath,
                                         wchar_t const* _Path,
                                         size_t _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd_dbg(
                                         wchar_t* _DstBuf,
                                         int _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );



    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd_dbg(
                                         int _Drive,
                                         wchar_t* _DstBuf,
                                         int _SizeInWords,
                                         int _BlockType,
                                         char const* _FileName,
                                         int _LineNumber
        );


    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam_dbg(
                   wchar_t const* _DirName,
                   wchar_t const* _FilePrefix,
                   int _BlockType,
                   char const* _FileName,
                   int _LineNumber
        );
# 606 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
    __declspec(dllimport) int __cdecl _CrtDbgReport(
                   int _ReportType,
                   char const* _FileName,
                   int _Linenumber,
                   char const* _ModuleName,
                   char const* _Format,
        ...);

    __declspec(dllimport) int __cdecl _CrtDbgReportW(
                   int _ReportType,
                   wchar_t const* _FileName,
                   int _LineNumber,
                   wchar_t const* _ModuleName,
                   wchar_t const* _Format,
        ...);


    __declspec(dllimport) int __cdecl _VCrtDbgReportA(
                   int _ReportType,
                   void* _ReturnAddress,
                   char const* _FileName,
                   int _LineNumber,
                   char const* _ModuleName,
                   char const* _Format,
                   va_list _ArgList
        );

    __declspec(dllimport) int __cdecl _VCrtDbgReportW(
                   int _ReportType,
                   void* _ReturnAddress,
                   wchar_t const* _FileName,
                   int _LineNumber,
                   wchar_t const* _ModuleName,
                   wchar_t const* _Format,
                   va_list _ArgList
        );

    __declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
             size_t _NewDebugFillThreshold
        );

    __declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(void);

    __declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
                 int _ReportType,
                 _HFILE _ReportFile
        );

    __declspec(dllimport) int __cdecl _CrtSetReportMode(
             int _ReportType,
             int _ReportMode
        );



        extern long _crtAssertBusy;

        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(void);




        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
                     _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHook2(
                     int _Mode,
                     _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHookW2(
                     int _Mode,
                     _CRT_REPORT_HOOKW _PFnNewHook
            );
# 808 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
}
# 808 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\crtdbg.h" 3
#pragma pack(pop)
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;
# 31 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 3
extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                           _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Count <= _Dest_size)) { (void)( (!!(("_Count <= _Dest_size" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd", 173, 0, L"%ls", L"\"_Count <= _Dest_size\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"_Count <= _Dest_size", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd", 173, 0); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                       _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((int_type)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };


template<>
 struct char_traits<char16_t>
 : public _Char_traits<char16_t, unsigned short>
 {
 };

typedef streampos u16streampos;


template<>
 struct char_traits<char32_t>
 : public _Char_traits<char32_t, unsigned int>
 {
 };

typedef streampos u32streampos;


template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<>
 struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp((const wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));

  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr((const wchar_t *)_First,
    _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left < _Right);
  }

 static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
  noexcept
  {
  return (_Meta);
  }

 static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
  noexcept
  {
  return (_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(const int_type& _Meta)
  noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return (((wint_t)(0xFFFF)));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
  {
  _Left = _Right;
  }

 static constexpr bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) noexcept
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static constexpr _Elem __cdecl to_char_type(
  const int_type& _Meta) noexcept
  {
  return ((_Elem)_Meta);
  }

 static constexpr int_type __cdecl to_int_type(
  const _Elem& _Ch) noexcept
  {
  return ((unsigned char)_Ch);
  }

 static constexpr bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) noexcept
  {
  return (_Left == _Right);
  }

 static constexpr int_type __cdecl not_eof(
  const int_type& _Meta) noexcept
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static constexpr int_type __cdecl eof() noexcept
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
# 737 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iosfwd" 3
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\utility" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180 4512)

namespace std {

template<class _Ty> inline
 void swap(_Ty&, _Ty&)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);


template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
  noexcept(noexcept(swap(*_Left, *_Right)))
 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty> inline
 void swap(_Ty& _Left, _Ty& _Right)
  noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)

 {
 _Ty _Tmp = _Move(_Left);
 _Left = _Move(_Right);
 _Right = _Move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
  noexcept(noexcept(swap(_Left, _Right)))
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

constexpr piecewise_construct_t piecewise_construct{};



template<class...>
 class tuple;


template<class _Ty1,
 class _Ty2>
 struct pair
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 constexpr pair()
  : first(), second()
  {
  }

 constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 pair(const pair&) = default;
 pair(pair&&) = default;

 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
   && is_convertible<const _Other2&, _Ty2>::value,
   void>::type>
  constexpr pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }


 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2);


 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<_Other1, _Ty1>::value
   && is_convertible<_Other2, _Ty2>::value,
   void>::type>
  constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
   noexcept((is_nothrow_constructible<_Ty1, _Other1&&>::value && is_nothrow_constructible<_Ty2, _Other2&&>::value))

  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<_Other1, _Ty1>::value
   && is_convertible<_Other2, _Ty2>::value,
   void>::type>
  constexpr pair(pair<_Other1, _Other2>&& _Right)
   noexcept((is_nothrow_constructible<_Ty1, _Other1&&>::value && is_nothrow_constructible<_Ty2, _Other2&&>::value))

  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(pair<_Other1, _Other2>&& _Right)
  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))

  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 void swap(_Myt& _Right)
  noexcept(noexcept(_Swap_adl(this->first, _Right.first)) && noexcept(_Swap_adl(this->second, _Right.second)))

  {
  if (this != &_Right)
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }

 _Myt& operator=(const _Myt& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 _Ty1 first;
 _Ty2 second;
 };



template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 constexpr pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }


 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {
template<class _Ty,
 size_t _Size>
 class array;


template<class _Tuple>
 struct tuple_size
 {
 static_assert(_Always_false<_Tuple>::value,
  "The C++ Standard doesn't define tuple_size for this type.");
 };

template<class _Ty,
 size_t _Size>
 struct tuple_size<array<_Ty, _Size> >
  : integral_constant<size_t, _Size>
 {
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2> >
 : integral_constant<size_t, 2>
 {
 };

template<class... _Types>
 struct tuple_size<tuple<_Types...> >
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };


template<class _Tuple>
 struct tuple_size<const _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element
 {
 static_assert(_Always_false<_Tuple>::value,
  "tuple_element index out of bounds");
 };

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 struct tuple_element<_Idx, array<_Ty, _Size> >
 {
 static_assert(_Idx < _Size, "array index out of bounds");

 typedef _Ty type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...> >
 {
 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...> >
  : public tuple_element<_Index - 1, tuple<_Rest...> >
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
  : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;


template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 0>) noexcept
 {
 return (_Pr.first);
 }

template<class _Ret,
 class _Pair> inline
 constexpr _Ret _Pair_get(_Pair& _Pr,
  integral_constant<size_t, 1>) noexcept
 {
 return (_Pr.second);
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
 return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
  _Ctype;
 return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<0>(_Pr));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
 {
 return (::std:: get<1>(_Pr));
 }

template<size_t _Idx,
 class _Ty1,
 class _Ty2> inline
 constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
  get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
 return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
 }

template<class _Ty1,
 class _Ty2> inline
 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<0>(::std:: move(_Pr)));
 }

template<class _Ty2,
 class _Ty1> inline
 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
 {
 return (::std:: get<1>(::std:: move(_Pr)));
 }



template<class _Ty,
 class _Other = _Ty> inline
 _Ty exchange(_Ty& _Val, _Other&& _New_val)
 {
 _Ty _Old_val = ::std:: move(_Val);
 _Val = ::std:: forward<_Other>(_New_val);
 return (_Old_val);
 }
}

namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
}


#pragma warning(pop)
#pragma pack(pop)
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
# 25 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
typedef const wchar_t *_Dbfile_t;
typedef unsigned int _Dbline_t;

__declspec(dllimport) void __cdecl _Debug_message(const wchar_t *,
 const wchar_t *, unsigned int);






struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12() noexcept
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }
  return (*this);
  }

 ~_Iterator_base12() noexcept
  {

  _Lockit _Lock(3);
  _Orphan_me();

  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent == 0)
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;


   if (_Myproxy != _Parent_proxy)
    {
    _Lockit _Lock(3);
    _Orphan_me();
    _Mynextiter = _Parent_proxy->_Myfirstiter;
    _Parent_proxy->_Myfirstiter = this;
    _Myproxy = _Parent_proxy;
    }




   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {

  if (_Myproxy != 0)
   {
   _Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   while (*_Pnext != 0 && *_Pnext != this)
    _Pnext = &(*_Pnext)->_Mynextiter;

   if (*_Pnext == 0)
    _Debug_message(L"ITERATOR LIST CORRUPTED!", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 201);
   *_Pnext = _Mynextiter;
   _Myproxy = 0;
   }

  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {

 if (_Myproxy != 0)
  {
  _Lockit _Lock(3);

  for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   *_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
   (*_Pnext)->_Myproxy = 0;
  _Myproxy->_Myfirstiter = 0;
  }

 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {

 _Lockit _Lock(3);


 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }






typedef _Container_base12 _Container_base;
typedef _Iterator_base12 _Iterator_base;



struct _Zero_then_variadic_args_t
 {
 };

struct _One_then_variadic_args_t
 {
 };

template<class _Ty1,
 class _Ty2,
 bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
 class _Compressed_pair final
  : private _Ty1

 {
private:
 _Ty2 _Myval2;

 typedef _Ty1 _Mybase;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Ty1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (*this);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (*this);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (*this);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (*this);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };

template<class _Ty1,
 class _Ty2>
 class _Compressed_pair<_Ty1, _Ty2, false> final

 {
private:
 _Ty1 _Myval1;
 _Ty2 _Myval2;

public:
 template<class... _Other2>
  constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
   _Other2&&... _Val2)
  : _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }

 template<class _Other1,
  class... _Other2>
  _Compressed_pair(_One_then_variadic_args_t,
   _Other1&& _Val1, _Other2&&... _Val2)
  : _Myval1(::std:: forward<_Other1>(_Val1)),
   _Myval2(::std:: forward<_Other2>(_Val2)...)
  {
  }


 _Ty1& _Get_first() noexcept
  {
  return (_Myval1);
  }

 const _Ty1& _Get_first() const noexcept
  {
  return (_Myval1);
  }

 volatile _Ty1& _Get_first() volatile noexcept
  {
  return (_Myval1);
  }

 const volatile _Ty1& _Get_first() const volatile noexcept
  {
  return (_Myval1);
  }

 _Ty2& _Get_second() noexcept
  {
  return (_Myval2);
  }

 const _Ty2& _Get_second() const noexcept
  {
  return (_Myval2);
  }

 volatile _Ty2& _Get_second() volatile noexcept
  {
  return (_Myval2);
  }

 const volatile _Ty2& _Get_second() const volatile noexcept
  {
  return (_Myval2);
  }
 };
# 408 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _Ty>
 struct _Get_unchecked_type
  { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::_Unchecked_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Ty>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class = void>
 struct _Is_checked_helper
  : false_type
 {
 };

template<class _Ty>
 struct _Is_checked_helper<_Ty, typename _Param_tester<
  typename _Ty::_Unchecked_type>::type>
  : true_type
 {
 };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return (typename _Is_checked_helper<_Iter>::type());
 }


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }


template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }



struct input_iterator_tag
 {
 };

struct _Mutable_iterator_tag
 {
 };

struct output_iterator_tag
 : _Mutable_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag, _Mutable_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _Nonscalar_ptr_iterator_tag
 {
 };
struct _Scalar_ptr_iterator_tag
 {
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;

 typedef _Pointer pointer;
 typedef _Reference reference;
 };


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;


template<class,
 class = void>
 struct _Is_iterator
  : false_type
 {
 };

template<class _Ty>
 struct _Is_iterator<_Ty, typename _Param_tester<
  typename _Ty::iterator_category,
  typename _Ty::value_type,
  typename _Ty::difference_type,
  typename _Ty::pointer,
  typename _Ty::reference
  >::type>
  : true_type
 {
 };

template<class _Ty>
 struct _Is_iterator<_Ty *>
  : true_type
 {
 };


template<class _Iter,
 bool = _Is_iterator<_Iter>::value>
 struct _Iterator_traits_base
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;

 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Iter>
 struct _Iterator_traits_base<_Iter, false>
 {
 };

template<class _Iter>
 struct iterator_traits
  : _Iterator_traits_base<_Iter>
 {
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;

 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };


template<class _Iter> inline
 typename iterator_traits<_Iter>::iterator_category
  _Iter_cat(const _Iter&)
 {
 typename iterator_traits<_Iter>::iterator_category _Cat;
 return (_Cat);
 }


template<class _Iter1,
 class _Iter2> inline
 _Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
 {
 _Nonscalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2>
 struct _Ptr_cat_helper
 {
 typedef _Nonscalar_ptr_iterator_tag type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef typename _If<is_scalar<_Elem>::value,
  _Scalar_ptr_iterator_tag,
  _Nonscalar_ptr_iterator_tag>::type type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Scalar_ptr_iterator_tag type;
 };

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type
  _Ptr_cat(_Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type
  _Ptr_cat(const _Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
 return (_Cat);
 }
# 728 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _Pr,
 class _Ty1,
 class _Ty2> inline
 constexpr bool _Debug_lt_pred(_Pr _Pred,
  _Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 return (!_Pred(_Left, _Right)
  ? false
  : _Pred(_Right, _Left)
   ? (_Debug_message(L"invalid comparator", _File, _Line), true)
   : true);
 }


template<class _Ty1,
 class _Ty2> inline
 constexpr bool _Debug_lt(_Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 return (_Debug_lt_pred(less<>(),
  ::std:: forward<_Ty1>(_Left), ::std:: forward<_Ty2>(_Right), _File, _Line));
 }


template<class _InIt> inline
 void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer(_Ty *_Ptr, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Ptr == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_pointer_if(bool, _InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer_if(bool _Test, _Ty *_Ptr,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_Test && _Ptr == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_range2(_InIt _First, _InIt _Last,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 bool _Ans = _First == _Last;
 _Ans = _Ans;
 }

template<class _RanIt> inline
 void _Debug_range2(_RanIt _First, _RanIt _Last,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  }
 }

template<class _InIt> inline
 void _Debug_range(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));
 }


template<class _InIt,
 class _Pty> inline
 void _Debug_range_ptr2(_InIt _First, _InIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, input_iterator_tag)
 {
 if (_First != _Last)
  _Debug_pointer(_Ptr, _File, _Line);
 }

template<class _RanIt,
 class _Pty> inline
 void _Debug_range_ptr2(_RanIt _First, _RanIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line, random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  _Debug_pointer(_Ptr, _File, _Line);
  }
 }

template<class _InIt,
 class _Pty> inline
 void _Debug_range_ptr(_InIt _First, _InIt _Last, _Pty& _Ptr,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range_ptr2(_First, _Last, _Ptr, _File, _Line, _Iter_cat(_First));
 }


template<class _InIt,
 class _Pr> inline
 void _Debug_order2(_InIt, _InIt, _Pr,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt,
 class _Pr> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 855))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt,
 class _Pr> inline
 void _Debug_order(_InIt _First, _InIt _Last, _Pr _Pred,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range_ptr(_First, _Last, _Pred, _File, _Line);
 _Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat(_First));
 }





template<class _Iter> inline
 typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
 void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {

 if (_Off < 0)
  _Debug_message(L"negative offset in advance", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 885);


 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _FwdIt,
 class _Diff> inline
 void _Advance(_FwdIt& _Where, _Diff _Off, forward_iterator_tag)
 {

 if (_Off < 0)
  _Debug_message(L"negative offset in advance", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 898);


 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BidIt,
 class _Diff> inline
 void _Advance(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RanIt,
 class _Diff> inline
 void _Advance(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {
 _Advance(_Where, _Off, _Iter_cat(_Where));
 }



template<class _Iter> inline
 typename iterator_traits<_Iter>::difference_type
  *_Dist_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
  void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
   input_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _FwdIt,
 class _Diff> inline
  void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
   forward_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _BidIt,
 class _Diff> inline
  void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
   bidirectional_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _RanIt,
 class _Diff> inline
  void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
   random_access_iterator_tag)
 {

 if (_First != _Last)
  {
  _Debug_pointer(_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 974);
  _Debug_pointer(_Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 975);
  }


 _Off += _Last - _First;
 }

template<class _InIt> inline
 typename iterator_traits<_InIt>::difference_type
  distance(_InIt _First, _InIt _Last)
 {
 typename iterator_traits<_InIt>::difference_type _Off = 0;
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 return (_Off);
 }

template<class _InIt,
 class _Diff> inline
  void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
 {
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 }


template<class _FwdIt> inline
 _FwdIt next(_FwdIt _First,
  typename iterator_traits<_FwdIt>::difference_type _Off = 1)
 {
 static_assert(is_base_of<forward_iterator_tag,
  typename iterator_traits<_FwdIt>::iterator_category>::value,
  "next requires forward iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt> inline
 _BidIt prev(_BidIt _First,
  typename iterator_traits<_BidIt>::difference_type _Off = 1)
 {
 static_assert(is_base_of<bidirectional_iterator_tag,
  typename iterator_traits<_BidIt>::iterator_category>::value,
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }


template<class _Ty>
 struct pointer_traits;

template<class _RanIt>
 class reverse_iterator
  : public iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference>
 {
 typedef reverse_iterator<_RanIt> _Myt;

public:
 typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  : current()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : current(_Right.base())
  {
  }

 template<class _Other>
  _Myt& operator=(const reverse_iterator<_Other>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

protected:
 _RanIt current;
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt> inline
 reverse_iterator<_RanIt> operator+(
  typename reverse_iterator<_RanIt>::difference_type _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left.base() == _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() < _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
 {
 return (reverse_iterator<_RanIt>(_Iter));
 }



template<class _Container>
 auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
 {
 return (_Array + _Size);
 }


template<class _Container>
 constexpr auto inline cbegin(const _Container& _Cont)
  noexcept(noexcept(::std:: begin(_Cont)))
  -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 constexpr auto inline cend(const _Container& _Cont)
  noexcept(noexcept(::std:: end(_Cont)))
  -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rbegin(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *>
  rend(::std:: initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 auto inline crbegin(const _Container& _Cont)
  -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 auto inline crend(const _Container& _Cont)
  -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }


template<class _Container>
 constexpr auto inline size(const _Container& _Cont)
  -> decltype(_Cont.size())
 {
 return (_Cont.size());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr size_t size(const _Ty(&)[_Size]) noexcept
 {
 return (_Size);
 }

template<class _Container>
 constexpr auto inline empty(const _Container& _Cont)
  -> decltype(_Cont.empty())
 {
 return (_Cont.empty());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr bool empty(const _Ty(&)[_Size]) noexcept
 {
 return (false);
 }

template<class _Elem> inline
 constexpr bool empty(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.size() == 0);
 }

template<class _Container>
 constexpr auto inline data(_Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Container>
 constexpr auto inline data(const _Container& _Cont)
  -> decltype(_Cont.data())
 {
 return (_Cont.data());
 }

template<class _Ty,
 size_t _Size> inline
 constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
 {
 return (_Array);
 }

template<class _Elem> inline
 constexpr const _Elem *data(
  ::std:: initializer_list<_Elem> _Ilist) noexcept
 {
 return (_Ilist.begin());
 }


template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};
# 1558 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
 _Array_const_iterator()
  {
  _Ptr = 0;
  _Idx = 0;
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  {
  _Ptr = _Parg;
  _Idx = _Off;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Idx = _Right - _Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr + _Idx);
  }

 reference operator*() const
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1589);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1590, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1590, 0); };
   }






                              ;

  return (_Ptr[_Idx]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not incrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1614);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1615, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1615, 0); };
   }






  ++_Idx;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (_Ptr == 0
   || _Idx <= 0)
   {
   _Debug_message(L"array iterator not decrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1640);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1641, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1641, 0); };
   }






  --_Idx;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Size < _Idx + _Off)
   {
   _Debug_message(L"array iterator + offset out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1665);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1666, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1666, 0); };
   }





  _Idx += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx
   ? -(difference_type)(_Right._Idx - _Idx)
   : (difference_type)_Idx - _Right._Idx);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx == _Right._Idx);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (_Ptr != _Right._Ptr)
   {
   _Debug_message(L"array iterators incompatible", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1744);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1745, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 1745, 0); };
   }
  }
# 1756 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
 pointer _Ptr;
 size_t _Idx;

 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _RanIt>
 class move_iterator
 {
public:
 typedef move_iterator<_RanIt> _Myt;
 typedef typename iterator_traits<_RanIt>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_RanIt>::value_type
  value_type;
 typedef typename iterator_traits<_RanIt>::difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef value_type&& reference;
 typedef _RanIt iterator_type;

 move_iterator()
  : current()
  {
  }

 explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  _Myt& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  return (::std:: move(*current));
  }

 pointer operator->() const
  {
  return (current);
  }

 _Myt& operator++()
  {
  ++current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 template<class _RanIt2>
  bool _Equal(const move_iterator<_RanIt2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

 template<class _RanIt2>
  bool _Less(const move_iterator<_RanIt2>& _Right) const
  {
  return (current < _Right.base());
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (current - _Right.base());
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 move_iterator<_RanIt>
  operator+(_Diff _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(
  move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 2184 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Copy_impl(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Copy_impl(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, true_type)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, false_type)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2228);
 return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 *_Dest = *_First;
 while (0 < --_Count)
  *++_Dest = *++_First;
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 2317 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n2(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Mutable_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n2(_InIt _First, _Diff _Count,
  _OutIt _Dest, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Copy_n(_First, _Count,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n1(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 return (_Copy_n2(_First, _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n1(_InIt _First, _Diff _Count,
  _OutIt _Dest, random_access_iterator_tag)
 {
 _InIt _Last = _First + _Count;
 _Last = _Last;
 return (_Copy_n2(_Unchecked(_First), _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, true_type)
 {
 return (_Copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, false_type)
 {
 return (_Copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 if (_Count <= 0)
  return (_Dest);
 else
  {
  _Debug_pointer(_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2392);
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2393);
  return (_Copy_n(_First, _Count,
   _Dest, _Is_checked(_Dest)));
  }
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutIt _Dest)
 {
 return (::std:: copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy_n(_First, _Count,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 2481 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, true_type)
 {
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, false_type)
 {
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2505);
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }



template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, (void)++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 2554 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Move(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Move(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, true_type)
 {
 return (_Move(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, false_type)
 {
 return (_Move(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2598);
 return (_Move(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *move(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: move(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 2660 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, true_type)
 {
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, false_type)
 {
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2684);
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }



template<class _FwdIt,
 class _Ty> inline
 void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

inline void _Fill(char *_First, char *_Last, char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2718);
 _Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }

inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
 signed char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }

inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
 unsigned char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }
# 2763 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  _Mutable_iterator_tag)
 {
 return (_Fill_n(_Dest, _Count, _Val));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Fill_n(_Unchecked(_Dest), _Count, _Val);
 return (_Ans);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  true_type)
 {
 return (_Fill_n1(_Dest, _Count, _Val,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  false_type)
 {
 return (_Fill_n1(_Dest, _Count, _Val,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 _Debug_pointer_if(0 < _Count, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2809);
 return (_Fill_n(_Dest, _Count, _Val,
  _Is_checked(_Dest)));
 }


template<class _OutTy,
 size_t _OutSize,
 class _Diff,
 class _Ty> inline
 _OutTy *fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)
 {
 return (_Unchecked(::std:: fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
  _Count, _Val)));
 }




template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }

inline bool _Equal(const char *_First1, const char *_Last1,
 const char *_First2, equal_to<>)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
 const signed char *_First2, equal_to<>)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2, equal_to<>)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }
# 2870 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, true_type)
 {
 return (_Equal(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, false_type)
 {
 return (_Equal(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2897);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2898);
 return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Is_checked(_First2)));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (::std:: equal(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }




template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: equal(_First1, _Last1, _First2,
  equal_to<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred,
   input_iterator_tag, input_iterator_tag)
 {

 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2948);
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred,
   random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2965);
 return (_Equal(_First1, _Last1, _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2975);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2976);
 return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Iter_cat(_First1), _Iter_cat(_First2)));
 }


template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: equal(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InIt2> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (_Debug_lt(*_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 2999))
   return (true);
  else if (*_First2 < *_First1)
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

inline bool _Lexicographical_compare(
 const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2, const unsigned char *_Last2)
 {
 ptrdiff_t _Num1 = _Last1 - _First1;
 ptrdiff_t _Num2 = _Last2 - _First2;
 int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Ans < 0 || (_Ans == 0 && _Num1 < _Num2));
 }
# 3028 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3033);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3034);
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2)));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  {
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3048))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
  }
 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3062);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3063);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3064);
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Ignored)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Ignored)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Ignored)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 typedef typename remove_pointer<_InIt>::type _Elem;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 typedef integral_constant<bool,
  (is_same<_InIt, char *>::value
  || is_same<_InIt, signed char *>::value
  || is_same<_InIt, unsigned char *>::value
  || is_same<_InIt, const char *>::value
  || is_same<_InIt, const signed char *>::value
  || is_same<_InIt, const unsigned char *>::value)
  && is_integral<_Ty>::value
 > _Memchr_opt;
 return (_Find(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3160);
 return (_Rechecked(_First,
  _Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   break;
 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 typename iterator_traits<_InIt>::difference_type
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3196);
 return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   ++_Count;
 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr,
  forward_iterator_tag, forward_iterator_tag)
 {
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr _Pred,
  bidirectional_iterator_tag, bidirectional_iterator_tag)
 {

 while (_Pred(*--_Last1, *--_Last2))
  ;
 ++_Last1;
 ++_Last2;
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Trim_matching_suffixes(_Last1, _Last2, _Pred,
  _Iter_cat(_Last1), _Iter_cat(_Last2));
 typedef typename iterator_traits<_FwdIt1>::difference_type _Diff1;
 typedef typename iterator_traits<_FwdIt2>::difference_type _Diff2;
 for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
  if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
   {
   _Diff2 _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
   if (_Count2 == 0)
    return (false);
   _FwdIt1 _Skip1 = ::std:: next(_Next1);
   _Diff1 _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
   if (_Count2 != _Count1)
    return (false);
   }
 return (true);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   _FwdIt2 _Last2 = ::std:: next(_First2,
    ::std:: distance(_First1, _Last1));
   return (_Check_match_counts(_First1, _Last1,
    _First2, _Last2, _Pred));
   }
 return (true);
 }
# 3292 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility" 3
template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation2(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred, true_type)
 {

 return (_Is_permutation(_First1, _Last1,
  _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 bool _Is_permutation2(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred, false_type)
 {

 return (_Is_permutation(_First1, _Last1,
  _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3321);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3322);
 return (_Is_permutation2(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Is_checked(_First2)));
 }


template<class _FwdIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }




template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }



template<class _FwdIt1,
 class _InTy,
 size_t _InSize> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: is_permutation(_First1, _Last1, _First2, equal_to<>()));
 }



template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
  forward_iterator_tag, forward_iterator_tag)
 {

 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3372);
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
  if (!_Pred(*_First1, *_First2))
   {
   if (::std:: distance(_First1, _Last1)
    != ::std:: distance(_First2, _Last2))
    return (false);
   else
    return (_Check_match_counts(_First1, _Last1,
     _First2, _Last2, _Pred));
   }
 return (_First1 == _Last1 && _First2 == _Last2);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
  random_access_iterator_tag, random_access_iterator_tag)
 {

 if (_Last1 - _First1 != _Last2 - _First2)
  return (false);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3396);
 return (_Is_permutation(_First1, _Last1, _First2, _Pred));
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {

 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3407);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3408);
 return (_Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred,
  _Iter_cat(_First1), _Iter_cat(_First2)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, _Last2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3435);
 _Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
 }


template<class _FwdIt> inline
 _FwdIt _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid, _Res = _Last; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   {
   if (++_Next == _Last)
    return (_Res == _Last ? _Mid : _Res);
   else
    _Mid = _Next;
   }
  else if (++_Next == _Last)
   {
   if (_Res == _Last)
    _Res = _First;
   _Next = _Mid;
   }
  }
 }

template<class _BidIt> inline
 pair<_BidIt, _BidIt> _Reverse_until_sentinel(
  _BidIt _First, _BidIt _Sentinel, _BidIt _Last)
 {
 while (_First != _Sentinel && _Last != _Sentinel)
  ::std:: iter_swap(_First++, --_Last);
 return (::std:: make_pair(_First, _Last));
 }

template<class _BidIt> inline
 _BidIt _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 ::std:: reverse(_First, _Mid);
 ::std:: reverse(_Mid, _Last);
 pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel(_First, _Mid, _Last);
 ::std:: reverse(_Tmp.first, _Tmp.second);
 return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
 }

template<class _RanIt> inline
 _RanIt _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 ::std:: reverse(_First, _Mid);
 ::std:: reverse(_Mid, _Last);
 ::std:: reverse(_First, _Last);
 return (_First + (_Last - _Mid));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 _Debug_range(_First, _Mid, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3496);
 _Debug_range(_Mid, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3497);
 if (_First == _Mid)
  return (_Last);
 if (_Mid == _Last)
  return (_First);
 _Rechecked(_First, _Rotate(_Unchecked(_First), _Unchecked(_Mid),
  _Unchecked(_Last), _Iter_cat(_First)));
 return (_First);
 }


template<class _Diff,
 class _Urng>
 class _Rng_from_urng
 {
public:
 typedef typename make_unsigned<_Diff>::type _Ty0;
 typedef typename _Urng::result_type _Ty1;

 typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
  _Ty0, _Ty1>::type _Udiff;


 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (; ; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
 _Udiff _Get_bits()
  {
  for (; ; )
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);


    _Myptr = (_Elem *)_malloc_dbg(_Count, 2,
     "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xutility", 3630);





    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }
  return (*this);
  }

                    ~_Yarn() noexcept
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)


   _free_dbg(_Myptr, 2);





  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };


template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type
 {
 template<class _Uty>
  static auto _Fn(int)
   -> is_convertible<_Alloc,
    typename _Uty::allocator_type>;
 template<class _Uty>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_Ty>(0)) type;
 };


struct allocator_arg_t
 {
 };

constexpr allocator_arg_t allocator_arg{};

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xbad_alloc();
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xinvalid_argument( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xlength_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xout_of_range( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xoverflow_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xruntime_error( const char *);
}

namespace std {

template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)
# 27 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 3
#pragma warning(disable: 4100)

namespace std {
# 51 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 3
template<class _Ty> inline
 __declspec(allocator) _Ty *_Allocate(size_t _Count, _Ty *,
  bool _Try_aligned_allocation = true)
 {
 void *_Ptr = 0;

 if (_Count == 0)
  return (static_cast<_Ty *>(_Ptr));


 if ((size_t)(-1) / sizeof (_Ty) < _Count)
  _Xbad_alloc();
 const size_t _User_size = _Count * sizeof (_Ty);


 if (_Try_aligned_allocation
  && 4096 <= _User_size)
  {
  static_assert(sizeof (void *) < 32,
   "Big allocations should at least match vector register size");
  const size_t _Block_size = (2 * sizeof(void *) + 32 - 1) + _User_size;
  if (_Block_size <= _User_size)
   _Xbad_alloc();
  const uintptr_t _Ptr_container =
   reinterpret_cast<uintptr_t>(::operator new(_Block_size));
  { if (!(_Ptr_container != 0)) { (void)( (!!(("_Ptr_container != 0" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 76, 0, L"%ls", L"\"_Ptr_container != 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 76, 0); } ; };
  _Ptr = reinterpret_cast<void *>((_Ptr_container + (2 * sizeof(void *) + 32 - 1))
   & ~(32 - 1));
  static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;


  static_cast<uintptr_t *>(_Ptr)[-2] = 0xFAFAFAFAUL;

  }
 else


  {
  _Ptr = ::operator new(_User_size);
  { if (!(_Ptr != 0)) { (void)( (!!(("_Ptr != 0" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 90, 0, L"%ls", L"\"_Ptr != 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 90, 0); } ; };
  }
 return (static_cast<_Ty *>(_Ptr));
 }


template<class _Ty> inline
 void _Deallocate(_Ty * _Ptr, size_t _Count)
 {

 { if (!(_Count <= (size_t)(-1) / sizeof (_Ty))) { (void)( (!!(("_Count <= (size_t)(-1) / sizeof (_Ty)" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 100, 0, L"%ls", L"\"_Count <= (size_t)(-1) / sizeof (_Ty)\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 100, 0); } ; };
 const size_t _User_size = _Count * sizeof (_Ty);
 if (4096 <= _User_size)
  {
  const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
  { if (!((_Ptr_user & (32 - 1)) == 0)) { (void)( (!!(("(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 106, 0, L"%ls", L"\"(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 106, 0); } ; };

  const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
  const uintptr_t _Ptr_container =
   *reinterpret_cast<uintptr_t *>(_Ptr_ptr);




  { if (!(reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == 0xFAFAFAFAUL)) { (void)( (!!(("reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 116, 0, L"%ls", L"\"reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] == _BIG_ALLOCATION_SENTINEL\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 116, 0); } ; };





  { if (!(_Ptr_container < _Ptr_user)) { (void)( (!!(("_Ptr_container < _Ptr_user" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 120, 0, L"%ls", L"\"_Ptr_container < _Ptr_user\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 120, 0); } ; };


  { if (!(2 * sizeof(void *) <= _Ptr_user - _Ptr_container)) { (void)( (!!(("2 * sizeof(void *) <= _Ptr_user - _Ptr_container" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 124, 0, L"%ls", L"\"2 * sizeof(void *) <= _Ptr_user - _Ptr_container\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 124, 0); } ; };







  { if (!(_Ptr_user - _Ptr_container <= (2 * sizeof(void *) + 32 - 1))) { (void)( (!!(("_Ptr_user - _Ptr_container <= _NON_USER_SIZE" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 132, 0, L"%ls", L"\"_Ptr_user - _Ptr_container <= _NON_USER_SIZE\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0", 132, 0); } ; };


  _Ptr = reinterpret_cast<_Ty *>(_Ptr_container);
  }


 ::operator delete(_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Ty> inline
 void _Destroy(_Ty *_Ptr)
 {
 _Ptr->~_Ty();
 }


template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  _Al.destroy(::std:: addressof(*_First));
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Scalar_ptr_iterator_tag)
 {
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al)
 {
 _Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
 }


template<class _Alty>
 struct _Is_simple_alloc
  : _Cat_base<is_same<typename _Alty::size_type, size_t>::value
  && is_same<typename _Alty::difference_type, ptrdiff_t>::value
  && is_same<typename _Alty::pointer,
   typename _Alty::value_type *>::value
  && is_same<typename _Alty::const_pointer,
   const typename _Alty::value_type *>::value
  && is_same<typename _Alty::reference,
   typename _Alty::value_type&>::value
  && is_same<typename _Alty::const_reference,
   const typename _Alty::value_type&>::value>
 {
 };


template<class _Value_type>
 struct _Simple_types
 {
 typedef _Value_type value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef value_type& reference;
 typedef const value_type& const_reference;
 };


template<class _Alty,
 class _Pointer>
 struct _Get_voidptr
 {
 typedef typename _Alty::template rebind<void>::other _Alvoid;
 typedef typename _Alvoid::pointer type;
 };

template<class _Alty,
 class _Ty>
 struct _Get_voidptr<_Alty, _Ty *>
 {
 typedef void *type;
 };


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...> >
 {
 typedef _First type;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
 {
 typedef _Ty<_Newfirst, _Rest...> type;
 };


template<class _Ty>
 struct _Get_element_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_ptr_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Other>
 struct _Get_rebind_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct pointer_traits
 {
 typedef typename _Get_element_type<_Ty>::type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

 template<class _Other>
  using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

 typedef typename _If<is_void<element_type>::value,
  char&,
  typename add_lvalue_reference<element_type>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };


template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 typedef _Ty element_type;
 typedef _Ty *pointer;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  using rebind = _Other *;

 typedef typename _If<is_void<_Ty>::value,
  char&,
  typename add_lvalue_reference<_Ty>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };


template<class _Ty>
 struct _Get_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_const_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_const_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_size_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_propagate_on_container_copy
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_move
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_swap
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_is_always_equal
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



struct _Alloc_allocate
 {


 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint)
   -> decltype(_Al.allocate(_Count, _Hint))
  {
  return (_Al.allocate(_Count, _Hint));
  }

 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(_Wrap_int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer)
   -> decltype(_Al.allocate(_Count))
  {
  return (_Al.allocate(_Count));
  }
 };


struct _Alloc_construct
 {


 template<class _Ty,
  class _Objty,
  class... _Types>
  static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
   _Types&&... _Args)
   -> decltype(
    _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...))
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class _Objty,
  class... _Types>
  static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
   _Types&&... _Args)
   -> void
  {
  ::new (static_cast<void *>(_Ptr))
   _Objty(::std:: forward<_Types>(_Args)...);
  }

 };


struct _Alloc_destroy
 {
 template<class _Ty,
  class _Objty>
  static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
   -> decltype(_Al.destroy(_Ptr))
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty,
  class _Objty>
  static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
   -> void
  {
  _Ptr->~_Objty();
  }
 };


struct _Alloc_max_size
 {
 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al) noexcept
   -> decltype(_Al.max_size())
  {
  return (_Al.max_size());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty&) noexcept
   -> typename _Get_size_type<_Ty>::type
  {
  return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
  }
 };


struct _Alloc_select
 {


 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype((_Ty)_Al.select_on_container_copy_construction())
  {
  return (_Al.select_on_container_copy_construction());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty& _Al)
   -> _Ty
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct allocator_traits
 {
 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef typename _Get_pointer_type<_Alloc>::type
  pointer;
 typedef typename _Get_const_pointer_type<_Alloc>::type
  const_pointer;
 typedef typename _Get_void_pointer_type<_Alloc>::type
  void_pointer;
 typedef typename _Get_const_void_pointer_type<_Alloc>::type
  const_void_pointer;

 typedef typename _Get_size_type<_Alloc>::type size_type;
 typedef typename _Get_difference_type<_Alloc>::type difference_type;

 typedef typename _Get_propagate_on_container_copy<_Alloc>::type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move<_Alloc>::type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap<_Alloc>::type
  propagate_on_container_swap;
 typedef typename _Get_is_always_equal<_Alloc>::type
  is_always_equal;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Alloc_construct::_Fn(0, _Al, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Alloc_destroy::_Fn(0, _Al, _Ptr);
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Alloc_max_size::_Fn(0, _Al));
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Alloc_select::_Fn(0, _Al));
  }
 };


template<class _Ty>
 class allocator
 {
public:
 static_assert(!is_const<_Ty>::value,
  "The C++ Standard forbids containers of const elements "
  "because allocator<const T> is ill-formed.");

 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;

 typedef value_type& reference;
 typedef const value_type& const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef true_type propagate_on_container_move_assignment;
 typedef true_type is_always_equal;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const noexcept
  {
  return (::std:: addressof(_Val));
  }

 allocator() noexcept
  {
  }

 allocator(const allocator<_Ty>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Deallocate(_Ptr, _Count);
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (_Allocate(_Count, (pointer)0));
  }

 __declspec(allocator) pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 template<class _Objty,
  class... _Types>
  void construct(_Objty *_Ptr, _Types&&... _Args)
  {
  ::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  void destroy(_Uty *_Ptr)
  {
  _Ptr->~_Uty();
  }

 size_t max_size() const noexcept
  {
  return ((size_t)(-1) / sizeof (_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 typedef void value_type;

 typedef void *pointer;
 typedef const void *const_pointer;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() noexcept
  {
  }

 allocator(const allocator<void>&) noexcept
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) noexcept
  {
  }

 template<class _Other>
  allocator<void>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) noexcept
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) noexcept
 {
 return (false);
 }


template<class _Ty>
 struct allocator_traits<allocator<_Ty> >
 {
 typedef allocator<_Ty> _Alloc;

 typedef _Alloc allocator_type;
 typedef _Ty value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef true_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;
 typedef true_type is_always_equal;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other> >;

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc& _Al, _Objty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  static void destroy(_Alloc& _Al, _Uty *_Ptr)
  {
  _Al.destroy(_Ptr);
  }

 static size_type max_size(const _Alloc& _Al) noexcept
  {
  return (_Al.max_size());
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Alloc _Mybase;
 typedef allocator_traits<_Alloc> _Mytraits;

 typedef typename _Mytraits::value_type value_type;

 typedef typename _Mytraits::pointer pointer;
 typedef typename _Mytraits::const_pointer const_pointer;
 typedef typename _Mytraits::void_pointer void_pointer;
 typedef typename _Mytraits::const_void_pointer const_void_pointer;

 typedef typename _If<is_void<value_type>::value,
  int, value_type>::type& reference;
 typedef typename _If<is_void<const value_type>::value,
  const int, const value_type>::type& const_reference;

 typedef typename _Mytraits::size_type size_type;
 typedef typename _Mytraits::difference_type difference_type;

 typedef typename _Mytraits::propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits::propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits::propagate_on_container_swap
  propagate_on_container_swap;
 typedef typename _Mytraits::is_always_equal
  is_always_equal;

 _Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
  {
  return (_Mytraits::select_on_container_copy_construction(*this));
  }

 template<class _Other>
  struct rebind
  {
  typedef typename _Mytraits::template rebind_alloc<_Other>
   _Other_alloc;
  typedef _Wrap_alloc<_Other_alloc> other;
  };

 pointer address(reference _Val) const
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const
  {
  return (::std:: addressof(_Val));
  }

 _Wrap_alloc() noexcept
  : _Mybase()
  {
  }

 _Wrap_alloc(const _Mybase& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc(const _Wrap_alloc& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Wrap_alloc(const _Other& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Wrap_alloc(_Other& _Right) noexcept
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc& operator=(const _Mybase& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 _Wrap_alloc& operator=(const _Wrap_alloc& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 template<class _Other>
  _Wrap_alloc& operator=(const _Other& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 __declspec(allocator) pointer allocate(size_type _Count)
  {
  return (_Mybase::allocate(_Count));
  }

 __declspec(allocator) pointer allocate(size_type _Count,
  const_void_pointer _Hint, _Nil = _Nil())
  {
  return (_Mytraits::allocate(*this, _Count, _Hint));
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Mybase::deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  void construct(_Ty *_Ptr,
   _Types&&... _Args)
  {
  _Mytraits::construct(*this, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  void destroy(_Ty *_Ptr)
  {
  _Mytraits::destroy(*this, _Ptr);
  }

 size_type max_size(_Nil = _Nil()) const noexcept
  {
  return (_Mytraits::max_size(*this));
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (static_cast<const _Ty&>(_Left)
  == static_cast<const _Other&>(_Right));
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
 {
 _Left = _Right;
 }

template<class _Alty> inline
 void _Pocca(_Alty&, const _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_copy_assignment _Tag;
 _Pocca(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Left = ::std:: move(_Right);
 }

template<class _Alty> inline
 void _Pocma(_Alty&, _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_move_assignment _Tag;
 _Pocma(_Left, _Right, _Tag);
 }


template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
 {
 _Swap_adl(_Left, _Right);
 }

template<class _Alty> inline
 void _Pocs(_Alty&, _Alty&, false_type) noexcept
 {
 }

template<class _Alty> inline
 void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
 {
 typename _Alty::propagate_on_container_swap _Tag;
 _Pocs(_Left, _Right, _Tag);
 }
}





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic0.h" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
# 48 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic0.h" 3
typedef long _Atomic_flag_t;






inline _Uint4_t _Atomic_load_4(volatile _Uint4_t *, memory_order);
inline int _Atomic_compare_exchange_weak_4(
 volatile _Uint4_t *, _Uint4_t *, _Uint4_t, memory_order, memory_order);
inline _Uint4_t _Atomic_fetch_add_4(
 volatile _Uint4_t *, _Uint4_t, memory_order);
inline _Uint4_t _Atomic_fetch_sub_4(
 volatile _Uint4_t *, _Uint4_t, memory_order);

typedef _Atomic_integral_t _Atomic_counter_t;


inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
 _Atomic_integral_t _Value)
 {
 _Counter = _Value;
 }

inline _Atomic_integral_t _Inc_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_fetch_add_4(&_Counter, 1, _Order) + 1);
 }

inline _Atomic_integral_t _Inc_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Inc_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Dec_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_fetch_sub_4(&_Counter, 1, _Order) - 1);
 }

inline _Atomic_integral_t _Dec_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Dec_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Load_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_load_4(&_Counter, _Order));
 }

inline _Atomic_integral_t _Load_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Load_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Compare_increment_atomic_counter_explicit(
 _Atomic_counter_t& _Counter,
 _Atomic_integral_t _Expected,
 memory_order _Order)
 {
 return (_Atomic_compare_exchange_weak_4(
  &_Counter, &_Expected, _Expected + 1,
  _Order, _Order));
 }

inline _Atomic_integral_t _Compare_increment_atomic_counter(
 _Atomic_counter_t& _Counter, _Atomic_integral_t _Expected)
 {
 return (_Compare_increment_atomic_counter_explicit(
  _Counter, _Expected, memory_order_seq_cst));
 }
# 162 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xatomic0.h" 3
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}

#pragma warning(pop)
#pragma pack(pop)
# 1014 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 1 3
# 18 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 18 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 1 3
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 2 3
# 21 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
#pragma pack(push, 8)
# 21 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
 extern "C" {
# 31 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
    typedef struct __JUMP_BUFFER
    {
        unsigned long Ebp;
        unsigned long Ebx;
        unsigned long Edi;
        unsigned long Esi;
        unsigned long Esp;
        unsigned long Eip;
        unsigned long Registration;
        unsigned long TryLevel;
        unsigned long Cookie;
        unsigned long UnwindFunc;
        unsigned long UnwindData[6];
    } _JUMP_BUFFER;
# 145 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
    typedef int jmp_buf[16];
# 157 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
int __cdecl _setjmp(
          jmp_buf _Buf
    );


#pragma warning(push)
#pragma warning(disable: 4987)
 __declspec(noreturn) void __cdecl longjmp(
             jmp_buf _Buf,
             int _Value
        ) throw(...);
#pragma warning(pop)








}
# 177 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\setjmp.h" 3
#pragma pack(pop)
# 19 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 1 3
# 28 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\wmmintrin.h" 1 3
# 31 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\wmmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 1 3
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 1 3
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 1 3
# 25 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 1 3
# 34 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 1 3
# 42 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 1 3
# 46 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mmintrin.h" 1 3
# 29 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mmintrin.h" 3
extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;


void _m_empty(void);
__m64 _m_from_int(int _I);
int _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);
# 185 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mmintrin.h" 3
};
# 46 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 2 3
# 65 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
# 188 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);
# 290 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
# 388 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpi16_ps(__m64 _A)
{
  __m128 _Tmp;
  __m64 _Ext_val = _m_pcmpgtw(_mm_setzero_si64(), _A);

  _Tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(_A, _Ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(_Tmp, _Tmp),
                        _m_punpcklwd(_A, _Ext_val)));
}
# 407 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpu16_ps(__m64 _A)
{
  __m128 _Tmp;
  __m64 _Ext_val = _mm_setzero_si64();

  _Tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(_A, _Ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(_Tmp, _Tmp),
                        _m_punpcklwd(_A, _Ext_val)));
}
# 426 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m64 _mm_cvtps_pi16(__m128 _A)
{
  return _m_packssdw(_mm_cvt_ps2pi(_A),
                        _mm_cvt_ps2pi(_mm_movehl_ps(_A, _A)));
}
# 441 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpi8_ps(__m64 _A)
{
  __m64 _Ext_val = _m_pcmpgtb(_mm_setzero_si64(), _A);

  return _mm_cvtpi16_ps(_m_punpcklbw(_A, _Ext_val));
}
# 458 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpu8_ps(__m64 _A)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(_A, _mm_setzero_si64()));
}
# 472 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m64 _mm_cvtps_pi8(__m128 _A)
{
  return _m_packsswb(_mm_cvtps_pi16(_A), _mm_setzero_si64());
}
# 487 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmmintrin.h" 3
__inline __m128 _mm_cvtpi32x2_ps(__m64 _A, __m64 _B)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), _A),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), _B));
}



};
# 42 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 2 3


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
# 69 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);
# 418 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\emmintrin.h" 3
};
# 34 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 2 3
# 58 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\pmmintrin.h" 3
extern "C" {







extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


};
# 25 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 2 3
# 35 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
extern "C" {
# 45 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);

    extern __m64 _mm_hadd_pi16 (__m64, __m64);
    extern __m64 _mm_hadd_pi32 (__m64, __m64);
    extern __m64 _mm_hadds_pi16 (__m64, __m64);
# 61 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);

    extern __m64 _mm_hsub_pi16 (__m64, __m64);
    extern __m64 _mm_hsub_pi32 (__m64, __m64);
    extern __m64 _mm_hsubs_pi16 (__m64, __m64);
# 78 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tmmintrin.h" 3
    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);

    extern __m64 _mm_maddubs_pi16 (__m64, __m64);




    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);

    extern __m64 _mm_mulhrs_pi16 (__m64, __m64);




    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);

    extern __m64 _mm_shuffle_pi8 (__m64, __m64);




    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);

    extern __m64 _mm_sign_pi8 (__m64, __m64);
    extern __m64 _mm_sign_pi16 (__m64, __m64);
    extern __m64 _mm_sign_pi32 (__m64, __m64);




    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);

    extern __m64 _mm_alignr_pi8 (__m64, __m64, int);




    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);

    extern __m64 _mm_abs_pi8 (__m64);
    extern __m64 _mm_abs_pi16 (__m64);
    extern __m64 _mm_abs_pi32 (__m64);


};
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 2 3
# 83 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);




        extern __m128 _mm_blend_ps (__m128, __m128, const int );
        extern __m128 _mm_blendv_ps(__m128, __m128, __m128 );




        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );




        extern __m128 _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );




        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);



        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);




        extern __m128i _mm_mullo_epi32(__m128i, __m128i);




        extern __m128i _mm_mul_epi32(__m128i, __m128i);




        extern int _mm_testz_si128(__m128i , __m128i );




        extern int _mm_testc_si128(__m128i , __m128i );





        extern int _mm_testnzc_si128(__m128i , __m128i );







        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );
# 170 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
        extern int _mm_extract_ps(__m128 , const int );
# 188 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );







        extern int _mm_extract_epi8 (__m128i , const int );
        extern int _mm_extract_epi32(__m128i , const int );
# 207 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\smmintrin.h" 3
        extern __m128i _mm_minpos_epu16(__m128i);



        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );



        extern __m128 _mm_round_ps(__m128 , int );
        extern __m128 _mm_round_ss(__m128 , __m128 , int );



        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);



        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);





        extern __m128i _mm_packus_epi32(__m128i, __m128i);





        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );





        extern __m128i _mm_stream_load_si128(__m128i*);


};
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 2 3




extern "C" {
# 83 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 3
    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int _mm_cmpistrz (__m128i , __m128i , const int );
    extern int _mm_cmpistrc (__m128i , __m128i , const int );
    extern int _mm_cmpistrs (__m128i , __m128i , const int );
    extern int _mm_cmpistro (__m128i , __m128i , const int );
    extern int _mm_cmpistra (__m128i , __m128i , const int );

    extern int _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );
# 126 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\nmmintrin.h" 3
    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );






};
# 31 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\wmmintrin.h" 2 3




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



};
# 28 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 2 3



extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
# 106 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);
# 116 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_add_ps(__m256, __m256);
# 129 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
# 142 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);
# 151 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);
# 160 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_and_ps(__m256, __m256);
# 169 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
# 178 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);
# 192 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
# 206 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
# 216 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
# 226 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
# 235 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);
# 244 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_div_ps(__m256, __m256);
# 259 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
# 268 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
# 277 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);
# 286 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
# 295 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);
# 304 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);
# 313 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_max_ps(__m256, __m256);
# 322 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);
# 331 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_min_ps(__m256, __m256);
# 341 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
# 351 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);
# 360 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);
# 369 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_or_ps(__m256, __m256);
# 381 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
# 394 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
# 403 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
# 413 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);
# 422 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
# 431 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);
# 447 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
# 464 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
# 478 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);
# 491 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);
# 500 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);
# 509 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i);
# 519 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d);
# 528 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvtps_epi32(__m256);
# 538 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_cvtps_pd(__m128);
# 551 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);
# 560 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);
# 573 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
# 608 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
# 619 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute_ps(__m256, int);
extern __m128 __cdecl _mm_permute_ps(__m128, int);
# 630 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
# 641 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);
# 651 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
# 662 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_broadcast_ss(float const *);
extern __m128 __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);
# 690 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
# 701 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_load_pd(double const *);
extern void __cdecl _mm256_store_pd(double *, __m256d);
# 711 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_load_ps(float const *);
extern void __cdecl _mm256_store_ps(float *, __m256);
# 721 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void __cdecl _mm256_storeu_pd(double *, __m256d);
# 731 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_loadu_ps(float const *);
extern void __cdecl _mm256_storeu_ps(float *, __m256);
# 741 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void __cdecl _mm256_store_si256(__m256i *, __m256i);
# 751 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
# 824 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
# 847 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128 __cdecl _mm_maskload_ps(float const *, __m128i);
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256 __cdecl _mm256_movehdup_ps(__m256);







extern __m256 __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);
# 884 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void __cdecl _mm256_stream_si256(__m256i *, __m256i);
# 901 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _mm256_stream_pd(double *, __m256d);
# 910 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _mm256_stream_ps(float *, __m256);
# 920 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rcp_ps(__m256);
# 931 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_rsqrt_ps(__m256);
# 940 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_sqrt_pd(__m256d);
# 949 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_sqrt_ps(__m256);
# 962 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_round_pd(__m256d, int);
# 977 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256 __cdecl _mm256_round_ps(__m256, int);
# 987 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
# 1021 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
# 1044 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int __cdecl _mm_testz_pd(__m128d, __m128d);
extern int __cdecl _mm_testc_pd(__m128d, __m128d);
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d);
# 1062 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_testz_ps(__m256, __m256);
extern int __cdecl _mm256_testc_ps(__m256, __m256);
extern int __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int __cdecl _mm_testz_ps(__m128, __m128);
extern int __cdecl _mm_testc_ps(__m128, __m128);
extern int __cdecl _mm_testnzc_ps(__m128, __m128);
# 1076 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_pd(__m256d);
# 1085 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);
# 1126 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128 __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256 __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128 __cdecl _mm_cvtph_ps(__m128i);
extern __m256 __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);
# 1207 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);
# 1227 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _xsaveopt(void *, unsigned __int64);
# 1236 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _xsavec(void *, unsigned __int64);
# 1246 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _xrstor(void const *, unsigned __int64);
# 1256 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _xsaves(void *, unsigned __int64);
# 1266 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _xrstors(void const *, unsigned __int64);
# 1275 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _fxsave(void *);
# 1284 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _fxrstor(void const *);
# 1295 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);
# 1322 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128 __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256 __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i );

extern void __cdecl _mm_maskstore_epi32(int * ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i ,
                                        __m128i );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i );

extern void __cdecl _mm256_maskstore_epi32(int * ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i ,
                                           __m256i );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d ,
                                                double const * ,
                                                __m128i ,
                                                __m256d ,
                                                const int );
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256 ,
                                                float const * ,
                                                __m256i ,
                                                __m256 ,
                                                const int );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d ,
                                                double const * ,
                                                __m256i ,
                                                __m256d ,
                                                const int );
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128 ,
                                                float const * ,
                                                __m256i ,
                                                __m128 ,
                                                const int );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m128i ,
                                                   __m256i ,
                                                   const int );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m128i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i ,
                                           const int );
extern __m256 __cdecl _mm256_i32gather_ps(float const * ,
                                           __m256i ,
                                           const int );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i ,
                                           const int );
extern __m128 __cdecl _mm256_i64gather_ps(float const * ,
                                           __m256i ,
                                           const int );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i32gather_ps(float const * ,
                                        __m128i ,
                                        const int );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i64gather_ps(float const * ,
                                        __m128i ,
                                        const int );

extern __m256i __cdecl _mm256_i32gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i ,
                                              const int );
extern __m128i __cdecl _mm256_i64gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i ,
                                              const int );

extern __m128i __cdecl _mm_i32gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );





extern unsigned int _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int _blsi_u32(unsigned int);
extern unsigned int _blsmsk_u32(unsigned int);
extern unsigned int _blsr_u32(unsigned int);
extern unsigned int _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int _sarx_i32(int ,
                                  unsigned int );
extern unsigned int _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _shrx_u32(unsigned int ,
                                          unsigned int );
# 1846 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned int _lzcnt_u32(unsigned int);
# 1858 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned int _tzcnt_u32(unsigned int);
# 1868 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);
# 1932 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned int __cdecl _xbegin(void);
extern void __cdecl _xend(void);
extern void __cdecl _xabort(const unsigned int);
extern unsigned char __cdecl _xtest(void);
# 1944 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);
extern int __cdecl _rdseed64_step(unsigned __int64 *);
# 1957 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );




extern __m128i _mm_sha1rnds4_epu32(__m128i, __m128i, const int);
extern __m128i _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);
extern __m128i _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i _mm_sha256msg2_epu32(__m128i, __m128i);
# 1983 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\immintrin.h" 3
extern void * _bnd_set_ptr_bounds(const void *, size_t);
extern void * _bnd_init_ptr_bounds(const void *);
extern void * _bnd_copy_ptr_bounds(const void *, const void *);
extern void _bnd_chk_ptr_bounds(const void *, size_t);
extern void _bnd_chk_ptr_lbounds(const void *);
extern void _bnd_chk_ptr_ubounds(const void *);
extern void _bnd_store_ptr_bounds(const void **, const void *);
extern void * _bnd_load_ptr_bounds(const void **, const void *);
extern const void * _bnd_get_ptr_lbound(const void *);
extern const void * _bnd_get_ptr_ubound(const void *);
extern void * _bnd_narrow_ptr_bounds(const void *, const void *, size_t);


};
# 24 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 1 3
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
extern "C" {
# 127 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
# 226 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);






unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);
# 278 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);
# 301 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ammintrin.h" 3
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


};
# 25 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3




# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mm3dnow.h" 1 3
# 30 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mm3dnow.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 30 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\mm3dnow.h" 2 3





extern "C" {




void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


};
# 29 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 2 3
# 44 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
extern "C" {
# 129 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);


unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
# 155 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long _InterlockedAddLargeStatistic(__int64 volatile * _Addend, long _Value);



long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);
# 170 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
char _InterlockedAnd8(char volatile * _Value, char _Mask);
# 179 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);






short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);




__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);




char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);
# 209 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long __cdecl _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);
# 222 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long __cdecl _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);
# 272 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);
# 283 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
char _InterlockedOr8(char volatile * _Value, char _Mask);
# 292 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);
# 303 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
char _InterlockedXor8(char volatile * _Value, char _Mask);
# 320 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);






void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);
# 348 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);

unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);
# 374 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
# 389 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);

void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);

void __movsw(unsigned short *, unsigned short const *, size_t);

void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);




unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);

unsigned long __readcr0(void);

unsigned long __readcr2(void);

unsigned long __readcr3(void);

unsigned long __readcr4(void);

unsigned long __readcr8(void);

unsigned int __readdr(unsigned int);

unsigned int __readeflags(void);
unsigned char __readfsbyte(unsigned long);
unsigned long __readfsdword(unsigned long);
unsigned __int64 __readfsqword(unsigned long);
unsigned short __readfsword(unsigned long);




unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);



void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);

void __vmx_off(void);




void __vmx_vmptrst(unsigned __int64 *);



void __wbinvd(void);



void __writecr0(unsigned int);

void __writecr3(unsigned int);

void __writecr4(unsigned int);

void __writecr8(unsigned int);

void __writedr(unsigned int, unsigned int);

void __writeeflags(unsigned int);
void __writefsbyte(unsigned long, unsigned char);
void __writefsdword(unsigned long, unsigned long);
void __writefsqword(unsigned long, unsigned __int64);
void __writefsword(unsigned long, unsigned short);




void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);

unsigned char _bittestandcomplement(long *, long);

unsigned char _bittestandreset(long *, long);

unsigned char _bittestandset(long *, long);

unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64);
unsigned long __cdecl _byteswap_ulong( unsigned long);
unsigned short __cdecl _byteswap_ushort( unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);







unsigned char _interlockedbittestandset(long volatile *, long);
# 547 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\intrin.h" 3
unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64, __m64);
__m64 _m_packsswb(__m64, __m64);
__m64 _m_packuswb(__m64, __m64);
__m64 _m_paddb(__m64, __m64);
__m64 _m_paddd(__m64, __m64);
__m64 _m_paddsb(__m64, __m64);
__m64 _m_paddsw(__m64, __m64);
__m64 _m_paddusb(__m64, __m64);
__m64 _m_paddusw(__m64, __m64);
__m64 _m_paddw(__m64, __m64);
__m64 _m_pand(__m64, __m64);
__m64 _m_pandn(__m64, __m64);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64, __m64);
__m64 _m_pcmpeqd(__m64, __m64);
__m64 _m_pcmpeqw(__m64, __m64);
__m64 _m_pcmpgtb(__m64, __m64);
__m64 _m_pcmpgtd(__m64, __m64);
__m64 _m_pcmpgtw(__m64, __m64);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64, __m64);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64, __m64);
__m64 _m_pmullw(__m64, __m64);
__m64 _m_por(__m64, __m64);
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64, __m64);
__m64 _m_pslldi(__m64, int);
__m64 _m_psllq(__m64, __m64);
__m64 _m_psllqi(__m64, int);
__m64 _m_psllw(__m64, __m64);
__m64 _m_psllwi(__m64, int);
__m64 _m_psrad(__m64, __m64);
__m64 _m_psradi(__m64, int);
__m64 _m_psraw(__m64, __m64);
__m64 _m_psrawi(__m64, int);
__m64 _m_psrld(__m64, __m64);
__m64 _m_psrldi(__m64, int);
__m64 _m_psrlq(__m64, __m64);
__m64 _m_psrlqi(__m64, int);
__m64 _m_psrlw(__m64, __m64);
__m64 _m_psrlwi(__m64, int);
__m64 _m_psubb(__m64, __m64);
__m64 _m_psubd(__m64, __m64);
__m64 _m_psubsb(__m64, __m64);
__m64 _m_psubsw(__m64, __m64);
__m64 _m_psubusb(__m64, __m64);
__m64 _m_psubusw(__m64, __m64);
__m64 _m_psubw(__m64, __m64);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64, __m64);
__m64 _m_punpckhdq(__m64, __m64);
__m64 _m_punpckhwd(__m64, __m64);
__m64 _m_punpcklbw(__m64, __m64);
__m64 _m_punpckldq(__m64, __m64);
__m64 _m_punpcklwd(__m64, __m64);
__m64 _m_pxor(__m64, __m64);
float _m_to_float(__m64);
int _m_to_int(__m64);
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);
__m64 _mm_abs_pi16(__m64);
__m64 _mm_abs_pi32(__m64);
__m64 _mm_abs_pi8(__m64);
__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);
__m64 _mm_add_si64(__m64, __m64);
__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);
__m64 _mm_alignr_pi8(__m64, __m64, int);
__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);

unsigned int _mm_crc32_u8(unsigned int, unsigned char);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
__m64 _mm_cvtpd_pi32(__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);


__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);


__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);






__m128d _mm_cvtss_sd(__m128d, __m128);


__m64 _mm_cvtt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);




__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);

int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);
__m64 _mm_hadd_pi16(__m64, __m64);
__m64 _mm_hadd_pi32(__m64, __m64);
__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);
__m64 _mm_hadds_pi16(__m64, __m64);
__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);
__m64 _mm_hsub_pi16(__m64, __m64);
__m64 _mm_hsub_pi32(__m64, __m64);
__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);
__m64 _mm_hsubs_pi16(__m64, __m64);
__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);

__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);
__m64 _mm_maddubs_pi16(__m64, __m64);
void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);
__m64 _mm_movepi64_pi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);
__m64 _mm_mul_su32(__m64, __m64);
__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);
__m64 _mm_mulhrs_pi16(__m64, __m64);
__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
void _mm_pcommit(void);
int _mm_popcnt_u32(unsigned int);

void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi64(__m64);
__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi8(char);
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);
__m128i _mm_set_epi64(__m64, __m64);
__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);
__m64 _mm_set_pi16(short, short, short, short);
__m64 _mm_set_pi32(int, int);
__m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);
__m128i _mm_setr_epi64(__m64, __m64);
__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);
__m64 _mm_setr_pi16(short, short, short, short);
__m64 _mm_setr_pi32(int, int);
__m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);
__m64 _mm_shuffle_pi8(__m64, __m64);
__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);
__m64 _mm_sign_pi16(__m64, __m64);
__m64 _mm_sign_pi32(__m64, __m64);
__m64 _mm_sign_pi8(__m64, __m64);
__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(__m128i *);
void _mm_stream_pd(double *, __m128d);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);

void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);
__m64 _mm_sub_si64(__m64, __m64);
__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);

unsigned int __cdecl _rotl( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);


void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);


void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
# 1015 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 2 3
# 1032 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory0" 3
#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;


template<class _Mystr>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Mystr::value_type,
   typename _Mystr::difference_type,
   typename _Mystr::const_pointer,
   typename _Mystr::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Mystr> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::const_pointer pointer;
 typedef typename _Mystr::const_reference reference;

 _String_const_iterator()
  {
  this->_Ptr = 0;
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  {
  this->_Adopt(_Pstring);
  this->_Ptr = _Parg;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
   {
   _Debug_message(L"string iterator not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 75);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 76, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 76, 0); };
   }
# 87 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
                                    ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
   {
   _Debug_message(L"string iterator not incrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 105);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 106, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 106, 0); };
   }
# 116 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
   {
   _Debug_message(L"string iterator not decrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 134);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 135, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 135, 0); };
   }







  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
   {
   _Debug_message(L"string iterator + offset out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 164);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 165, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 165, 0); };
   }
# 176 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"string iterators incompatible", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 247);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 248, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 248, 0); };
   }
  }
# 265 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
 pointer _Ptr;
 };

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>
  _Rechecked(_String_const_iterator<_Mystr>& _Iter,
   typename _String_const_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>
   ::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 typedef _String_iterator<_Mystr> _Myiter;
 typedef _String_const_iterator<_Mystr> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>
  _Rechecked(_String_iterator<_Mystr>& _Iter,
   typename _String_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>
   ::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _String_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _String_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _String_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 typedef _String_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_Myt> iterator;
 typedef _String_const_iterator<_Myt> const_iterator;

 _String_val()
  {
  _Mysize = 0;
  _Myres = 0;
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0};

 value_type *_Myptr()
  {
  return (this->_BUF_SIZE <= this->_Myres
   ? ::std:: addressof(*this->_Bx._Ptr)
   : this->_Bx._Buf);
  }

 const value_type *_Myptr() const
  {
  return (this->_BUF_SIZE <= this->_Myres
   ? ::std:: addressof(*this->_Bx._Ptr)
   : this->_Bx._Buf);
  }

 union _Bxty
  {
  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<class _Alloc_types>
 class _String_alloc
 {
public:
 typedef _String_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_String_val<_Val_types> > iterator;
 typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;

 enum
  {
  _BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
  };

 enum
  {
  _ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
  };

 value_type *_Myptr()
  {
  return (_Get_data()._Myptr());
  }

 const value_type *_Myptr() const
  {
  return (_Get_data()._Myptr());
  }
# 596 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring" 3
 _String_alloc(const _Alloc& _Al = _Alloc())
  : _Mypair(_One_then_variadic_args_t(), _Al)
  {
  _Alloc_proxy();
  }

 _String_alloc(_Alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(), ::std:: move(_Al))
  {
  _Alloc_proxy();
  }

 ~_String_alloc() noexcept
  {
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Pocs(_Getal(), _Right._Getal());
  _Swap_adl(_Myproxy(), _Right._Myproxy());
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Alproxy.allocate(1);
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Myproxy(), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _String_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _String_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 typedef typename _String_val<_Val_types>::_Bxty _Bxty;

 _Bxty& _Bx() noexcept
  {
  return (_Get_data()._Bx);
  }

 const _Bxty& _Bx() const noexcept
  {
  return (_Get_data()._Bx);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

 size_type& _Myres() noexcept
  {
  return (_Get_data()._Myres);
  }

 const size_type& _Myres() const noexcept
  {
  return (_Get_data()._Myres);
  }

private:
 _Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_string
  : public _String_alloc<_String_base_types<_Elem, _Alloc> >
 {
public:
 typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
 typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string() noexcept
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 856);
  _Tidy();
  _Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, forward_iterator_tag)
  {
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);
  reserve(_Count);
  _Construct(_First, _Last, input_iterator_tag());
  }

 void _Construct(_Elem *_First,
  _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 void _Construct(const _Elem *_First,
  const _Elem *_Last, random_access_iterator_tag)
  {
  if (_First != _Last)
   assign(_First, _Last - _First);
  }

 basic_string(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Tidy();
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 basic_string(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (this->_Getal() != _Right._Getal())
   assign(_Right.begin(), _Right.end());
  else
   _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy(true);

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   if (this->_Getal() != _Right._Getal())
    assign(_Right.begin(), _Right.end());
   else
    _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 _Myt& assign(_Myt&& _Right) noexcept
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres())
   *this = _Right;
  else
   {
   _Tidy(true);
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (_Right._Myres() < this->_BUF_SIZE)
   _Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
    _Right._Mysize() + 1);
  else
   {
   this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
   _Right._Bx()._Ptr = pointer();
   }
  this->_Mysize() = _Right._Mysize();
  this->_Myres() = _Right._Myres();
  _Right._Tidy();
  }

 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }

 ~basic_string() noexcept
  {
  _Tidy(true);
  }

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy(true);
    this->_Copy_alloc(_Right._Getal());
    }

   assign(_Right);
   }
  return (*this);
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(),
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1079);
  if (_Inside(_Ptr))
   return (append(*this,
    _Ptr - this->_Myptr(), _Count));
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1097);
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
   {
   _Chassign(this->_Mysize(), _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  append(_Iter _First, _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count = npos)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Count < _Num)
   _Num = _Count;

  if (this == &_Right)
   erase((size_type)(_Roff + _Num)), erase(0, _Roff);
  else if (_Grow(_Num))
   {
   _Traits::copy(this->_Myptr(),
    _Right._Myptr() + _Roff, _Num);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1160);
  if (_Inside(_Ptr))
   return (assign(*this,
    _Ptr - this->_Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1175);
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  assign(_Iter _First, _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count = npos)
  {
  if (this->_Mysize() < _Off || _Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize() <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   if (this == &_Right)
    _Traits::move(this->_Myptr() + _Off,
     this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(this->_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1246);
  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - this->_Myptr(), _Count));
  if (this->_Mysize() < _Off)
   _Xran();
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1268);
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize() < _Off)
   _Xran();
  if (npos - this->_Mysize() <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize() - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Where - begin();
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  size_type _Off = _Where - begin();
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 _Myt& erase(size_type _Off = 0)
  {
  if (this->_Mysize() < _Off)
   _Xran();
  _Eos(_Off);
  return (*this);
  }

 _Myt& erase(size_type _Off, size_type _Count)
  {
  if (this->_Mysize() < _Off)
   _Xran();
  if (this->_Mysize() - _Off <= _Count)
   _Eos(_Off);
  else if (0 < _Count)
   {
   value_type *_Ptr = this->_Myptr() + _Off;
   size_type _Newsize = this->_Mysize() - _Count;
   _Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Where - begin();
  erase(_Count, 1);
  return (begin() + _Count);
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1369);
  size_type _Count = _First - begin();
  erase(_Count, _Last - _First);
  return (begin() + _Count);
  }

 void clear() noexcept
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff,
   size_type _Count = npos)
  {
  if (this->_Mysize() < _Off || _Right.size() < _Roff)
   _Xran();
  if (this->_Mysize() - _Off < _N0)
   _N0 = this->_Mysize() - _Off;
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();

  size_type _Nm = this->_Mysize() - _N0 - _Off;
  size_type _Newsize = this->_Mysize() + _Count - _N0;
  if (this->_Mysize() < _Newsize)
   _Grow(_Newsize);

  if (this != &_Right)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count <= _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + (_Roff + _Count - _N0),
    _Count);
   }
  else
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _N0);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off + _N0,
    this->_Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1451);
  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - this->_Myptr(),
    _Count));
  if (this->_Mysize() < _Off)
   _Xran();
  if (this->_Mysize() - _Off < _N0)
   _N0 = this->_Mysize() - _Off;
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize() + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1483);
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize() < _Off)
   _Xran();
  if (this->_Mysize() - _Off < _N0)
   _N0 = this->_Mysize() - _Off;
  if (npos - _Count <= this->_Mysize() - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize() - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize() + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(_First - begin(), _Last - _First, _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(_First - begin(), _Last - _First, _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(_First - begin(), _Last - _First, _Count, _Ch));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  replace(const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_First - begin(), _Last - _First);
  else
   replace(_First - begin(), _Last - _First,
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myptr(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myptr(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if ((size() | this->_ALLOC_MASK) < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 reference at(size_type _Off)
  {
  if (this->_Mysize() <= _Off)
   _Xran();
  return (this->_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  if (this->_Mysize() <= _Off)
   _Xran();
  return (this->_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {

  if (this->_Mysize() < _Off)
   _Debug_message(L"string subscript out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1681);





  return (this->_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {

  if (this->_Mysize() < _Off)
   _Debug_message(L"string subscript out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1694);





  return (this->_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  insert(end(), _Ch);
  }

 void pop_back()
  {
  erase(this->_Mysize() - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 const _Elem *c_str() const noexcept
  {
  return (this->_Myptr());
  }

 const _Elem *data() const noexcept
  {
  return (c_str());
  }

 size_type length() const noexcept
  {
  return (this->_Mysize());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  size_type _Num = this->_Getal().max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize())
   _Eos(_Newsize);
  else
   append(_Newsize - this->_Mysize(), _Ch);
  }

 size_type capacity() const noexcept
  {
  return (this->_Myres());
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
   {
   size_type _Size = this->_Mysize();
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const noexcept
  {
  return (this->_Mysize() == 0);
  }

 __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))

 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1797);
  if (this->_Mysize() < _Off)
   _Xran();
  if (this->_Mysize() - _Off < _Count)
   _Count = this->_Mysize() - _Off;
  _Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {
  _Debug_pointer_if(_Count != 0, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1809);
  if (this->_Mysize() < _Off)
   _Xran();
  if (this->_Mysize() - _Off < _Count)
   _Count = this->_Mysize() - _Off;
  _Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_bx(_Myt& _Right)
  {
  if (this->_BUF_SIZE <= this->_Myres())
   if (this->_BUF_SIZE <= _Right._Myres())
    _Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
   else
    {
    pointer _Ptr = this->_Bx()._Ptr;
    this->_Getal().destroy(&this->_Bx()._Ptr);
    _Traits::copy(this->_Bx()._Buf,
     _Right._Bx()._Buf, _Right._Mysize() + 1);
    this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
    }
  else
   if (_Right._Myres() < this->_BUF_SIZE)
    ::std:: swap(this->_Bx()._Buf, _Right._Bx()._Buf);
   else
    {
    pointer _Ptr = _Right._Bx()._Ptr;
    this->_Getal().destroy(&_Right._Bx()._Ptr);
    _Traits::copy(_Right._Bx()._Buf,
     this->_Bx()._Buf, this->_Mysize() + 1);
    this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
    }
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   ::std:: swap(this->_Myres(), _Right._Myres());
   }

  else if (_Alty::propagate_on_container_swap::value)
   {

   this->_Swap_alloc(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Bx(), _Right._Bx());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   ::std:: swap(this->_Myres(), _Right._Myres());
   }

  else
   {
   _Myt _Tmp = *this;

   *this = _Right;
   _Right = _Tmp;
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const noexcept
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1885);
  if (_Count == 0 && _Off <= this->_Mysize())
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1905);
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const noexcept
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1922);
  if (_Count == 0)
   return (_Off < this->_Mysize() ? _Off
    : this->_Mysize());
  if (_Count <= this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr() +
    (_Off < this->_Mysize() - _Count ? _Off
     : this->_Mysize() - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1944);
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1962);
  if (0 < _Count && _Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1978);
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 1997);
  if (0 < _Count && 0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2015);
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const noexcept
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2035);
  if (_Off < this->_Mysize())
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2050);
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const noexcept
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2069);
  if (0 < this->_Mysize())
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2086);
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 int compare(const _Myt& _Right) const noexcept
  {
  return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
  }

 int compare(size_type _Off, size_type _N0,
  const _Myt& _Right) const
  {
  return (compare(_Off, _N0, _Right, 0, npos));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count = npos) const
  {
  if (_Right.size() < _Roff)
   _Xran();
  if (_Right._Mysize() - _Roff < _Count)
   _Count = _Right._Mysize() - _Roff;
  return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
  }

 int compare(const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2125);
  return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2131);
  return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {
  _Debug_pointer_if(_Count != 0, _Ptr, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xstring", 2138);
  if (this->_Mysize() < _Off)
   _Xran();
  if (this->_Mysize() - _Off < _N0)
   _N0 = this->_Mysize() - _Off;

  size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
   _N0 < _Count ? _N0 : _Count);
  return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
   : _N0 == _Count ? 0 : +1);
  }

 allocator_type get_allocator() const noexcept
  {
  return (this->_Getal());
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(this->_Myptr() + _Off), _Ch);
  else
   _Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres() / 2 <= _Newres / 3)
   ;
  else if (this->_Myres() <= max_size() - this->_Myres() / 2)
   _Newres = this->_Myres()
    + this->_Myres() / 2;
  else
   _Newres = max_size();

  _Elem *_Ptr;
  try {
   _Ptr = this->_Getal().allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Getal().allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Ptr, this->_Myptr(),
    _Oldlen);
  _Tidy(true);
  this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
  this->_Myres() = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  _Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres() < _Newsize)
   _Copy(_Newsize, this->_Mysize());
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == 0 || _Ptr < this->_Myptr()
   || this->_Myptr() + this->_Mysize() <= _Ptr)
   return (false);
  else
   return (true);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres())
   {
   pointer _Ptr = this->_Bx()._Ptr;
   this->_Getal().destroy(&this->_Bx()._Ptr);
   if (0 < _Newsize)
    _Traits::copy(this->_Bx()._Buf,
     ::std:: addressof(*_Ptr), _Newsize);
   this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
   }
  this->_Myres() = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
  size_type;
 return (::std:: move(_Right.insert((size_type)0, (size_type)1, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem *_Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 return (::std:: move(_Left.append(1, _Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc> >
 {
 typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
   _Keyval.size() * sizeof (_Elem)));
  }
 };

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
# 25 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
class logic_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 50 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 78 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 106 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 134 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 162 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class runtime_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 190 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 218 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 246 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 274 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\stdexcept" 3
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 1 3
# 23 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 3
#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4275)


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 3
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 2 3



#pragma pack(push, 8)







 struct __type_info_node;





    extern __type_info_node __type_info_root_node;




#pragma pack(push, 8)
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 3
 extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610)
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
         __std_type_info_data const* _Lhs,
         __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
         __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
            __std_type_info_data* _Data,
            __type_info_node* _RootNode
    );

}
# 58 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vcruntime_typeinfo.h" 3
#pragma pack(pop)



class type_info
{
public:

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const
    {



        return __std_type_info_name(&_Data, &__type_info_root_node);

    }

    char const* raw_name() const
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    mutable __std_type_info_data _Data;
};



namespace std {

using ::type_info;

class bad_cast
    : public exception
{
public:

    bad_cast()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message)
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int)
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message)
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int)
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message)
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int)
        : bad_typeid(_Message, 1)
    {
    }
};

}



#pragma pack(pop)
# 29 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 2 3
# 90 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\typeinfo" 3
#pragma pack(pop)
#pragma warning(pop)
# 9 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 1 3





# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
 extern "C" {
# 24 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isdigit( int _C);

               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl isspace( int _C);

               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);


                                  __declspec(dllimport) int __cdecl toupper( int _C);


                                  __declspec(dllimport) int __cdecl tolower( int _C);

                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
# 110 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
        __declspec(dllimport) int __cdecl _chvalidator( int _Ch, int _Mask);
# 144 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }


    __declspec(dllimport) int __cdecl _chvalidator_l( _locale_t, int _Ch, int _Mask);


    __inline int __cdecl _chvalidchk_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {

        return _chvalidator_l(_Locale, _C, _Mask);
# 170 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
    }




    __inline int __cdecl _ischartype_l(
                 int const _C,
                 int const _Mask,
                 _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }
# 234 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
}
# 234 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\ctype.h" 3
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 2 3

# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\locale.h" 1 3
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\locale.h" 3
#pragma pack(push, 8)
# 13 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\locale.h" 3
 extern "C" {
# 29 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\locale.h" 3
struct lconv
{
    char* decimal_point;
    char* thousands_sep;
    char* grouping;
    char* int_curr_symbol;
    char* currency_symbol;
    char* mon_decimal_point;
    char* mon_thousands_sep;
    char* mon_grouping;
    char* positive_sign;
    char* negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};
# 79 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\locale.h" 3
__declspec(dllimport) void __cdecl _lock_locales(void);
__declspec(dllimport) void __cdecl _unlock_locales(void);


__declspec(dllimport) int __cdecl _configthreadlocale(
         int _Flag
    );


__declspec(dllimport) char* __cdecl setlocale(
               int _Category,
               char const* _Locale
    );


__declspec(dllimport) struct lconv* __cdecl localeconv(void);


__declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


__declspec(dllimport) _locale_t __cdecl _create_locale(
           int _Category,
           char const* _Locale
    );

__declspec(dllimport) void __cdecl _free_locale(
             _locale_t _Locale
    );



__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
               int _Category,
               wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
           int _Category,
           wchar_t const* _Locale
    );



__declspec(dllimport) wchar_t** __cdecl ___lc_locale_name_func(void);
__declspec(dllimport) unsigned int __cdecl ___lc_codepage_func (void);
__declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);



}
# 130 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\locale.h" 3
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
# 56 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 3
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll(void);
__declspec(dllimport) _Ctypevec __cdecl _Getctype(void);
__declspec(dllimport) _Cvtvec __cdecl _Getcvt(void);
__declspec(dllimport) int __cdecl _Getdateorder(void);
# 93 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 3
__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *,
                                  char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
                                  char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
                                  char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}




extern "C" {
__declspec(dllimport) char *__cdecl _Getdays(void);
__declspec(dllimport) char *__cdecl _Getmonths(void);
__declspec(dllimport) void *__cdecl _Gettnames(void);
__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *,
      const struct tm *, void *);

__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);
__declspec(dllimport) void *__cdecl _W_Gettnames(void);
__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *,
      const struct tm *, void *);
}
# 156 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo.h" 3
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocinfo" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)

namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() noexcept
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() noexcept
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfacet" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() noexcept
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
# 12 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412 28197)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

struct __declspec(dllimport) _Crt_new_delete
 {

 void * __cdecl operator new(size_t _Size)
  {
  void * _Ptr = operator new(_Size, nothrow);
  if (!_Ptr)
   _Xbad_alloc();
  return (_Ptr);
  }

 void * __cdecl operator new(size_t _Size, const nothrow_t&) noexcept
  {
  return (_malloc_dbg(_Size > 0 ? _Size : 1, 2, "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 74));
  }

 void __cdecl operator delete(void * _Ptr) noexcept
  {
  :: free(_Ptr);
  }

 void __cdecl operator delete(void * _Ptr, const nothrow_t&) noexcept
  {
  operator delete(_Ptr);
  }

 void * __cdecl operator new(size_t, void *_Ptr) noexcept
  {
  return (_Ptr);
  }

 void __cdecl operator delete(void *, void *) noexcept
  {
  }

 };

class locale
 : public _Locbase<int>, public _Crt_new_delete
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base, public _Crt_new_delete
  {
 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Myrefs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   {
   _Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);
   }

  virtual ~facet() noexcept
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() noexcept
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = none;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   _Ptr->_Catmask = none;
   _Ptr->_Name = "*";
   }
  }

 locale(_Uninitialized)
  {
  }
# 323 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 3
 locale(const locale& _Right) noexcept
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() noexcept
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj;
     _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
     _Lobj._Addcats(_Loc._Ptr->_Catmask,
      _Loc.name().c_str());
     _Lobj._Addcats(_Other._Ptr->_Catmask,
      _Other.name().c_str());
     _Ptr->_Catmask = _Loc._Ptr->_Catmask
      | _Other._Ptr->_Catmask;
     _Ptr->_Name = _Lobj._Getname();
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  _Init();
  if (_Cat != none)
   {
   try {
    { _Locinfo _Lobj(_Cat, _Str.c_str());
     if (_Badname(_Lobj))
      _Bad = true;
     else
      {
      _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
      _Ptr->_Catmask = _Cat;
      _Ptr->_Name = _Str.c_str();
      }
    }
   } catch (...) {
   delete _Ptr->_Decref();
   throw;
   }
   }

  if (_Bad)
   {
   delete _Ptr->_Decref();
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Str, _Cat);
  }


 ~locale() noexcept
  {
  if (_Ptr != 0)
   delete _Ptr->_Decref();
  }

 locale& operator=(const locale& _Right) noexcept
  {
  if (_Ptr != _Right._Ptr)
   {
   delete _Ptr->_Decref();
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }


 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr0 = _Getgloballocale();
   return (_Id < _Ptr0->_Facetcount
    ? _Ptr0->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl
  classic();

 static __declspec(dllimport) locale __cdecl
  global(const locale&);

 static __declspec(dllimport) locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

 static __declspec(dllimport) _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static __declspec(dllimport) _Locimp *__cdecl
  _Getgloballocale();
 static __declspec(dllimport) void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };
# 535 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale" 3
template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {





 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }

 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;

 _Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),
  2, "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 723);

 if (!_Ptrdest)
  _Xbad_alloc();

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
  2, "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 756);

 if (!_Ptrdest)
  _Xbad_alloc();
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
  2, "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 796);

 if (!_Ptrdest)
  _Xbad_alloc();

 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const noexcept
  {
  return (do_always_noconv());
  }

 int max_length() const noexcept
  {
  return (do_max_length());
  }

 int encoding() const noexcept
  {
  return (do_encoding());
  }

                    ~codecvt_base() noexcept
  {
  }

protected:
 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (1);
  }

 virtual int do_encoding() const noexcept
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (is_same<_Byte, _Elem>::value);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;


enum _Codecvt_mode {
 _Consume_header = 4,
 _Generate_header = 2
 };


template<>
 class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
 typedef char16_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra, _Nskip;

   if (*_Pstate <= 1)
    ;
   else if (_By < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    {
    ++_Mid1;
    *_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
    *_Pstate = 1;
    continue;
    }

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   _Nskip = _Nextra < 3 ? 0 : 1;
   _First1 = _Mid1;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
    break;
   else
    for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);
   if (0 < _Nskip)
    _Ch <<= 6;

   if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
    return (_Mybase::error);
   else if (0xffff < _Ch)
    {
    unsigned short _Ch0 =
     (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

    *_Mid2++ = (_Elem)_Ch0;
    *_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
    continue;
    }

   if (_Nskip == 0)
    ;
   else if (_Mid1 == _Last1)
    {
    _Mid1 = _First1;
    break;
    }
   else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    _Ch |= _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned long _Ch;
   unsigned short _Ch1 = (unsigned short)*_Mid1;
   bool _Save = false;

   if (1 < *_Pstate)
    {
    if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
     return (_Mybase::error);
    _Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
    }
   else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
    {
    _Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
    _Save = true;
    }
   else
    _Ch = _Ch1;

   _Byte _By;
   int _Nextra;

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x10000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

   int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

   if (_Last2 - _Mid2 < _Nput)
    break;
   else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
    ;
   else if (_Last2 - _Mid2 < 3 + _Nput)
    break;
   else
    {
    *_Mid2++ = (_Byte)(unsigned char)0xef;
    *_Mid2++ = (_Byte)(unsigned char)0xbb;
    *_Mid2++ = (_Byte)(unsigned char)0xbf;
    }

   ++_Mid1;
   if (_Save || _Nextra < 3)
    {
    *_Mid2++ = _By;
    --_Nput;
    }
   for (; 0 < _Nput; --_Nput)
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);

   *_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid2 = _First2;

  return (1 < *_Pstate
   ? _Mybase::error : _Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  size_t _Wchars = 0;
  _Statype _Mystate = _State;

  for (; _Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & _Consume_header) != 0 ? 9
   : (_Mode & _Generate_header) != 0 ? 7
   : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
 typedef char32_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

                    codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra;

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1)
    break;
   else
    for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | (_By & 0x3f);

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   if (_Maxcode < _Ch)
    return (_Mybase::error);
   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   _Byte _By;
   int _Nextra;
   unsigned long _Ch = (unsigned long)*_Mid1;

   if (_Maxcode < _Ch)
    return (_Mybase::error);

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x00010000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else if (_Ch < 0x00200000)
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
   else if (_Ch < 0x04000000)
    _By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
   else
    _By = (_Byte)(0xfc | (_Ch >> 30 & 0x03)), _Nextra = 5;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;
    if ((_Mode & _Generate_header) == 0)
     ;
    else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
     return (_Mybase::partial);
    else
     {
     *_Mid2++ = (_Byte)(unsigned char)0xef;
     *_Mid2++ = (_Byte)(unsigned char)0xbb;
     *_Mid2++ = (_Byte)(unsigned char)0xbf;
     }
    }

   if (_Last2 - _Mid2 < 1 + _Nextra)
    break;

   ++_Mid1;
   for (*_Mid2++ = _By; 0 < _Nextra; )
    *_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
   }
  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid2 = _First2;
  return (_Mybase::ok);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  int _Wchars = 0;
  _Statype _Mystate = _State;

  for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (int)(_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? 9 : 6);
  }

 virtual int do_encoding() const noexcept
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? -1 : 0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1674);
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1675);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1710);
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1711);
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1747);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1772);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1908);
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1909);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1944);
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1945);
  _Mid1 = _First1, _Mid2 = _First2;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)5 <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     break;
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes;
     }
    }
  return (_Mid1 == _Last1 ? ok : partial);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 1981);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2006);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const noexcept
  {
  return (false);
  }

 virtual int do_max_length() const noexcept
  {
  return (5);
  }

 virtual int do_encoding() const noexcept
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() noexcept
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
  cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
  lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
  punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
  xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() noexcept
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2235);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2244);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2253);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2271);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2293);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2311);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2336);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2370);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2379);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2388);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const noexcept
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() noexcept
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() noexcept
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   :: free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] (void *)_Ctype._Table;

  :: free(_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2518);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2532);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2546);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2559);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2692);
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2699);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2708);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2722);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2736);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2758);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2780);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() noexcept
  {
  if (_Ctype._Delfl)
   :: free((void *)_Ctype._Table);

  :: free(_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2916);
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2924);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2933);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2947);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2961);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 2983);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocale", 3005);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cerrno" 1 3
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 2 3




#pragma pack(push,8)
#pragma warning(push, 3)
# 21 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 3
namespace std {


enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };

typedef errc _Errc;



enum class io_errc {
 stream = 1
 };

typedef io_errc _Io_errc;


template<class _Enum>
 struct is_error_code_enum
  : public false_type
 {
 };

template<>
 struct is_error_code_enum<_Io_errc>
  : public true_type
 {
 };


template<class _Enum>
 struct is_error_condition_enum
  : public false_type
 {
 };

template<>
 struct is_error_condition_enum<_Errc>
  : public true_type
 {
 };

class error_code;
class error_condition;
error_code make_error_code(_Errc) noexcept;
error_code make_error_code(_Io_errc) noexcept;
error_condition make_error_condition(_Errc) noexcept;
error_condition make_error_condition(_Io_errc) noexcept;


class error_category;

const error_category& generic_category() noexcept;
const error_category& iostream_category() noexcept;
const error_category& system_category() noexcept;

class error_category
 {
public:
                  error_category() noexcept
  {
  _Addr = reinterpret_cast<uintptr_t>(this);
  }

 virtual ~error_category() noexcept
  {
  }

 virtual const char *name() const noexcept = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition
  default_error_condition(int _Errval) const noexcept;

 virtual bool equivalent(int _Errval,
  const error_condition& _Cond) const noexcept;

 virtual bool equivalent(const error_code& _Code,
  int _Errval) const noexcept;

 bool operator==(const error_category& _Right) const noexcept
  {
  return (_Addr == _Right._Addr);
  }

 bool operator!=(const error_category& _Right) const noexcept
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const noexcept
  {
  return (_Addr < _Right._Addr);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;

protected:
 uintptr_t _Addr;

 enum : uintptr_t
  {
  _Future_addr = 1,
  _Generic_addr = 3,
  _Iostream_addr = 5,
  _System_addr = 7
  };
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code() noexcept
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_code_enum<_Enum>::value,
   void>::type>
  error_code(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const noexcept;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() noexcept
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) noexcept
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_condition_enum<_Enum>::value,
   void>::type>
  error_condition(_Enum _Errcode) noexcept
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) noexcept
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode) noexcept
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() noexcept
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const noexcept
  {
  return (_Myval);
  }

 const error_category& category() const noexcept
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const noexcept
  {
  return (value() != 0);
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


inline bool operator==(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }

inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() == _Right.category()
  && _Left.value() == _Right.value());
 }


inline bool operator!=(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (!(_Left == _Right));
 }


inline bool operator<(
 const error_code& _Left,
 const error_code& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }

inline bool operator<(
 const error_condition& _Left,
 const error_condition& _Right) noexcept
 {
 return (_Left.category() < _Right.category()
  || (_Left.category() == _Right.category()
   && _Left.value() < _Right.value()));
 }


inline error_condition
 error_category::default_error_condition(int _Errval) const noexcept
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(int _Errval,
  const error_condition& _Cond) const noexcept
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  int _Errval) const noexcept
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const noexcept
 {
 return (category().default_error_condition(value()));
 }


inline error_code make_error_code(_Errc _Errno) noexcept
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno) noexcept
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(_Errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno) noexcept
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
 {
 typedef error_code argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<int>()(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   _Message.append(": ");
  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const noexcept
  {
  return (_Mycode);
  }
# 572 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\system_error" 3
 };

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) int __cdecl _Winerror_map(int);
__declspec(dllimport) unsigned long __cdecl _Winerror_message(
 unsigned long _Message_id, char *_Narrow, unsigned long _Size);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category() noexcept
  {
  _Addr = _Generic_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  return (_Syserror_map(_Errcode));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category() noexcept
  {
  _Addr = _Iostream_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   return ("iostream stream error");
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };


class _System_error_category
 : public error_category
 {
public:
 _System_error_category() noexcept
  {
  _Addr = _System_addr;
  }

 virtual const char *name() const noexcept
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const unsigned long _Size = 32767;
  string _Narrow(_Size, '\0');

  const unsigned long _Val = _Winerror_message(
   static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);

  if (_Val == 0)
   return ("unknown error");

  _Narrow.resize(_Val);
  _Narrow.shrink_to_fit();
  return (_Narrow);
  }

 virtual error_condition
  default_error_condition(int _Errval) const noexcept
  {
  int _Posv = _Winerror_map(_Errval);

  if (_Posv != 0)
   return (error_condition(_Posv, generic_category()));
  else
   return (error_condition(_Errval, system_category()));
  }
 };

template<class _Ty>
 struct _Immortalizer
 {
 _Immortalizer()
  {
  ::new (static_cast<void *>(&_Storage)) _Ty();
  }

 ~_Immortalizer() noexcept
  {
  }

 _Immortalizer(const _Immortalizer&) = delete;
 _Immortalizer& operator=(const _Immortalizer&) = delete;

 typename aligned_union<1, _Ty>::type _Storage;
 };

template<class _Ty> inline
 _Ty& _Immortalize()
 {
 static _Immortalizer<_Ty> _Static;
 return (*reinterpret_cast<_Ty *>(&_Static._Storage));
 }

inline const error_category& generic_category() noexcept
 {
 return (_Immortalize<_Generic_error_category>());
 }

inline const error_category& iostream_category() noexcept
 {
 return (_Immortalize<_Iostream_error_category>());
 }

inline const error_category& system_category() noexcept
 {
 return (_Immortalize<_System_error_category>());
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 2 3


# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\share.h" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)



namespace std {
# 47 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 3
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
 static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
 static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
 static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
 static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
 static constexpr _Fmtflags left = (_Fmtflags)0x0040;
 static constexpr _Fmtflags right = (_Fmtflags)0x0080;
 static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
 static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
 static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
 static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
 static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
 static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

 static constexpr _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static constexpr _Iostate goodbit = (_Iostate)0x0;
 static constexpr _Iostate eofbit = (_Iostate)0x1;
 static constexpr _Iostate failbit = (_Iostate)0x2;
 static constexpr _Iostate badbit = (_Iostate)0x4;

 enum _Openmode
  {
  _Openmask = 0xff};

 static constexpr _Openmode in = (_Openmode)0x01;
 static constexpr _Openmode out = (_Openmode)0x02;
 static constexpr _Openmode ate = (_Openmode)0x04;
 static constexpr _Openmode app = (_Openmode)0x08;
 static constexpr _Openmode trunc = (_Openmode)0x10;
 static constexpr _Openmode _Nocreate = (_Openmode)0x40;
 static constexpr _Openmode _Noreplace = (_Openmode)0x80;
 static constexpr _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekbeg,
  _Seekcur,
  _Seekend
  };

 static constexpr _Seekdir beg = _Seekbeg;
 static constexpr _Seekdir cur = _Seekcur;
 static constexpr _Seekdir end = _Seekend;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;

 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;

 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);
 typedef unsigned int io_state, open_mode, seek_dir;


 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
# 246 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xiosbase" 3
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() noexcept
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }

 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }

 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() noexcept
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  : public _Crt_new_delete
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  : public _Crt_new_delete
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete _Ptr1;
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete _Pfa1;
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };





}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4251)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Pfirst0 = pbase();
   _Elem *_Pnext0 = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst0 = eback();
   _Elem *_Gnext0 = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst0, _Pnext0, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst0, _Gnext0, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() noexcept
  {
  delete _Plocale;
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }

 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }

 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }

 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }

 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
# 478 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf" 3
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, const _Elem *, _Elem>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;
 typedef const _Elem *pointer;

 constexpr istreambuf_iterator(streambuf_type *_Sb = 0) noexcept
  : _Strbuf(_Sb), _Got(_Sb == 0), _Val()
  {
  }

 istreambuf_iterator(istream_type& _Istr) noexcept
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();


  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf", 511);


  return (_Val);
  }

 const _Elem *operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {

  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not incrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\streambuf", 526);


  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) noexcept
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) noexcept
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const noexcept
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4275)




extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) __int64 __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned __int64 __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {

template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;

 wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),
  2, "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 67);

 if (!_Ptrdest)
  _Xbad_alloc();
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() noexcept
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Falsename);
  :: free((void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() noexcept
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   bool& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 394);
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 431);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 454);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 476);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 496);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 517);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 537);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 558);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  float _Ans = :: _Stofx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 582);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  double _Ans = :: _Stodx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 606);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  long double _Ans = :: _Stoldx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 630);
  char _Ac[32], *_Ep;
  int _Errno = 0;


  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned __int64 _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);







  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;
  bool _Sticky = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static const char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  char *_Leading = _Ptr;
  *_Ptr++ = '0';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     {
     ++_Pten;
     if (0 < _Idx)
      _Sticky = true;
     }
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      {
      ++_Pten;
      if (0 < _Idx)
       _Sticky = true;
      }
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }
   else if (0 < _Idx)
    _Sticky = true;

  if (_Sticky)
   {
   char *_Px = _Ptr;
   for (; --_Px != _Leading; )
    {
    if (*_Px == localeconv()->decimal_point[0])
     ;
    else if (*_Px != '9')
     {
     ++*_Px;
     break;
     }
    else
     *_Px = '0';
    }

   if (_Px == _Leading)
    {
    *_Px = '1';
    ++_Pten;
    }
   }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
    || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }
 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, bool _Val) const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 1219);
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabs(_Val))
   {
   int _Ptwo;
   (void):: frexp(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  string _Buf;
  char _Fmt[8];
  bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
   == ios_base::fixed;
  streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
   ? 6 : _Iosbase.precision();
  size_t _Bufsize = (size_t)_Precision;
  if (_Isfixed && 1e10 < :: fabsl(_Val))
   {
   int _Ptwo;
   (void):: frexpl(_Val, &_Ptwo);
   _Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
   }
  _Buf.resize(_Bufsize + 50);

  int _Ngen = :: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
   _Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Count) const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 1379);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  if (_Poff != _Count)
   _Groupstring[_Poff] = _Punct_fac.decimal_point();

  size_t _Off = _Poff == _Count ? _Eoff : _Poff;
  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum", 1481);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1584 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocnum" 3
}

#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ios" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() noexcept
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) noexcept
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
# 209 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ios" 3
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }

namespace tr1 {
using ::std:: hexfloat;
}

inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4390)

namespace std {
# 35 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() noexcept
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
# 196 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream", 198);
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream", 204);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream", 211);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 270 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(__int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned __int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else if (0 < _Count)
   {
   _Debug_pointer(_Str, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream", 564);
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
# 678 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
# 692 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ostream" 3
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
# 42 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() noexcept
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() noexcept
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  bool _Ok;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
# 197 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 199);
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 205);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 212);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
# 271 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(__int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned __int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     _Debug_pointer(_Str, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 574);
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     _Debug_pointer(_Str, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 677);
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != (numeric_limits<streamsize>::max)()
     && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   _Debug_pointer(_Str, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 734);
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Count && 0 < _Num)
   {
   _Debug_pointer(_Str, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 760);
   read(_Str, _Num < _Count ? _Num : _Count);
   }

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };



#pragma vtordisp(pop)
# 925 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
# 936 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() noexcept
  {
  }
 };






template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
# 1006 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream" 3
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
 _Debug_pointer(_Str, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\istream", 1011);
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width()
   : (numeric_limits<streamsize>::max)();
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\string" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)
#pragma warning(disable: 4172)
#pragma warning(disable: 4455)

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }



inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: strtof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: strtold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long long stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 float _Ans = :: wcstof(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long double _Ans = :: wcstold(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }




template<class _Ty> inline
 string _Integral_to_string(const char *_Fmt, _Ty _Val)
 {
 static_assert(is_integral<_Ty>::value,
  "_Ty must be integral");
 char _Buf[21];
 int _Len = :: sprintf_s(_Buf, 21, _Fmt, _Val);
 return (string(_Buf, _Len));
 }

template<class _Ty> inline
 string _Floating_to_string(const char *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scprintf(_Fmt, _Val);
 string _Str(_Len + 1, '\0');
 :: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }

template<class _Ty> inline
 wstring _Integral_to_wstring(const wchar_t *_Fmt, _Ty _Val)
 {
 static_assert(is_integral<_Ty>::value,
  "_Ty must be integral");
 wchar_t _Buf[21];
 int _Len = :: swprintf_s(_Buf, 21, _Fmt, _Val);
 return (wstring(_Buf, _Len));
 }

template<class _Ty> inline
 wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
 {
 static_assert(is_floating_point<_Ty>::value,
  "_Ty must be floating point");

 int _Len = :: _scwprintf(_Fmt, _Val);
 wstring _Str(_Len + 1, L'\0');
 :: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
 _Str.resize(_Len);
 return (_Str);
 }




inline string to_string(int _Val)
 {
 return (_Integral_to_string("%d", _Val));
 }

inline string to_string(unsigned int _Val)
 {
 return (_Integral_to_string("%u", _Val));
 }

inline string to_string(long _Val)
 {
 return (_Integral_to_string("%ld", _Val));
 }

inline string to_string(unsigned long _Val)
 {
 return (_Integral_to_string("%lu", _Val));
 }

inline string to_string(long long _Val)
 {
 return (_Integral_to_string("%lld", _Val));
 }

inline string to_string(unsigned long long _Val)
 {
 return (_Integral_to_string("%llu", _Val));
 }

inline string to_string(float _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(double _Val)
 {
 return (_Floating_to_string("%f", _Val));
 }

inline string to_string(long double _Val)
 {
 return (_Floating_to_string("%Lf", _Val));
 }


inline wstring to_wstring(int _Val)
 {
 return (_Integral_to_wstring(L"%d", _Val));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 return (_Integral_to_wstring(L"%u", _Val));
 }

inline wstring to_wstring(long _Val)
 {
 return (_Integral_to_wstring(L"%ld", _Val));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 return (_Integral_to_wstring(L"%lu", _Val));
 }

inline wstring to_wstring(long long _Val)
 {
 return (_Integral_to_wstring(L"%lld", _Val));
 }

inline wstring to_wstring(unsigned long long _Val)
 {
 return (_Integral_to_wstring(L"%llu", _Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(double _Val)
 {
 return (_Floating_to_wstring(L"%f", _Val));
 }

inline wstring to_wstring(long double _Val)
 {
 return (_Floating_to_wstring(L"%Lf", _Val));
 }


inline namespace literals {
inline namespace string_literals {
inline string operator "" s(const char *_Str, size_t _Len)
 {
 return (string(_Str, _Len));
 }

inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
 {
 return (wstring(_Str, _Len));
 }

inline u16string operator "" s(const char16_t *_Str, size_t _Len)
 {
 return (u16string(_Str, _Len));
 }

inline u32string operator "" s(const char32_t *_Str, size_t _Len)
 {
 return (u32string(_Str, _Len));
 }
}
}
}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\sstream" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
#pragma warning(disable: 4251)


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_stringbuf
  : public basic_streambuf<_Elem, _Traits>
 {
public:
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
 typedef _Alloc allocator_type;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_stringbuf(ios_base::openmode _Mode =
  ios_base::in | ios_base::out)
  {
  _Init(0, 0, _Getstate(_Mode));
  }

 explicit basic_stringbuf(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  _Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
  }

 basic_stringbuf(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Tidy();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mysb::swap(_Right);
   ::std:: swap(_Seekhigh, _Right._Seekhigh);
   ::std:: swap(_Mystate, _Right._Mystate);
   _Swap_adl(_Al, _Right._Al);
   }
  }

 basic_stringbuf(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_stringbuf() noexcept
  {
  _Tidy();
  }

 enum
  {
  _Allocated = 1,
  _Constant = 2,
  _Noread = 4,
  _Append = 8,
  _Atend = 16};
 typedef int _Strstate;

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 _Mystr str() const
  {
  if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
   {
   _Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
    ? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
   return (_Str);
   }
  else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
   {
   _Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
   return (_Str);
   }
  else
   {
   _Mystr _Nul;
   return (_Nul);
   }
  }

 void str(const _Mystr& _Newstr)
  {
  _Tidy();
  _Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
  }

protected:
 virtual int_type overflow(int_type _Meta = _Traits::eof())
  {
  if (_Mystate & _Constant)
   return (_Traits::eof());
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));

  if (_Mystate & _Append
   && _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
   _Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  if (_Mysb::pptr() != 0
   && _Mysb::pptr() < _Mysb::epptr())
   {
   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  else
   {
   size_t _Oldsize = _Mysb::pptr() == 0
    ? 0 : _Mysb::epptr() - _Mysb::eback();
   size_t _Newsize = _Oldsize;
   size_t _Inc = _Newsize / 2 < _MINSIZE
    ? _MINSIZE : _Newsize / 2;

   while (0 < _Inc && 2147483647 - _Inc < _Newsize)
    _Inc /= 2;
   if (_Inc == 0)
    return (_Traits::eof());

   _Newsize += _Inc;

   _Elem *_Newptr = _Al.allocate(_Newsize);
   _Elem *_Oldptr = _Mysb::eback();

   if (0 < _Oldsize)
    _Traits::copy(_Newptr, _Oldptr, _Oldsize);

   if (_Oldsize == 0)
    {
    _Seekhigh = _Newptr;
    _Mysb::setp(_Newptr, _Newptr + _Newsize);
    if (_Mystate & _Noread)
     _Mysb::setg(_Newptr, 0, _Newptr);
    else
     _Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
    }
   else
    {
    _Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
    _Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
     _Newptr + (_Mysb::pptr() - _Oldptr),
     _Newptr + _Newsize);
    if (_Mystate & _Noread)
     _Mysb::setg(_Newptr, 0, _Newptr);
    else
     _Mysb::setg(_Newptr,
      _Newptr + (_Mysb::gptr() - _Oldptr),
      _Mysb::pptr() + 1);
    }

   if (_Mystate & _Allocated)
    _Al.deallocate(_Oldptr, _Oldsize);
   _Mystate |= _Allocated;

   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  }

 virtual int_type pbackfail(int_type _Meta = _Traits::eof())
  {
  if (_Mysb::gptr() == 0
   || _Mysb::gptr() <= _Mysb::eback()
   || (!_Traits::eq_int_type(_Traits::eof(), _Meta)
   && !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
   && _Mystate & _Constant))
   return (_Traits::eof());
  else
   {
   _Mysb::gbump(-1);
   if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
    *_Mysb::gptr() = _Traits::to_char_type(_Meta);
   return (_Traits::not_eof(_Meta));
   }
  }

 virtual int_type underflow()
  {
  if (_Mysb::gptr() == 0)
   return (_Traits::eof());
  else if (_Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(*_Mysb::gptr()));
  else if (_Mystate & _Noread || _Mysb::pptr() == 0
   || (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))
   return (_Traits::eof());
  else
   {
   if (_Seekhigh < _Mysb::pptr())
    _Seekhigh = _Mysb::pptr();
   _Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
   return (_Traits::to_int_type(*_Mysb::gptr()));
   }
  }

 virtual pos_type seekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Which = ios_base::in | ios_base::out)
  {
  if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
   _Seekhigh = _Mysb::pptr();

  if (_Which & ios_base::in && _Mysb::gptr() != 0)
   {
   if (_Way == ios_base::end)
    _Off += (off_type)(_Seekhigh - _Mysb::eback());
   else if (_Way == ios_base::cur
    && (_Which & ios_base::out) == 0)
    _Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
   else if (_Way != ios_base::beg)
    _Off = _BADOFF;

   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    {
    _Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
    if (_Which & ios_base::out && _Mysb::pptr() != 0)
     _Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
      _Mysb::epptr());
    }
   else
    _Off = _BADOFF;
   }
  else if (_Which & ios_base::out && _Mysb::pptr() != 0)
   {
   if (_Way == ios_base::end)
    _Off += (off_type)(_Seekhigh - _Mysb::eback());
   else if (_Way == ios_base::cur)
    _Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
   else if (_Way != ios_base::beg)
    _Off = _BADOFF;

   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    _Mysb::pbump((int)(_Mysb::eback()
     - _Mysb::pptr() + _Off));
   else
    _Off = _BADOFF;
   }

  else if (_Off != 0)


   _Off = _BADOFF;
  return (pos_type(_Off));
  }

 virtual pos_type seekpos(pos_type _Ptr,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  streamoff _Off = (streamoff)_Ptr;
  if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
   _Seekhigh = _Mysb::pptr();

  if (_Off == _BADOFF)
   ;
  else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
   {
   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    {
    _Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
    if (_Mode & ios_base::out && _Mysb::pptr() != 0)
     _Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
      _Mysb::epptr());
    }
   else
    _Off = _BADOFF;
   }
  else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
   {
   if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
    _Mysb::pbump((int)(_Mysb::eback()
     - _Mysb::pptr() + _Off));
   else
    _Off = _BADOFF;
   }
  else
   _Off = _BADOFF;
  return (streampos(_Off));
  }

 void _Init(const _Elem *_Ptr,
  size_t _Count, _Strstate _State)
  {
  _Seekhigh = 0;
  _Mystate = _State;

  if (_Count != 0
   && (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
   {
   _Elem *_Pnew = _Al.allocate(_Count);
   _Traits::copy(_Pnew, _Ptr, _Count);
   _Seekhigh = _Pnew + _Count;

   if (!(_Mystate & _Noread))
    _Mysb::setg(_Pnew, _Pnew,
     _Pnew + _Count);
   if (!(_Mystate & _Constant))
    {
    _Mysb::setp(_Pnew,
     (_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
     _Pnew + _Count);
    if (_Mysb::gptr() == 0)
     _Mysb::setg(_Pnew, 0, _Pnew);
    }
   _Mystate |= _Allocated;
   }
  }

 void _Tidy()
  {
  if (_Mystate & _Allocated)
   _Al.deallocate(_Mysb::eback(),
    (_Mysb::pptr() != 0 ? _Mysb::epptr()
     : _Mysb::egptr()) - _Mysb::eback());
  _Mysb::setg(0, 0, 0);
  _Mysb::setp(0, 0);
  _Seekhigh = 0;
  _Mystate &= ~_Allocated;
  }

private:
 enum
  {
  _MINSIZE = 32};

 _Strstate _Getstate(ios_base::openmode _Mode)
  {
  _Strstate _State = (_Strstate)0;
  if (!(_Mode & ios_base::in))
   _State |= _Noread;
  if (!(_Mode & ios_base::out))
   _State |= _Constant;
  if (_Mode & ios_base::app)
   _State |= _Append;
  if (_Mode & ios_base::ate)
   _State |= _Atend;
  return (_State);
  }

 _Elem *_Seekhigh;
 _Strstate _Mystate;
 allocator_type _Al;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
  basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_istringstream
  : public basic_istream<_Elem, _Traits>
 {
public:
 typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_istream<_Elem, _Traits> _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode | ios_base::in)
  {
  }

 explicit basic_istringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode | ios_base::in)
  {
  }

 basic_istringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_istringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_ostringstream
  : public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Mybase;
 typedef _Alloc allocator_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode | ios_base::out)
  {
  }

 explicit basic_ostringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode | ios_base::out)
  {
  }

 basic_ostringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_ostringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_stringstream
  : public basic_iostream<_Elem, _Traits>
 {
public:
 typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
 typedef basic_iostream<_Elem, _Traits> _Mybase;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;
 typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

 explicit basic_stringstream(ios_base::openmode _Mode =
  ios_base::in | ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Mode)
  {
  }

 explicit basic_stringstream(const _Mystr& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  : _Mybase(&_Stringbuffer),
   _Stringbuffer(_Str, _Mode)
  {
  }

 basic_stringstream(_Myt&& _Right)
  : _Mybase(&_Stringbuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Stringbuffer.str(_Mystr());
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Stringbuffer.swap(_Right._Stringbuffer);
   }
  }

 basic_stringstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_stringstream() noexcept
  {
  }

 _Mysb *rdbuf() const
  {
  return ((_Mysb *)&_Stringbuffer);
  }

 _Mystr str() const
  {
  return (_Stringbuffer.str());
  }

 void str(const _Mystr& _Newstr)
  {
  _Stringbuffer.str(_Newstr);
  }

private:
 _Mysb _Stringbuffer;
 };


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
  basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/enemy.cpp" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/enemy.h" 1



# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Config.hpp" 1
# 128 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Config.hpp"
#pragma warning(disable: 4251)
# 163 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Config.hpp"
namespace sf
{





    typedef signed char Int8;
    typedef unsigned char Uint8;


    typedef signed short Int16;
    typedef unsigned short Uint16;


    typedef signed int Int32;
    typedef unsigned int Uint32;



        typedef signed __int64 Int64;
        typedef unsigned __int64 Uint64;





}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Clock.hpp" 1
# 31 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Clock.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Export.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Clock.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
namespace sf
{




class __declspec(dllimport) Time
{
public:







    Time();
# 60 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
    float asSeconds() const;
# 70 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
    Int32 asMilliseconds() const;
# 80 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
    Int64 asMicroseconds() const;




    static const Time Zero;

private:

    friend __declspec(dllimport) Time seconds(float);
    friend __declspec(dllimport) Time milliseconds(Int32);
    friend __declspec(dllimport) Time microseconds(Int64);
# 102 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
    explicit Time(Int64 microseconds);

private:




    Int64 m_microseconds;
};
# 123 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time seconds(float amount);
# 136 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time milliseconds(Int32 amount);
# 149 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time microseconds(Int64 amount);
# 161 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) bool operator ==(Time left, Time right);
# 173 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) bool operator !=(Time left, Time right);
# 185 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) bool operator <(Time left, Time right);
# 197 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) bool operator >(Time left, Time right);
# 209 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) bool operator <=(Time left, Time right);
# 221 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) bool operator >=(Time left, Time right);
# 232 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator -(Time right);
# 244 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator +(Time left, Time right);
# 256 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator +=(Time& left, Time right);
# 268 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator -(Time left, Time right);
# 280 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator -=(Time& left, Time right);
# 292 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator *(Time left, float right);
# 304 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator *(Time left, Int64 right);
# 316 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator *(float left, Time right);
# 328 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator *(Int64 left, Time right);
# 340 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator *=(Time& left, float right);
# 352 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator *=(Time& left, Int64 right);
# 364 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator /(Time left, float right);
# 376 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator /(Time left, Int64 right);
# 388 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator /=(Time& left, float right);
# 400 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator /=(Time& left, Int64 right);
# 412 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) float operator /(Time left, Time right);
# 424 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time operator %(Time left, Time right);
# 436 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Time.hpp"
__declspec(dllimport) Time& operator %=(Time& left, Time right);

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Clock.hpp" 2


namespace sf
{




class __declspec(dllimport) Clock
{
public:







    Clock();
# 63 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Clock.hpp"
    Time getElapsedTime() const;
# 74 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Clock.hpp"
    Time restart();

private:




    Time m_startTime;
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Err.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Err.hpp"
namespace sf
{




__declspec(dllimport) std::ostream& err();

}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp" 1
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/InputStream.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/InputStream.hpp"
namespace sf
{




class __declspec(dllimport) InputStream
{
public:





    virtual ~InputStream() {}
# 63 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/InputStream.hpp"
    virtual Int64 read(void* data, Int64 size) = 0;
# 73 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/InputStream.hpp"
    virtual Int64 seek(Int64 position) = 0;







    virtual Int64 tell() = 0;







    virtual Int64 getSize() = 0;
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/NonCopyable.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/NonCopyable.hpp"
namespace sf
{





class __declspec(dllimport) NonCopyable
{
protected:
# 53 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/NonCopyable.hpp"
    NonCopyable() {}

private:
# 67 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/NonCopyable.hpp"
    NonCopyable(const NonCopyable&);
# 79 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/NonCopyable.hpp"
    NonCopyable& operator =(const NonCopyable&);
};

}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp" 2
# 49 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp"
namespace sf
{




class __declspec(dllimport) FileInputStream : public InputStream, NonCopyable
{
public:




    FileInputStream();





    virtual ~FileInputStream();
# 78 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp"
    bool open(const std::string& filename);
# 92 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp"
    virtual Int64 read(void* data, Int64 size);
# 102 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/FileInputStream.hpp"
    virtual Int64 seek(Int64 position);







    virtual Int64 tell();







    virtual Int64 getSize();

private:







    std::FILE* m_file;

};

}
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Lock.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Lock.hpp"
namespace sf
{
class Mutex;





class __declspec(dllimport) Lock : NonCopyable
{
public:
# 55 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Lock.hpp"
    explicit Lock(Mutex& mutex);







    ~Lock();

private:




    Mutex& m_mutex;
};

}
# 38 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/MemoryInputStream.hpp" 1
# 37 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/MemoryInputStream.hpp"
namespace sf
{




class __declspec(dllimport) MemoryInputStream : public InputStream
{
public:





    MemoryInputStream();
# 60 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/MemoryInputStream.hpp"
    void open(const void* data, std::size_t sizeInBytes);
# 74 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/MemoryInputStream.hpp"
    virtual Int64 read(void* data, Int64 size);
# 84 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/MemoryInputStream.hpp"
    virtual Int64 seek(Int64 position);







    virtual Int64 tell();







    virtual Int64 getSize();

private:




    const char* m_data;
    Int64 m_size;
    Int64 m_offset;
};

}
# 39 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Mutex.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Mutex.hpp"
namespace sf
{
namespace priv
{
    class MutexImpl;
}






class __declspec(dllimport) Mutex : NonCopyable
{
public:





    Mutex();





    ~Mutex();
# 73 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Mutex.hpp"
    void lock();







    void unlock();

private:




    priv::MutexImpl* m_mutexImpl;
};

}
# 40 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Sleep.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Sleep.hpp"
namespace sf
{
# 47 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Sleep.hpp"
void __declspec(dllimport) sleep(Time duration);

}
# 42 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>

  get_temporary_buffer(ptrdiff_t _Count) noexcept

 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  _Xbad_alloc();
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 _Construct(::std:: addressof(*_Dest),
  *_First);
 while (0 < --_Count)
  _Construct(::std:: addressof(*++_Dest), *++_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(::std:: addressof(*_Next));
 throw;
 }
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, forward_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
  _Construct(::std:: addressof(*_Dest), *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(::std:: addressof(*_Next));
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 132 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory" 3
template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n2(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Mutable_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n2(_InIt _First, _Diff _Count,
  _FwdIt _Dest, random_access_iterator_tag)
 {
 _FwdIt _Ans = _Dest + _Count;
 _Uninitialized_copy_n(_First, _Count,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 return (_Uninitialized_copy_n2(_First, _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, random_access_iterator_tag)
 {
 _InIt _Last = _First + _Count;
 _Last = _Last;
 return (_Uninitialized_copy_n2(_Unchecked(_First), _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, true_type)
 {
 return (_Uninitialized_copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, false_type)
 {
 return (_Uninitialized_copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 if (_Count <= 0)
  return (_Dest);
 else
  {
  _Debug_pointer(_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 207);
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 208);
  return (_Uninitialized_copy_n(_First,
   _Count, _Dest, _Is_checked(_Dest)));
  }
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _FwdIt _Dest)
 {
 return (::std:: uninitialized_copy_n(_Array_iterator<_InTy, _InSize>(_First),
  _Count, _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy_n(_First,
   _Count, _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy_n(_Array_iterator<_InTy, _InSize>(_First),
   _Count, _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Construct(::std:: addressof(*_Dest), *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(::std:: addressof(*_Next));
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
# 304 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory" 3
template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _FwdIt _Ans = _Dest + (_Last - _First);
 _Uninitialized_copy0(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, true_type)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, false_type)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 348);
 return (_Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 374);
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_copy(_First, _Last, _Dest,
  _Al, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2> inline
 _Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<allocator<_Ty2> >&, _Scalar_ptr_iterator_tag)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 403);
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_copy(_First, _Last, _Dest, _Al,
  _Ptr_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Rechecked(_Dest,
  _Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 438);
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, (void)++_First)
  _Al.construct(_Dest, (_Valty&&)*_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_move(_First, _Last, _Dest,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2,
 class _Valty> inline
 _Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<allocator<_Ty2> >&, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 469);
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_move(_First, _Last, _Dest, _Al,
  _Val_type(_First), _Ptr_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Rechecked(_Dest,
  _Uninit_move(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 502);
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(::std:: addressof(*_First), _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(::std:: addressof(*_Next));
 throw;
 }
 }

template<class _Ty,
 class _Tval> inline
 void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 ::std:: fill(_First, _Last, _Val);
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Construct(::std:: addressof(*_First), _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(::std:: addressof(*_Next));
 throw;
 }

 return (_First);
 }

template<class _Ty,
 class _Diff,
 class _Tval> inline
 _Ty *_Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 return (_Fill_n(_First, _Count, _Val));
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 return (_Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First)));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
   _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)
  _Al.construct(_First, *_Pval);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_fill_n(_First, _Count,
  _Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Tval,
 class _Valty> inline
 void _Uninit_fill_n(_Ty *_First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<allocator<_Ty> >&,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, *_Pval);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al)
 {
 _Uninit_fill_n(_First, _Count, _Pval, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, (void)++_First)

  _Al.construct(_First);

 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_def_fill_n(_First, _Count,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Valty> inline
 void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
  _Wrap_alloc<allocator<_Ty> >&, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, (_Valty)0);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  _Alloc& _Al)
 {
 _Uninit_def_fill_n(_First, _Count, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator<_OutIt, _Ty>& operator*()
  {
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty>& operator=(const _Ty& _Val)
  {
  _Construct(::std:: addressof(*_Next), _Val);
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty>& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty> operator++(int)
  {
  raw_storage_iterator<_OutIt, _Ty> _Ans = *this;
  ++_Next;
  return (_Ans);
  }

 _OutIt base() const
  {
  return (_Next);
  }

private:
 _OutIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator<_Ty>& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator() noexcept
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = _Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator*()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }
  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };



template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) noexcept
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() noexcept
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() noexcept
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) noexcept
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) noexcept
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) noexcept
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() noexcept
  {
  delete _Myptr;
  }

 _Ty& operator*() const noexcept
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 958);


  return (*get());
  }

 _Ty *operator->() const noexcept
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xmemory", 968);


  return (get());
  }

 _Ty *get() const noexcept
  {
  return (_Myptr);
  }

 _Ty *release() noexcept
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4244)

namespace std {

const int _ISORT_MAX = 32;


template<class _InIt,
 class _Fn1> inline
 void _For_each(_InIt _First, _InIt _Last, _Fn1& _Func)
 {
 for (; _First != _Last; ++_First)
  _Func(*_First);
 }

template<class _InIt,
 class _Fn1> inline
 _Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
 {
 _Debug_range_ptr(_First, _Last, _Func, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 31);
 _For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

 return (::std:: move(_Func));
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 52);
 return (_Rechecked(_First,
  _Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    return (_Firstb);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 73);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 74);
 return (_Rechecked(_First,
  _Adjacent_find(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: adjacent_find(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 105);
 return (_Count_if(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
  {
  ++_First1;
  ++_First2;
  }
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }
# 142 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch2(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred, true_type)
 {
 return (_Mismatch(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_InIt1, _InIt2>
  _Mismatch2(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred, false_type)
 {
 return (_Mismatch(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 172);
 _Debug_pointer_if(_First1 != _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 173);
 pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
  _Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Pred, _Is_checked(_First2)));
 return (pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Ans.second));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
  ::std:: mismatch(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 return (pair<_InIt1, _InTy *>(
  _Ans.first,
  _Unchecked(_Ans.second)));
 }




template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize])
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2
  && _Pred(*_First1, *_First2); )
  {
  ++_First1;
  ++_First2;
  }
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 249);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 250);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 251);
 pair<typename _Get_unchecked_type<_InIt1>::type, typename _Get_unchecked_type<_InIt2>::type> _Ans(
  _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 return (pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Rechecked(_First2, _Ans.second)));
 }


template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 bool _All_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 286);
 return (_All_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _Any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (true);
 return (false);
 }

template<class _InIt,
 class _Pr> inline
 bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 305);
 return (_Any_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _None_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 324);
 return (_None_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 343);
 return (_Rechecked(_First,
  _Find_if_not(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 358);
   *_Dest++ = *_First;
   }
 return (_Dest);
 }
# 376 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, true_type)
 {
 return (_Copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, false_type)
 {
 return (_Copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 403);
 return (_Copy_if(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *copy_if(_InIt _First, _InIt _Last, _OutTy (&_Dest)[_OutSize],
  _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: copy_if(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   {
   _Debug_pointer(_Dest1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 435);
   *_Dest1++ = *_First;
   }
  else
   {
   _Debug_pointer(_Dest2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 440);
   *_Dest2++ = *_First;
   }
 return (pair<_OutIt1, _OutIt2>( _Dest1, _Dest2));
 }
# 461 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   true_type, true_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   true_type, false_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   false_type, true_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   false_type, false_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 528);
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_Unchecked(_First), _Unchecked(_Last),
   _Dest1, _Dest2, _Pred,
   _Is_checked(_Dest1), _Is_checked(_Dest2))));
 }


template<class _InIt,
 class _OutTy1,
 size_t _OutSize1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutTy1 *, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutTy1 (&_Dest1)[_OutSize1], _OutIt2 _Dest2, _Pr _Pred)
 {
 pair<_Array_iterator<_OutTy1, _OutSize1>, _OutIt2> _Ans =
  ::std:: partition_copy(_First, _Last,
   _Array_iterator<_OutTy1, _OutSize1>(_Dest1), _Dest2, _Pred);
 return (pair<_OutTy1 *, _OutIt2>(
  _Unchecked(_Ans.first),
  _Ans.second));
 }

template<class _InIt,
 class _OutIt1,
 class _OutTy2,
 size_t _OutSize2,
 class _Pr> inline
 pair<_OutIt1, _OutTy2 *>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutTy2 (&_Dest2)[_OutSize2], _Pr _Pred)
 {
 pair<_OutIt1, _Array_iterator<_OutTy2, _OutSize2> > _Ans =
  ::std:: partition_copy(_First, _Last,
   _Dest1, _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred);
 return (pair<_OutIt1, _OutTy2 *>(
  _Ans.first,
  _Unchecked(_Ans.second)));
 }

template<class _InIt,
 class _OutTy1,
 size_t _OutSize1,
 class _OutTy2,
 size_t _OutSize2,
 class _Pr> inline
 pair<_OutTy1 *, _OutTy2 *>
  partition_copy(_InIt _First, _InIt _Last,
   _OutTy1 (&_Dest1)[_OutSize1], _OutTy2 (&_Dest2)[_OutSize2],
   _Pr _Pred)
 {
 pair<_Array_iterator<_OutTy1, _OutSize1>,
  _Array_iterator<_OutTy2, _OutSize2> > _Ans =
   ::std:: partition_copy(_First, _Last,
    _Array_iterator<_OutTy1, _OutSize1>(_Dest1),
    _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred);
 return (pair<_OutTy1 *, _OutTy2 *>(
  _Unchecked(_Ans.first),
  _Unchecked(_Ans.second)));
 }




template<class _InIt,
 class _Pr> inline
 bool _Is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 611);
 return (_Is_partitioned(_Unchecked(_First), _Unchecked(_Last),
  _Pred));
 }


template<class _FwdIt,
 class _Diff,
 class _Pr> inline
 _FwdIt _Partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);
 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }
 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 645);
 return (_Rechecked(_First,
  _Partition_point(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First))));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr> inline
 _FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *,
  forward_iterator_tag, forward_iterator_tag)
 {
 for (; ; ++_First1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (_Mid1 == _Last1)
    return (_Last1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr> inline
 _FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _Diff1 _Count1 = _Last1 - _First1;
 _Diff2 _Count2 = _Last2 - _First2;

 for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }
 return (_Last1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 704);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 705);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 706);
 return (_Rechecked(_First1,
  _Search(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Dist_type(_First1), _Dist_type(_First2),
   _Iter_cat(_First1), _Iter_cat(_First2))));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: search(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   {
   _FwdIt _Mid = _First;

   for (_Diff _Count1 = _Count; ; )
    if (--_Count1 == 0)
     return (_First);
    else if (++_Mid == _Last)
     return (_Last);
    else if (!_Pred(*_Mid, _Val))
     {
     break;
     }

   _First = _Mid;
   }
 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt _Search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
 {
 if (_Count <= 0)
  return (_First);

 _FwdIt _Oldfirst = _First;
 for (_Diff _Inc = 0; _Count <= _Last - _Oldfirst; )
  {
  _First = _Oldfirst + _Inc;
  if (_Pred(*_First, _Val))
   {
   _Diff _Count1 = _Count;
   _FwdIt _Mid = _First;

   for (; _Oldfirst != _First && _Pred(_First[-1], _Val);
    --_First)
    --_Count1;

   if (_Count1 <= _Last - _Mid)
    for (; ; )
     {
     if (--_Count1 == 0)
      return (_First);
     else if (!_Pred(*++_Mid, _Val))
      {
      break;
      }
     }
   _Oldfirst = ++_Mid;
   _Inc = 0;
   }
  else
   {
   _Oldfirst = _First + 1;
   _Inc = _Count - 1;
   }
  }
 return (_Last);
 }

template<class _FwdIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 807);
 return (_Rechecked(_First,
  _Search_n(_Unchecked(_First), _Unchecked(_Last), _Count, _Val,
   _Pred, _Iter_cat(_First))));
 }


template<class _FwdIt,
 class _Diff,
 class _Ty> inline
 _FwdIt search_n(_FwdIt _First, _FwdIt _Last,
  _Diff _Count, const _Ty& _Val)
 {
 return (::std:: search_n(_First, _Last, _Count, _Val,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr> inline
 _FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
 {
 _Diff1 _Count1 = 0;
 _Distance(_First1, _Last1, _Count1);
 _Diff2 _Count2 = 0;
 _Distance(_First2, _Last2, _Count2);
 _FwdIt1 _Ans = _Last1;

 if (0 < _Count2)
  {
  _Debug_pointer_if(_Count2 <= _Count1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 841);
  for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
   {
   _FwdIt1 _Mid1 = _First1;
   for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
    if (!_Pred(*_Mid1, *_Mid2))
     break;
    else if (++_Mid2 == _Last2)
     {
     _Ans = _First1;
     break;
     }
   }
  }
 return (_Ans);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 864);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 865);
 return (_Rechecked(_First1,
  _Find_end(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Dist_type(_First1), _Dist_type(_First2))));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_end(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1)
  for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
   if (_Pred(*_First1, *_Mid2))
    return (_First1);
 return (_First1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 902);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 903);
 _Debug_pointer_if(_First1 != _Last1 && _First2 != _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 904);
 return (_Rechecked(_First1,
  _Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_first_of(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_Dest)
  ::std:: iter_swap(_First1, _Dest);
 return (_Dest);
 }
# 942 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  forward_iterator_tag, forward_iterator_tag)
 {
 return (_Swap_ranges(_First1, _Last1,
  _Dest));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _FwdIt2 _Ans = _Dest + (_Last1 - _First1);
 _Swap_ranges(_First1, _Last1,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest, true_type)
 {
 return (_Swap_ranges(_First1, _Last1,
  _Dest, _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest, false_type)
 {
 return (_Swap_ranges(_First1, _Last1,
  _Dest, _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 _Debug_range_ptr(_First1, _Last1, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 988);
 return (_Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),
  _Dest, _Is_checked(_Dest)));
 }


template<class _FwdIt1,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: swap_ranges(_First1, _Last1,
  _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = _Func(*_First);
 return (_Dest);
 }
# 1031 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Transform(_First, _Last,
  _Dest, _Func));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Transform(_First, _Last,
  _Unchecked(_Dest), _Func);
 return (_Ans);
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func, true_type)
 {
 return (_Transform1(_First, _Last,
  _Dest, _Func,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func, false_type)
 {
 return (_Transform1(_First, _Last,
  _Dest, _Func,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1084);
 _Debug_pointer_if(_First != _Last, _Func, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1085);
 return (_Transform1(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Func, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Fn1> inline
 _OutTy *transform(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Fn1 _Func)
 {
 return (_Unchecked(
  ::std:: transform(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
 {
 for (; _First1 != _Last1; ++_First1, (void)++_First2, ++_Dest)
  *_Dest = _Func(*_First1, *_First2);
 return (_Dest);
 }
# 1131 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform3(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Transform(_First1, _Last1,
  _First2, _Dest, _Func));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform3(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last1 - _First1);
 _Transform(_First1, _Last1,
  _First2, _Unchecked(_Dest), _Func);
 return (_Ans);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  input_iterator_tag, input_iterator_tag)
 {
 return (_Transform3(_First1, _Last1,
  _First2, _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _InIt2 _Last2 = _First2 + (_Last1 - _First1);
 _Last2 = _Last2;
 return (_Transform3(_First1, _Last1,
  _Unchecked(_First2), _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  true_type)
 {
 return (_Transform2(_First1, _Last1,
  _First2, _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_First2)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  false_type)
 {
 return (_Transform2(_First1, _Last1,
  _First2, _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_First2)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
 {
 _Debug_range_ptr(_First1, _Last1, _First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1219);
 _Debug_pointer_if(_First1 != _Last1, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1220);
 _Debug_pointer_if(_First1 != _Last1, _Func, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1221);
 return (_Transform2(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Dest, _Func,
  _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _OutIt _Dest, _Fn2 _Func)
 {
 return (::std:: transform(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Dest, _Func));
 }

template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Fn2> inline
 _OutTy *transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutTy (&_Dest)[_OutSize], _Fn2 _Func)
 {
 return (_Unchecked(
  ::std:: transform(_First1, _Last1,
   _First2, _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _OutTy,
 size_t _OutSize,
 class _Fn2> inline
 _OutTy *transform(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _OutTy (&_Dest)[_OutSize], _Fn2 _Func)
 {
 return (_Unchecked(
  ::std:: transform(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2),
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }




template<class _FwdIt,
 class _Ty> inline
 void _Replace(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Oldval)
   *_First = _Newval;
 }

template<class _FwdIt,
 class _Ty> inline
 void replace(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1286);
 _Replace(_Unchecked(_First), _Unchecked(_Last),
  _Oldval, _Newval);
 }


template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void _Replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   *_First = _Val;
 }

template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1307);
 _Replace_if(_Unchecked(_First), _Unchecked(_Last),
  _Pred, _Val);
 }


template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = *_First == _Oldval ? _Newval : *_First;
 return (_Dest);
 }
# 1336 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Oldval, _Newval));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Replace_copy(_First, _Last,
  _Unchecked(_Dest), _Oldval, _Newval);
 return (_Ans);
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  true_type)
 {
 return (_Replace_copy(_First, _Last,
  _Dest, _Oldval, _Newval,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  false_type)
 {
 return (_Replace_copy(_First, _Last,
  _Dest, _Oldval, _Newval,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1391);
 return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Oldval, _Newval,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Ty> inline
 _OutTy *replace_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], const _Ty& _Oldval, const _Ty& _Newval)
 {
 return (_Unchecked(
  ::std:: replace_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Oldval, _Newval)));
 }




template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First, (void)++_Dest)
  *_Dest = _Pred(*_First) ? _Val : *_First;
 return (_Dest);
 }
# 1438 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Replace_copy_if(_First, _Last,
  _Dest, _Pred, _Val));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Replace_copy_if(_First, _Last,
  _Unchecked(_Dest), _Pred, _Val);
 return (_Ans);
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  true_type)
 {
 return (_Replace_copy_if(_First, _Last,
  _Dest, _Pred, _Val,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  false_type)
 {
 return (_Replace_copy_if(_First, _Last,
  _Dest, _Pred, _Val,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1498);
 _Debug_pointer_if(_First != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1499);
 return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred, _Val,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr,
 class _Ty> inline
 _OutTy *replace_copy_if(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred, const _Ty& _Val)
 {
 return (_Unchecked(
  ::std:: replace_copy_if(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred, _Val)));
 }




template<class _FwdIt,
 class _Fn0> inline
 void _Generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
 {
 for (; _First != _Last; ++_First)
  *_First = _Func();
 }

template<class _FwdIt,
 class _Fn0> inline
 void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
 {
 _Debug_range_ptr(_First, _Last, _Func, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1534);
 _Generate(_Unchecked(_First), _Unchecked(_Last), _Func);
 }


template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
 {
 for (; 0 < _Count; --_Count, (void)++_Dest)
  *_Dest = _Func();
 return (_Dest);
 }
# 1559 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n1(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  _Mutable_iterator_tag)
 {
 return (_Generate_n(_Dest, _Count, _Func));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n1(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Ans = _Ans;
 return (_Rechecked(_Dest,
  _Generate_n(_Unchecked(_Dest), _Count, _Func)));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  true_type)
 {
 return (_Generate_n1(_Dest, _Count, _Func,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  false_type)
 {
 return (_Generate_n1(_Dest, _Count, _Func,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
 {
 _Debug_pointer_if(0 < _Count, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1606);
 _Debug_pointer_if(0 < _Count, _Func, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1607);
 return (_Generate_n(_Dest, _Count, _Func,
  _Is_checked(_Dest)));
 }


template<class _OutTy,
 size_t _OutSize,
 class _Diff,
 class _Fn0> inline
 _OutTy *generate_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, _Fn0 _Func)
 {
 return (_Unchecked(
  ::std:: generate_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
   _Count, _Func)));
 }




template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (!(*_First == _Val))
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1636);
   *_Dest++ = *_First;
   }
 return (_Dest);
 }
# 1654 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val,
  true_type)
 {
 return (_Remove_copy(_First, _Last,
  _Dest, _Val));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val,
  false_type)
 {
 return (_Remove_copy(_First, _Last,
  _Dest, _Val));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1683);
 return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Val,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Ty> inline
 _OutTy *remove_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], const _Ty& _Val)
 {
 return (_Unchecked(
  ::std:: remove_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Val)));
 }




template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1714);
   *_Dest++ = *_First;
   }
 return (_Dest);
 }
# 1732 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred,
  true_type)
 {
 return (_Remove_copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred,
  false_type)
 {
 return (_Remove_copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1761);
 return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *remove_copy_if(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: remove_copy_if(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _FwdIt,
 class _Ty> inline
 _FwdIt _Remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _FwdIt _Next = _First;
 for (++_First; _First != _Last; ++_First)
  if (!(*_First == _Val))
   *_Next++ = _Move(*_First);
 return (_Next);
 }

template<class _FwdIt,
 class _Ty> inline
 _FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _First = ::std:: find(_First, _Last, _Val);
 if (_First == _Last)
  return (_First);
 else
  return (_Rechecked(_First,
   _Remove(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Next = _First;
 for (++_First; _First != _Last; ++_First)
 if (!_Pred(*_First))
  *_Next++ = _Move(*_First);
 return (_Next);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _First = ::std:: find_if(_First, _Last, _Pred);
 if (_First == _Last)
  return (_First);
 else
  return (_Rechecked(_First,
   _Remove_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    {
    for (; ++_First != _Last; )
     if (!_Pred(*_Firstb, *_First))
      *++_Firstb = _Move(*_First);
    return (++_Firstb);
    }
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1851);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1852);
 return (_Rechecked(_First,
  _Unique(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: unique(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _OutIt,
 class _Ty,
 class _Pr> inline
 _OutIt _Unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, _Ty *)
 {
 _Ty _Val = *_First;

 for (*_Dest++ = _Val; ++_First != _Last; )
  if (!_Pred(_Val, *_First))
   {
   _Val = *_First;
   *_Dest++ = _Val;
   }
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, input_iterator_tag)
 {
 return (_Unique_copy(_First, _Last, _Dest, _Pred,
  _Val_type(_First)));
 }

template<class _FwdIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
  _OutIt _Dest, _Pr _Pred, forward_iterator_tag)
 {
 _FwdIt _Firstb = _First;

 for (*_Dest++ = *_Firstb; ++_First != _Last; )
  if (!_Pred(*_Firstb, *_First))
   {
   _Firstb = _First;
   *_Dest++ = *_Firstb;
   }
 return (_Dest);
 }
# 1923 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Unique_copy(_First, _Last,
  _Dest, _Pred, _Iter_cat(_First)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Unique_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Unique_copy(_First, _Last,
  _Dest, _Pred, _Iter_cat(_First)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1950);
 _Debug_pointer_if(_First != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 1951);
 return (_First == _Last ? _Dest :
  _Unique_copy1(_Unchecked(_First), _Unchecked(_Last),
   _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *unique_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: unique_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt,
 class _OutIt> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *unique_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }



template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 for (; _First != _Last; ++_Dest)
  *_Dest = *--_Last;
 return (_Dest);
 }
# 2015 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Reverse_copy(_First, _Last,
  _Dest));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Reverse_copy(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  true_type)
 {
 return (_Reverse_copy(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _BidIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  false_type)
 {
 return (_Reverse_copy(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 _Debug_range_ptr(_First, _Last, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2063);
 return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _BidIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *reverse_copy(_BidIt _First, _BidIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: reverse_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _FwdIt,
 class _OutIt> inline
 _OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest)
 {
 _Dest = ::std:: copy(_Mid, _Last, _Dest);
 return (::std:: copy(_First, _Mid, _Dest));
 }


template<class _RanIt,
 class _Fn1,
 class _Diff> inline
 void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func, _Diff *)
 {
 _RanIt _Next = _First;
 for (_Diff _Index = 2; ++_Next != _Last; ++_Index)
  {
  _Diff _Off = _Func(_Index);


  if (_Off < 0 || _Index <= _Off)
   {
   _Debug_message(L"random value out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2106);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2107, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2107, 0); };
   }





  ::std:: iter_swap(_Next, _First + _Off);
  }
 }

template<class _RanIt,
 class _Fn1> inline
 void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2122);
 if (2 <= _Last - _First)
  {
  _Debug_pointer(_Func, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2125);
  _Random_shuffle(_Unchecked(_First), _Unchecked(_Last), _Func,
   _Dist_type(_First));
  }
 }

template<class _RanIt,
 class _Urng> inline
 void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
 {
 typedef typename iterator_traits<_RanIt>::difference_type _Diff;
 typedef typename remove_reference<_Urng>::type _Urng0;
 _Rng_from_urng<_Diff, _Urng0> _Rng(_Func);
 _Random_shuffle(_First, _Last, _Rng);
 }



template<class _RanIt,
 class _Fn1> inline
 void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1&& _Func)
 {
 _Random_shuffle(_First, _Last, _Func);
 }


struct _Rand_urng_from_func
 {
 typedef unsigned int result_type;

 static result_type (min)()
  {
  return (0);
  }

 static result_type (max)()
  {
  return (0x7fff);
  }

 result_type operator()()
  {
  return (:: rand());
  }
 };


template<class _RanIt> inline
 void random_shuffle(_RanIt _First, _RanIt _Last)
 {
 _Rand_urng_from_func _Func;
 ::std:: shuffle(_First, _Last, _Func);
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
  forward_iterator_tag)
 {
 while (_First != _Last && _Pred(*_First))
  ++_First;

 if (_First == _Last)
  return (_First);

 for (_FwdIt _Next = ::std:: next(_First); _Next != _Last; ++_Next)
  if (_Pred(*_Next))
   ::std:: iter_swap(_First++, _Next);

 return (_First);
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
  bidirectional_iterator_tag)
 {
 for (; ; ++_First)
  {
  for (; _First != _Last && _Pred(*_First); ++_First)
   ;
  if (_First == _Last)
   break;

  for (; _First != --_Last && !_Pred(*_Last); )
   ;
  if (_First == _Last)
   break;

  ::std:: iter_swap(_First, _Last);
  }
 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2225);
 return (_Rechecked(_First,
  _Partition(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Iter_cat(_First))));
 }


template<class _BidIt,
 class _Diff,
 class _Ty> inline
 _BidIt _Buffered_rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count1 == 0 || _Count2 == 0)
  {
  ::std:: advance(_First, _Count2);
  return (_First);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move(_First, _Mid, _Tempbuf._Init());
  _Move(_Mid, _Last, _First);
  return (_Move_backward(_Tempbuf._First(), _Tempbuf._Last(),
   _Last));
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move(_Mid, _Last, _Tempbuf._Init());
  _Move_backward(_First, _Mid, _Last);
  return (_Move(_Tempbuf._First(), _Tempbuf._Last(), _First));
  }
 else
  {
  return (::std:: rotate(_First, _Mid, _Last));
  }
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 _BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
  _Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count == 0)
  return (_First);
 else if (_Count == 1)
  return (_Pred(*_First) ? _Last : _First);
 else if (_Count <= _Tempbuf._Maxlen())
  {
  _BidIt _Next = _First;
  for (_Tempbuf._Init(); _First != _Last; ++_First)
   if (_Pred(*_First))
    *_Next++ = _Move(*_First);
   else
    *_Tempbuf++ = _Move(*_First);

  _Move(_Tempbuf._First(), _Tempbuf._Last(), _Next);
  return (_Next);
  }
 else
  {
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count / 2);

  _BidIt _Left = _Stable_partition(_First, _Mid, _Pred,
   _Count / 2, _Tempbuf);
  _BidIt _Right = _Stable_partition(_Mid, _Last, _Pred,
   _Count - _Count / 2, _Tempbuf);

  _Diff _Count1 = 0;
  _Distance(_Left, _Mid, _Count1);
  _Diff _Count2 = 0;
  _Distance(_Mid, _Right, _Count2);

  return (_Buffered_rotate(_Left, _Mid, _Right,
   _Count1, _Count2, _Tempbuf));
  }
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 _BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
  _Diff *, _Ty *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);
 _Temp_iterator<_Ty> _Tempbuf(_Count);
 return (_Stable_partition(_First, _Last, _Pred, _Count, _Tempbuf));
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2322);
 return (_First == _Last ? _First
  : _Rechecked(_First,
   _Stable_partition(_Unchecked(_First), _Unchecked(_Last),
    _Pred, _Dist_type(_First), _Val_type(_First))));
 }



template<class _RanIt,
 class _Pr> inline
 void _Debug_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_RanIt _Root = _First; ++_First != _Last; ++_Root)
   {
   if (_Debug_lt_pred(_Pred, *_Root, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2338))
    _Debug_message(L"invalid heap", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2339);
   else if (++_First == _Last)
    break;
   else if (_Debug_lt_pred(_Pred, *_Root, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2342))
    _Debug_message(L"invalid heap", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2343);
   }
 }
# 2355 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap(_RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty&& _Val, _Pr _Pred)
 {
 for (_Diff _Idx = (_Hole - 1) / 2;
  _Top < _Hole && _Debug_lt_pred(_Pred, *(_First + _Idx), _Val, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2363);
  _Idx = (_Hole - 1) / 2)
  {
  *(_First + _Hole) = _Move(*(_First + _Idx));
  _Hole = _Idx;
  }

 *(_First + _Hole) = _Move(_Val);
 }

template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
 {
 _Diff _Count = _Last - _First;
 if (0 < _Count)
  {
  _Ty _Val = _Move(*_Last);
  _Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2391);
 if (_First != _Last)
  {
  --_Last;
  _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
  _Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First), _Val_type(_First));
  }
 }


template<class _RanIt> inline
 void push_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: push_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
  _Ty&& _Val, _Pr _Pred)
 {
 _Diff _Top = _Hole;
 _Diff _Idx = 2 * _Hole + 2;

 for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
  {
  if (_Debug_lt_pred(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2421))
   --_Idx;
  *(_First + _Hole) = _Move(*(_First + _Idx));
  _Hole = _Idx;
  }

 if (_Idx == _Bottom)
  {
  *(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
  _Hole = _Bottom - 1;
  }
 _Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
 }

template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty&& _Val, _Pr _Pred, _Diff *)
 {
 *_Dest = _Move(*_First);
 _Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
  _Move(_Val), _Pred);
 }

template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
 {
 _Ty _Val = _Move(*(_Last - 1));
 _Pop_heap(_First, _Last - 1, _Last - 1,
  _Move(_Val), _Pred, _Dist_type(_First));
 }

template<class _RanIt,
 class _Pr> inline
 void _Pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
  _Val_type(_First));
 }

template<class _RanIt,
 class _Pr> inline
 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2469);
 _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 if (2 <= _Last - _First)
  _Pop_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void pop_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: pop_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
 {
 _Diff _Bottom = _Last - _First;
 for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
  {
  --_Hole;
  _Ty _Val = _Move(*(_First + _Hole));
  _Adjust_heap(_First, _Hole, _Bottom,
   _Move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2503);
 if (2 <= _Last - _First)
  {
  _Debug_pointer(_Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2506);
  _Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First), _Val_type(_First));
  }
 }


template<class _RanIt> inline
 void make_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: make_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 for (; 2 <= _Last - _First; --_Last)
  _Pop_heap(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2532);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2533);
 _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 _Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void sort_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort_heap(_First, _Last, less<>());
 }


template<class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr> inline
 _FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid, _Val))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }
 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 return (_Rechecked(_First,
  _Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
   _Dist_type(_First))));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: lower_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr> inline
 _FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (!_Pred(_Val, *_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }
 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 return (_Rechecked(_First,
  _Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
   _Dist_type(_First))));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: upper_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Debug_lt_pred(_Pred, *_Mid, _Val, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2657))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else if (_Pred(_Val, *_Mid))
   _Count = _Count2;
  else
   {
   _FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val, _Pred);
   ::std:: advance(_First, _Count);
   _FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val, _Pred);
   return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
   }
  }

 return (pair<_FwdIt, _FwdIt>(_First, _First));
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr _Pred)
 {
 pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
  _Equal_range(_Unchecked(_First), _Unchecked(_Last),
   _Val, _Pred, _Dist_type(_First)));
 return (pair<_FwdIt, _FwdIt>(
  _Rechecked(_First, _Ans.first),
  _Rechecked(_Last, _Ans.second)));
 }


template<class _FwdIt,
 class _Ty> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val)
 {
 return (::std:: equal_range(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _First = ::std:: lower_bound(_First, _Last, _Val, _Pred);
 return (_First != _Last && !_Pred(_Val, *_First));
 }


template<class _FwdIt,
 class _Ty> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: binary_search(_First, _Last, _Val, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge0(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2732))
    {
    *_Dest++ = *_First2++;
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = *_First1++;
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Copy_impl(_First1, _Last1, _Dest);
 return (_Copy_impl(_First2, _Last2, _Dest));
 }
# 2765 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, input_iterator_tag,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Merge0(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, random_access_iterator_tag,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last1 - _First1)
  + (_Last2 - _First2);
 _Merge0(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred);
 return (_Ans);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Merge2(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred, _Iter_cat(_First1),
  _Iter_cat(_First2), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Merge2(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred, _Iter_cat(_First1),
  _Iter_cat(_First2), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2833);
 _Debug_order(_First2, _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2834);
 _Debug_pointer_if(_First1 != _Last1 || _First2 != _Last2, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2835);
 return (_Merge2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: merge(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _BidIt1,
 class _BidIt2,
 class _BidIt3,
 class _Pr> inline
 _BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred,
  bool _In_place = false)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *--_Last2, *--_Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2897))
    {
    *--_Dest = _Move(*_Last1);
    ++_Last2;
    if (_First1 == _Last1)
     break;
    }
   else
    {
    *--_Dest = _Move(*_Last2);
    ++_Last1;
    if (_First2 == _Last2)
     break;
    }
   }

 _Dest = _Move_backward(_First2, _Last2, _Dest);
 if (!_In_place)
  _Dest = _Move_backward(_First1, _Last1, _Dest);
 return (_Dest);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, bool _In_place = false)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2930))
    {
    *_Dest++ = _Move(*_First2++);
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = _Move(*_First1++);
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Move(_First1, _Last1, _Dest);
 if (!_In_place)
  _Dest = _Move(_First2, _Last2, _Dest);
 return (_Dest);
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2,
   _Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
 {
 if (_Count1 == 0 || _Count2 == 0)
  ;
 else if (_Count1 + _Count2 == 2)
  {
  if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 2962))
   ::std:: iter_swap(_First, _Mid);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move(_First, _Mid, _Tempbuf._Init());
  _Merge(_Tempbuf._First(), _Tempbuf._Last(),
   _Mid, _Last, _First, _Pred, true);
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move(_Mid, _Last, _Tempbuf._Init());
  _Merge_backward(_First, _Mid,
   _Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred, true);
  }
 else
  {
  _BidIt _Firstn, _Lastn;
  _Diff _Count1n, _Count2n;
  if (_Count2 < _Count1)
   {
   _Count1n = _Count1 / 2, _Count2n = 0;
   _Firstn = _First;
   ::std:: advance(_Firstn, _Count1n);
   _Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
   _Distance(_Mid, _Lastn, _Count2n);
   }
  else
   {
   _Count1n = 0, _Count2n = _Count2 / 2;
   _Lastn = _Mid;
   ::std:: advance(_Lastn, _Count2n);
   _Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
   _Distance(_First, _Firstn, _Count1n);
   }
  _BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
   _Count1 - _Count1n, _Count2n, _Tempbuf);
  _Buffered_merge(_First, _Firstn, _Midn,
   _Count1n, _Count2n, _Tempbuf, _Pred);
  _Buffered_merge(_Midn, _Lastn, _Last,
   _Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
  _Diff *, _Ty *)
 {
 _Diff _Count1 = 0;
 _Distance(_First, _Mid, _Count1);
 _Diff _Count2 = 0;
 _Distance(_Mid, _Last, _Count2);
 _Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
 _Buffered_merge(_First, _Mid, _Last,
  _Count1, _Count2, _Tempbuf, _Pred);
 }

template<class _BidIt,
 class _Pr> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
 {
 _Debug_order(_First, _Mid, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3026);
 _Debug_order(_Mid, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3027);
 if (_First != _Mid && _Mid != _Last)
  _Inplace_merge(
   _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
   _Dist_type(_First), _Val_type(_First));
 }


template<class _BidIt> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {
 ::std:: inplace_merge(_First, _Mid, _Last, less<>());
 }


template<class _BidIt,
 class _Pr,
 class _Ty> inline
 void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
 {
 if (_First != _Last)
  for (_BidIt _Next = _First; ++_Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Ty _Val = _Move(*_Next);

   if (_Debug_lt_pred(_Pred, _Val, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3053))
    {
    _Move_backward(_First, _Next, ++_Next1);
    *_First = _Move(_Val);
    }
   else
    {
    for (_BidIt _First1 = _Next1;
     _Debug_lt_pred(_Pred, _Val, *--_First1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3061);
     _Next1 = _First1)
     *_Next1 = _Move(*_First1);
    *_Next1 = _Move(_Val);
    }
   }
 }

template<class _BidIt,
 class _Pr> inline
 void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));
 }

template<class _RanIt,
 class _Pr> inline
 void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3080))
  ::std:: iter_swap(_Mid, _First);
 if (_Debug_lt_pred(_Pred, *_Last, *_Mid, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3082))
  {
  ::std:: iter_swap(_Last, _Mid);
  if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3085))
   ::std:: iter_swap(_Mid, _First);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 if (40 < _Last - _First)
  {
  size_t _Step = (_Last - _First + 1) / 8;
  _Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);
  _Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
  _Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
  _Med3(_First + _Step, _Mid, _Last - _Step, _Pred);
  }
 else
  _Med3(_First, _Mid, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 pair<_RanIt, _RanIt>
  _Unguarded_partition(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _RanIt _Mid = _First + (_Last - _First) / 2;
 _Median(_First, _Mid, _Last - 1, _Pred);
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while (_First < _Pfirst
  && !_Debug_lt_pred(_Pred, *(_Pfirst - 1), *_Pfirst, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3117)
  && !_Pred(*_Pfirst, *(_Pfirst - 1)))
  --_Pfirst;
 while (_Plast < _Last
  && !_Debug_lt_pred(_Pred, *_Plast, *_Pfirst, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3121)
  && !_Pred(*_Pfirst, *_Plast))
  ++_Plast;

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (; ; )
  {
  for (; _Gfirst < _Last; ++_Gfirst)
   if (_Debug_lt_pred(_Pred, *_Pfirst, *_Gfirst, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3131))
    ;
   else if (_Pred(*_Gfirst, *_Pfirst))
    break;
   else if (_Plast++ != _Gfirst)
    ::std:: iter_swap(_Plast - 1, _Gfirst);
  for (; _First < _Glast; --_Glast)
   if (_Debug_lt_pred(_Pred, *(_Glast - 1), *_Pfirst, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3138))
    ;
   else if (_Pred(*_Pfirst, *(_Glast - 1)))
    break;
   else if (--_Pfirst != _Glast - 1)
    ::std:: iter_swap(_Pfirst, _Glast - 1);
  if (_Glast == _First && _Gfirst == _Last)
   return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  if (_Glast == _First)
   {
   if (_Plast != _Gfirst)
    ::std:: iter_swap(_Pfirst, _Plast);
   ++_Plast;
   ::std:: iter_swap(_Pfirst++, _Gfirst++);
   }
  else if (_Gfirst == _Last)
   {
   if (--_Glast != --_Pfirst)
    ::std:: iter_swap(_Glast, _Pfirst);
   ::std:: iter_swap(_Pfirst, --_Plast);
   }
  else
   ::std:: iter_swap(_Gfirst++, --_Glast);
  }
 }

template<class _RanIt,
 class _Diff,
 class _Pr> inline
 void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)
 {
 _Diff _Count;
 for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
  {
  pair<_RanIt, _RanIt> _Mid =
   _Unguarded_partition(_First, _Last, _Pred);
  _Ideal /= 2, _Ideal += _Ideal / 2;

  if (_Mid.first - _First < _Last - _Mid.second)
   {
   _Sort(_First, _Mid.first, _Ideal, _Pred);
   _First = _Mid.second;
   }
  else
   {
   _Sort(_Mid.second, _Last, _Ideal, _Pred);
   _Last = _Mid.first;
   }
  }

 if (_ISORT_MAX < _Count)
  {
  ::std:: make_heap(_First, _Last, _Pred);
  ::std:: sort_heap(_First, _Last, _Pred);
  }
 else if (2 <= _Count)
  _Insertion_sort(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3202);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3203);
 _Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);
 }


template<class _RanIt> inline
 void sort(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort(_First, _Last, less<>());
 }


template<class _BidIt,
 class _OutIt,
 class _Diff,
 class _Pr> inline
 void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred)
 {
 for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);
  _BidIt _Mid2 = _Mid1;
  ::std:: advance(_Mid2, _Chunk);

  _Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
  _First = _Mid2;
  }

 if (_Count <= _Chunk)
  _Move(_First, _Last, _Dest);
 else
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);

  _Merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
 {
 _BidIt _Mid = _First;
 for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
  {
  _BidIt _Midn = _Mid;
  ::std:: advance(_Midn, (int)_ISORT_MAX);

  _Insertion_sort(_Mid, _Midn, _Pred);
  _Mid = _Midn;
  }
 _Insertion_sort(_Mid, _Last, _Pred);

 for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
  {
  _Chunked_merge(_First, _Last, _Tempbuf._Init(),
   _Chunk, _Count, _Pred);
  _Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
   _Chunk *= 2, _Count, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
 {
 if (_Count <= _ISORT_MAX)
  _Insertion_sort(_First, _Last, _Pred);
 else
  {
  _Diff _Count2 = (_Count + 1) / 2;
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Count2 <= _Tempbuf._Maxlen())
   {
   _Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
    _Tempbuf, _Pred);
   }
  else
   {
   _Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
   }

  _Buffered_merge(_First, _Mid, _Last,
   _Count2, _Count - _Count2, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);
 _Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
 _Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);
 }

template<class _BidIt,
 class _Pr> inline
 void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3319);
 if (_First != _Last)
  {
  _Debug_pointer_if(::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3322);
  _Stable_sort(_Unchecked(_First), _Unchecked(_Last),
   _Dist_type(_First), _Val_type(_First), _Pred);
  }
 }


template<class _BidIt> inline
 void stable_sort(_BidIt _First, _BidIt _Last)
 {
 ::std:: stable_sort(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  _Pr _Pred, _Ty *)
 {
 ::std:: make_heap(_First, _Mid, _Pred);

 for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3345))
   {
   _Ty _Val = _Move(*_Next);
   _Pop_heap(_First, _Mid, _Next, _Move(_Val), _Pred,
    _Dist_type(_First));
   }
 ::std:: sort_heap(_First, _Mid, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Mid, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3358);
 _Debug_range(_Mid, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3359);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3360);
 _Partial_sort(
  _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
  _Val_type(_First));
 }


template<class _RanIt> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
 {
 ::std:: partial_sort(_First, _Mid, _Last, less<>());
 }


template<class _InIt,
 class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty *)
 {
 _RanIt _Mid2 = _First2;
 for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, (void)++_Mid2)
  *_Mid2 = *_First1;
 ::std:: make_heap(_First2, _Mid2, _Pred);

 for (; _First1 != _Last1; ++_First1)
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3388))
   _Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
    _Ty(*_First1), _Pred);

 ::std:: sort_heap(_First2, _Mid2, _Pred);
 return (_Mid2);
 }

template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3402);
 _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3403);

 return (_First1 == _Last1 || _First2 == _Last2 ? _First2
  : _Rechecked(_First2,
   _Partial_sort_copy(
    _Unchecked(_First1), _Unchecked(_Last1),
    _Unchecked(_First2), _Unchecked(_Last2), _Pred,
    _Dist_type(_First2), _Val_type(_First1))));
 }


template<class _InIt,
 class _RanIt> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2)
 {
 return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
 if (_Nth == _Last)
  return;

 for (; _ISORT_MAX < _Last - _First; )
  {
  pair<_RanIt, _RanIt> _Mid =
   _Unguarded_partition(_First, _Last, _Pred);

  if (_Mid.second <= _Nth)
   _First = _Mid.second;
  else if (_Mid.first <= _Nth)
   return;
  else
   _Last = _Mid.first;
  }

 _Insertion_sort(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Nth, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3451);
 _Debug_range(_Nth, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3452);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3453);
 _Nth_element(
  _Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
 {
 ::std:: nth_element(_First, _Nth, _Last, less<>());
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3473))
   return (false);
  else if (_Pred(*_First1, *_First2))
   ++_First1;
  else
   {
   ++_First1;
   ++_First2;
   }
 return (_First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3491);
 _Debug_order(_First2, _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3492);
 return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: includes(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3516))
   {
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   *_Dest++ = *_First1;
   ++_First1;
   ++_First2;
   }
 _Dest = ::std:: copy(_First1, _Last1, _Dest);
 return (::std:: copy(_First2, _Last2, _Dest));
 }
# 3550 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_union(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_union2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_union(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3584);
 _Debug_order(_First2, _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3585);
 _Debug_pointer_if(_First1 != _Last1 || _First2 != _Last2, _Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3586);
 return (_Set_union2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_union(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3642))
   ++_First1;
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3648);
   *_Dest++ = *_First1++;
   ++_First2;
   }
 return (_Dest);
 }
# 3669 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_intersection(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_intersection2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_intersection(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3703);
 _Debug_order(_First2, _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3704);
 return (_Set_intersection2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_intersection(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3761))
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3763);
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   ++_First1;
   ++_First2;
   }
 return (::std:: copy(_First1, _Last1, _Dest));
 }
# 3792 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3827);
 _Debug_order(_First2, _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3828);
 return (_Set_difference2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_difference(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3888))
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3890);
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3896);
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   ++_First1;
   ++_First2;
   }
 _Dest = ::std:: copy(_First1, _Last1, _Dest);
 return (::std:: copy(_First2, _Last2, _Dest));
 }
# 3925 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm" 3
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_symmetric_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_symmetric_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_symmetric_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3960);
 _Debug_order(_First2, _Last2, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 3961);
 return (_Set_symmetric_difference2(
  _Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_symmetric_difference(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Debug_lt_pred(_Pred, *_Found, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4020))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4029);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4030);
 return (_Rechecked(_First,
  _Max_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: max_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Debug_lt_pred(_Pred, *_First, *_Found, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4050))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4059);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4060);
 return (_Rechecked(_First,
  _Min_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: min_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 pair<_FwdIt, _FwdIt> _Found(_First, _First);

 if (_First != _Last)
  for (; ++_First != _Last; )
   {
   _FwdIt _Next = _First;
   if (++_Next == _Last)
    {
    if (_Debug_lt_pred(_Pred, *_First, *_Found.first, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4086))
     _Found.first = _First;
    else if (!_Debug_lt_pred(_Pred, *_First, *_Found.second, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4088))
     _Found.second = _First;
    }
   else
    {
    if (_Debug_lt_pred(_Pred, *_Next, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4093))
     {
     if (_Debug_lt_pred(_Pred, *_Next, *_Found.first, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4095))
      _Found.first = _Next;
     if (!_Debug_lt_pred(_Pred, *_First, *_Found.second, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4097))
      _Found.second = _First;
     }
    else
     {
     if (_Debug_lt_pred(_Pred, *_First, *_Found.first, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4102))
      _Found.first = _First;
     if (!_Debug_lt_pred(_Pred, *_Next, *_Found.second, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4104))
      _Found.second = _Next;
     }
    _First = _Next;
    }
   }
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4118);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4119);
 pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
  _Minmax_element(_Unchecked(_First), _Unchecked(_Last), _Pred));
 return (pair<_FwdIt, _FwdIt>(
  _Rechecked(_First, _Ans.first),
  _Rechecked(_Last, _Ans.second)));
 }


template<class _FwdIt> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: minmax_element(_First, _Last, less<>()));
 }


template<class _Ty> inline



 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Debug_lt(_Left, _Right, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4142) ? _Right : _Left);
 }

template<class _Ty> inline

 _Ty (max)(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_Res = ::std:: max_element(_Ilist.begin(), _Ilist.end());
 return (*_Res);
 }


template<class _Ty,
 class _Pr> inline
 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
 {
 return (_Debug_lt_pred(_Pred, _Left, _Right, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4159) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline

 _Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = ::std:: max_element(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline



 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Debug_lt(_Right, _Left, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4178) ? _Right : _Left);
 }

template<class _Ty> inline

 _Ty (min)(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_Res = ::std:: min_element(_Ilist.begin(), _Ilist.end());
 return (*_Res);
 }


template<class _Ty,
 class _Pr> inline
 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right,
  _Pr _Pred)
 {
 return (_Debug_lt_pred(_Pred, _Right, _Left, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4195) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline

 _Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = ::std:: min_element(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty> inline

 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
 {
 pair<const _Ty *, const _Ty *> _Res = ::std:: minmax_element(
  _Ilist.begin(), _Ilist.end());
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _Ty,
 class _Pr> inline
 constexpr pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty,
 class _Pr> inline

 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist,
  _Pr _Pred)
 {
 pair<const _Ty *, const _Ty *> _Res = ::std:: minmax_element(
  _Ilist.begin(), _Ilist.end(), _Pred);
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Debug_lt_pred(_Pred, *--_Next, *_Next1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4260))
   {
   _BidIt _Mid = _Last;
   for (; !_Debug_lt_pred(_Pred, *_Next, *--_Mid, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4263); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   ::std:: reverse(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   ::std:: reverse(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4282);
 return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool next_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: next_permutation(_First, _Last, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Debug_lt_pred(_Pred, *_Next1, *--_Next, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4305))
   {
   _BidIt _Mid = _Last;
   for (; !_Debug_lt_pred(_Pred, *--_Mid, *_Next, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4308); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   ::std:: reverse(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   ::std:: reverse(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range_ptr(_First, _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4327);
 return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: prev_permutation(_First, _Last, less<>()));
 }


template<class _RanIt,
 class _Diff,
 class _Pr> inline
 _RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *)
 {
 _Diff _Size = _Last - _First;

 if (2 <= _Size)
  for (_Diff _Off = 0; ++_Off < _Size; )
   if (_Debug_lt_pred(_Pred, *(_First + (_Off - 1) / 2), *(_First + _Off), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4349))

    return (_First + _Off);
 return (_Last);
 }

template<class _RanIt,
 class _Pr>
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4358);
 _Debug_pointer_if(2 <= _Last - _First, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4359);
 return (_Rechecked(_First,
  _Is_heap_until(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First))));
 }

template<class _RanIt,
 class _Pr>
 bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 return (::std:: is_heap_until(_First, _Last, _Pred) == _Last);
 }


template<class _RanIt>
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap_until(_First, _Last, less<>()));
 }

template<class _RanIt>
 bool is_heap(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
   if (_Debug_lt_pred(_Pred, *_Next, *_First, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4392))
    return (_Next);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4401);
 _Debug_pointer_if(_First != _Last && ::std:: next(_First) != _Last, _Pred, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\algorithm", 4402);
 return (_Rechecked(_First,
  _Is_sorted_until(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }

template<class _FwdIt,
 class _Pr> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 return (::std:: is_sorted_until(_First, _Last, _Pred) == _Last);
 }


template<class _FwdIt> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted_until(_First, _Last, less<>()));
 }

template<class _FwdIt> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted(_First, _Last, less<>()));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp" 2
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocbuf" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 6385)

namespace std {

template<class _Codecvt,
 class _Elem = wchar_t,
 class _Traits = char_traits<_Elem> >
 class wbuffer_convert
  : public basic_streambuf<_Elem, _Traits>
 {
 enum _Mode {_Unused, _Wrote, _Need, _Got, _Eof};
 enum {_STRING_INC = 8};
public:
 typedef wbuffer_convert<_Codecvt, _Elem, _Traits> _Myt;
 typedef streambuf _Mysb;
 typedef char_traits<char> _Byte_traits;

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;
 typedef typename _Codecvt::state_type state_type;

 explicit wbuffer_convert(_Mysb *_Strbuf = 0)
  : _Pcvt(new _Codecvt),
   _Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
  {
  static state_type _State0;

  _State = _State0;
  _Loc = locale(_Loc, _Pcvt);
  }

 wbuffer_convert(_Mysb *_Strbuf, const _Codecvt *_Pcvt_arg)
  : _Pcvt(_Pcvt_arg),
   _Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
  {
  static state_type _State0;

  _State = _State0;
  _Loc = locale(_Loc, _Pcvt);
  }

 wbuffer_convert(_Mysb *_Strbuf,
  const _Codecvt *_Pcvt_arg, state_type _State_arg)
  : _Pcvt(_Pcvt_arg),
   _Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
  {
  _State = _State_arg;
  _Loc = locale(_Loc, _Pcvt);
  }

 virtual ~wbuffer_convert() noexcept
  {
  char *_Buf = (char *)_Str.c_str();

  for (; _Status == _Wrote ; )
   {
   char *_Dest;

   if (_Str.size() < _STRING_INC)
    _Str.assign(_STRING_INC, '\0');
   switch (_Pcvt->unshift(_State,
    _Buf, _Buf + _Str.size(), _Dest))
    {
   case _Codecvt::ok:
    _Status = _Unused;

   case _Codecvt::partial:
    {
    int _Count = (int)(_Dest - _Buf);
    if (0 < _Count
     && _Byte_traits::eq_int_type(
      _Byte_traits::eof(),
      (_Byte_traits::int_type)_Mystrbuf->sputn(_Buf,
      _Count)))
     return;

    if (_Status == _Wrote && _Count == 0)
     _Str.append(_STRING_INC, '\0');
    break;
    }

   case _Codecvt::noconv:
    return;

   default:
    return;
    }
   }
  }

 _Mysb *rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb *rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  return (_Oldstrbuf);
  }

 state_type state() const
  {
  return (_State);
  }

 wbuffer_convert(const wbuffer_convert&) = delete;
 wbuffer_convert& operator=(const wbuffer_convert&) = delete;

protected:
 virtual int_type overflow(int_type _Meta = _Traits::eof())
  {
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));
  else if (_Mystrbuf == 0 || 0 < _Nback
   || (_Status != _Unused && _Status != _Wrote))
   return (_Traits::eof());
  else
   {
   char *_Buf = (char *)_Str.c_str();
   const _Elem _Ch = _Traits::to_char_type(_Meta);
   const _Elem *_Src;
   char *_Dest;

   if (_Str.size() < _STRING_INC)
    _Str.assign(_STRING_INC, '\0');
   for (_Status = _Wrote; ; )
    switch (_Pcvt->out(_State,
     &_Ch, &_Ch + 1, _Src,
     _Buf, _Buf + _Str.size(), _Dest))
    {
    case _Codecvt::partial:
    case _Codecvt::ok:
     {
     int _Count = (int)(_Dest - _Buf);
     if (0 < _Count
      && _Byte_traits::eq_int_type(
       _Byte_traits::eof(),
       (_Byte_traits::int_type)_Mystrbuf->sputn(_Buf,
       _Count)))
      return (_Traits::eof());

     if (_Src != &_Ch)
      return (_Meta);

     if (0 < _Count)
      ;
     else if (_Str.size() < 4 * _STRING_INC)
      _Str.append(_STRING_INC, '\0');
     else
      return (_Traits::eof());
     break;
     }

    case _Codecvt::noconv:
     if (_Traits::eq_int_type(
      _Traits::eof(),
      (typename _Traits::int_type)_Mystrbuf->sputn(
       (char *)&_Ch,
       (streamsize)sizeof (_Elem))))
      return (_Traits::eof());
     else
      return (_Meta);

    default:
     return (_Traits::eof());
    }
   }
  }

 virtual int_type pbackfail(int_type _Meta = _Traits::eof())
  {
  if (sizeof (_Myback) / sizeof (_Myback[0]) <= _Nback
   || _Status == _Wrote)
   return (_Traits::eof());
  else
   {
   if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
    _Myback[_Nback] = _Traits::to_char_type(_Meta);
   ++_Nback;
   if (_Status == _Unused)
    _Status = _Got;
   return (_Meta);
   }
  }

 virtual int_type underflow()
  {
  int_type _Meta;

  if (0 < _Nback)
   ;
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Get_elem()))
   return (_Meta);
  else
   _Myback[_Nback++] = _Traits::to_char_type(_Meta);
  return (_Traits::to_int_type(_Myback[_Nback - 1]));
  }

 virtual int_type uflow()
  {
  int_type _Meta;

  if (0 < _Nback)
   ;
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Get_elem()))
   return (_Meta);
  else
   _Myback[_Nback++] = _Traits::to_char_type(_Meta);
  return (_Traits::to_int_type(_Myback[--_Nback]));
  }

 virtual pos_type seekoff(off_type,
  ios::seekdir,
  ios::openmode =
   (ios::openmode)(ios::in | ios::out))
  {
  return (pos_type(-1));
  }

 virtual pos_type seekpos(pos_type,
  ios::openmode =
   (ios::openmode)(ios::in | ios::out))
  {
  return (pos_type(-1));
  }

private:
 int_type _Get_elem()
  {
  if (_Mystrbuf != 0 && _Status != _Wrote)
   {
   if (_Status == _Eof)
    ;
   else if (_Str.size() == 0)
    _Status = _Need;
   else
    _Status = _Got;

   for (; _Status != _Eof; )
    {
    char *_Buf = (char *)_Str.c_str();
    _Elem _Ch, *_Dest;
    const char *_Src;
    int _Meta;

    if (_Status != _Need)
     ;
    else if (_Byte_traits::eq_int_type(_Byte_traits::eof(),
     _Meta = _Mystrbuf->sbumpc()))
     _Status = _Eof;
    else
     _Str.append(1, _Byte_traits::to_char_type(_Meta));

    switch (_Pcvt->in(_State,
     _Buf, _Buf + _Str.size(), _Src,
     &_Ch, &_Ch + 1, _Dest))
     {
    case _Codecvt::partial:
    case _Codecvt::ok:
     _Str.erase((size_t)0,
      (size_t)(_Src - _Buf));
     if (_Dest != &_Ch)
      return (_Traits::to_int_type(_Ch));
     break;

    case _Codecvt::noconv:
     if (_Str.size() < sizeof (_Elem))
      break;
     :: memcpy(&_Ch, _Buf,
      sizeof (_Elem));
     _Str.erase((size_t)0, sizeof (_Elem));
     return (_Traits::to_int_type(_Ch));

    default:
     _Status = _Eof;
     }
    }
   }

  return (_Traits::eof());
  }

 state_type _State;
 const _Codecvt *_Pcvt;
 _Mysb *_Mystrbuf;
 _Mode _Status;
 size_t _Nback;
 _Elem _Myback[8];
 string _Str;
 locale _Loc;
 };


template<class _Codecvt,
 class _Elem = wchar_t,
 class _Walloc = allocator<_Elem>,
 class _Balloc = allocator<char> >
 class wstring_convert
 {
 enum {_BUF_INC = 8, _BUF_MAX = 16};
 void _Init(const _Codecvt *_Pcvt_arg = new _Codecvt)
  {
  static state_type _State0;
  _State = _State0;
  _Pcvt = _Pcvt_arg;
  _Loc = locale(_Loc, _Pcvt);
  _Nconv = 0;
  }

public:
 typedef basic_string<char, char_traits<char>, _Balloc> byte_string;
 typedef basic_string<_Elem, char_traits<_Elem>, _Walloc> wide_string;
 typedef typename _Codecvt::state_type state_type;
 typedef typename wide_string::traits_type::int_type int_type;

 wstring_convert()
  : _Has_berr(false), _Has_werr(false), _Has_state(false)
  {
  _Init();
  }

 explicit wstring_convert(const _Codecvt *_Pcvt_arg)
  : _Has_berr(false), _Has_werr(false), _Has_state(false)
  {
  _Init(_Pcvt_arg);
  }

 wstring_convert(const _Codecvt *_Pcvt_arg, state_type _State_arg)
  : _Has_berr(false), _Has_werr(false), _Has_state(true)
  {
  _Init(_Pcvt_arg);
  _State = _State_arg;
  }

 explicit wstring_convert(const byte_string& _Berr_arg)
  : _Has_berr(true), _Has_werr(false), _Has_state(false),
   _Berr(_Berr_arg)
  {
  _Init();
  }

 wstring_convert(const byte_string& _Berr_arg,
  const wide_string& _Werr_arg)
  : _Has_berr(true), _Has_werr(true), _Has_state(false),
   _Berr(_Berr_arg), _Werr(_Werr_arg)
  {
  _Init();
  }

 virtual ~wstring_convert() noexcept
  {
  }

 size_t converted() const noexcept
  {
  return (_Nconv);
  }

 state_type state() const
  {
  return (_State);
  }

 wide_string from_bytes(char _Byte)
  {
  return (from_bytes(&_Byte, &_Byte + 1));
  }

 wide_string from_bytes(const char *_Ptr)
  {
  return (from_bytes(_Ptr, _Ptr + :: strlen(_Ptr)));
  }

 wide_string from_bytes(const byte_string& _Bstr)
  {
  const char *_Ptr = _Bstr.c_str();
  return (from_bytes(_Ptr, _Ptr + _Bstr.size()));
  }

 wide_string from_bytes(const char *_First, const char *_Last)
  {
  static state_type _State0;
  wide_string _Wbuf, _Wstr;
  const char *_First_sav = _First;

  if (!_Has_state)
   _State = _State0;
  _Wbuf.append((:: size_t)_BUF_INC, (_Elem)'\0');
  for (_Nconv = 0; _First != _Last; _Nconv = _First - _First_sav)
   {
   _Elem *_Dest = &*_Wbuf.begin();
   _Elem *_Dnext;

   switch (_Pcvt->in(_State,
    _First, _Last, _First,
    _Dest, _Dest + _Wbuf.size(), _Dnext))
    {
   case _Codecvt::partial:
   case _Codecvt::ok:
    if (_Dest < _Dnext)
     _Wstr.append(_Dest, (:: size_t)(_Dnext - _Dest));
    else if (_Wbuf.size() < _BUF_MAX)
     _Wbuf.append((:: size_t)_BUF_INC, '\0');
    else if (_Has_werr)
     return (_Werr);
    else
     throw range_error("bad conversion");
    break;

   case _Codecvt::noconv:
    for (; _First != _Last; ++_First)
     _Wstr.append((:: size_t)1,
      (_Elem)(unsigned char)*_First);
    break;

   default:
    if (_Has_werr)
     return (_Werr);
    else
     throw range_error("bad conversion");
    }
   }
  return (_Wstr);
  }

 byte_string to_bytes(_Elem _Char)
  {
  return (to_bytes(&_Char, &_Char + 1));
  }

 byte_string to_bytes(const _Elem *_Wptr)
  {
  const _Elem *_Next = _Wptr;
  for (; (int_type)*_Next != 0; ++_Next)
   ;
  return (to_bytes(_Wptr, _Next));
  }

 byte_string to_bytes(const wide_string& _Wstr)
  {
  const _Elem *_Wptr = _Wstr.c_str();
  return (to_bytes(_Wptr, _Wptr + _Wstr.size()));
  }

 byte_string to_bytes(const _Elem *_First, const _Elem *_Last)
  {
  static state_type _State0;
  byte_string _Bbuf, _Bstr;
  const _Elem *_First_sav = _First;

  if (!_Has_state)
   _State = _State0;
  _Bbuf.append((:: size_t)_BUF_INC, '\0');
  for (_Nconv = 0; _First != _Last; _Nconv = _First - _First_sav)
   {
   char *_Dest = &*_Bbuf.begin();
   char *_Dnext;

   switch (_Pcvt->out(_State,
    _First, _Last, _First,
    _Dest, _Dest + _Bbuf.size(), _Dnext))
    {
   case _Codecvt::partial:
   case _Codecvt::ok:
    if (_Dest < _Dnext)
     _Bstr.append(_Dest, (:: size_t)(_Dnext - _Dest));
    else if (_Bbuf.size() < _BUF_MAX)
     _Bbuf.append((:: size_t)_BUF_INC, '\0');
    else if (_Has_berr)
     return (_Berr);
    else
     throw range_error("bad conversion");
    break;

   case _Codecvt::noconv:
    for (; _First != _Last; ++_First)
     _Bstr.append((:: size_t)1,
      (char)(int_type)*_First);
    break;

   default:
    if (_Has_berr)
     return (_Berr);
    else
     throw range_error("bad conversion");
    }
   }
  return (_Bstr);
  }

 wstring_convert(const wstring_convert&) = delete;
 wstring_convert& operator=(const wstring_convert&) = delete;

private:
 const _Codecvt *_Pcvt;
 locale _Loc;
 byte_string _Berr;
 wide_string _Werr;
 state_type _State;
 bool _Has_state;
 bool _Has_berr;
 bool _Has_werr;
 size_t _Nconv;
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocmes" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

#pragma warning(push)
#pragma warning(disable: 4275)

struct messages_base
 : public locale::facet
 {
 typedef int catalog;

 explicit messages_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class messages
  : public messages_base
 {
public:
 typedef _Elem char_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 catalog open(const string& _Catname, const locale& _Loc) const
  {
  return (do_open(_Catname, _Loc));
  }

 string_type get(catalog _Catval, int _Set, int _Message,
  const string_type& _Dflt) const
  {
  return (do_get(_Catval, _Set, _Message, _Dflt));
  }

 void close(catalog _Catval) const
  {
  do_close(_Catval);
  }

                         __declspec(dllimport) static locale::id id;

 explicit messages(size_t _Refs = 0)
  : messages_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 messages(const _Locinfo& _Lobj, size_t _Refs = 0)
  : messages_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new messages<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (6);
  }

protected:
 messages(const char *_Locname, size_t _Refs = 0)
  : messages_base(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 virtual ~messages() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual catalog do_open(const string&, const locale&) const
  {
  return (-1);
  }

 virtual string_type do_get(catalog, int, int,
  const string_type& _Dflt) const
  {
  return (_Dflt);
  }

 virtual void do_close(catalog) const
  {
  }
 };


template<class _Elem>
                         locale::id messages<_Elem>::id;


template<class _Elem>
 class messages_byname
  : public messages<_Elem>
 {
public:
 explicit messages_byname(const char *_Locname, size_t _Refs = 0)
  : messages<_Elem>(_Locname, _Refs)
  {
  }

 explicit messages_byname(const string& _Str, size_t _Refs = 0)
  : messages<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~messages_byname() noexcept
  {
  }
 };




template locale::id messages<char>::id;
template locale::id messages<wchar_t>::id;






}

#pragma warning(pop)
#pragma pack(pop)
# 8 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale" 2 3

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocmon" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4275)

namespace std {

struct money_base
 : public locale::facet
 {
 enum
  {
  symbol = '$', sign = '+', space = ' ', value = 'v', none = 'x'};
 typedef int part;

 struct pattern
  {
  char field[4];
  };

 money_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }
 };


template<class _Elem>
 class _Mpunct
  : public money_base
 {
public:
 typedef _Elem char_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type curr_symbol() const
  {
  return (do_curr_symbol());
  }

 string_type positive_sign() const
  {
  return (do_positive_sign());
  }

 string_type negative_sign() const
  {
  return (do_negative_sign());
  }

 int frac_digits() const
  {
  return (do_frac_digits());
  }

 pattern pos_format() const
  {
  return (do_pos_format());
  }

 pattern neg_format() const
  {
  return (do_neg_format());
  }

 explicit _Mpunct(size_t _Refs, bool _Intl)
  : money_base(_Refs), _International(_Intl)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 _Mpunct(const _Locinfo& _Lobj, size_t _Refs, bool _Intl,
  bool _Isdef = false)
  : money_base(_Refs), _International(_Intl)
  {
  _Init(_Lobj, _Isdef);
  }

protected:
 _Mpunct(const char *_Locname, size_t _Refs,
  bool _Intl, bool _Isdef = false)
  : money_base(_Refs), _International(_Intl)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 virtual ~_Mpunct() noexcept
  {
  _Tidy();
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr)
  {
  _Currencysign = _Maklocstr(_International ? _Ptr->int_curr_symbol : _Ptr->currency_symbol, (_Elem2 *)0, _Cvt);

  _Plussign = _Maklocstr(4 < (unsigned int)_Ptr->p_sign_posn ? "" : _Ptr->positive_sign, (_Elem2 *)0, _Cvt);

  _Minussign = _Maklocstr(4 < (unsigned int)_Ptr->n_sign_posn ? "-" : _Ptr->negative_sign, (_Elem2 *)0, _Cvt);

  _Decimalpoint = _Maklocchr(_Ptr->mon_decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->mon_thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr)
  {
  _Currencysign = (const _Elem *)_Maklocwcs(_International
   ? _Ptr->_W_int_curr_symbol : _Ptr->_W_currency_symbol);
  _Plussign = (const _Elem *)_Maklocwcs(
   4 < (unsigned int)_Ptr->p_sign_posn
    ? L"" : _Ptr->_W_positive_sign);
  _Minussign = (const _Elem *)_Maklocwcs(
   4 < (unsigned int)_Ptr->n_sign_posn
    ? L"-" : _Ptr->_W_negative_sign);
  _Decimalpoint = (_Elem)_Ptr->_W_mon_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_mon_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  _Cvt = _Lobj._Getcvt();
  const lconv *_Ptr = _Lobj._Getlconv();

  _Grouping = 0;
  _Currencysign = 0;
  _Plussign = 0;
  _Minussign = 0;

  try {
  _Grouping = _Maklocstr(_Ptr->mon_grouping, (char *)0, _Cvt);
  _Getvals((_Elem)0, _Ptr);
  } catch (...) {
  _Tidy();
  throw;
  }

  _Fracdigits = _International ? _Ptr->int_frac_digits
   : _Ptr->frac_digits;
  if (_Fracdigits < 0 || 127 <= _Fracdigits)
   _Fracdigits = 0;

  _Makpat(_Plusformat, _Ptr->p_sep_by_space,
   _Ptr->p_cs_precedes, _Ptr->p_sign_posn);
  _Makpat(_Minusformat, _Ptr->n_sep_by_space,
   _Ptr->n_cs_precedes, _Ptr->n_sign_posn);

  if (_Isdef)
   {
   :: memcpy(&_Plusformat, "$+xv", 4);
   :: memcpy(&_Minusformat, "$+xv", 4);
   }
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Decimalpoint);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_curr_symbol() const
  {
  return (string_type(_Currencysign));
  }

 virtual string_type do_positive_sign() const
  {
  return (string_type(_Plussign));
  }

 virtual string_type do_negative_sign() const
  {
  return (string_type(_Minussign));
  }

 virtual int do_frac_digits() const
  {
  return (_Fracdigits);
  }

 virtual pattern do_pos_format() const
  {
  return (_Plusformat);
  }

 virtual pattern do_neg_format() const
  {
  return (_Minusformat);
  }

private:
 void _Makpat(pattern& _Pattern, unsigned int _Sepbyspace,
  unsigned int _Symbolprecedes, unsigned int _Signposition)
  {
  const char *_Ptr = _International || 2 < _Sepbyspace
   || 1 < _Symbolprecedes || 4 < _Signposition
    ? "$+xv"
    : &(
    "+v$x" "+v$x" "v$+x" "v+$x" "v$+x"
    "+$vx" "+$vx" "$v+x" "+$vx" "$+vx"
    "+v $" "+v $" "v $+" "v +$" "v $+"
    "+$ v" "+$ v" "$ v+" "+$ v" "$+ v"
    "+xv$" "+ v$" "v$ +" "v+ $" "v$ +"
    "+x$v" "+ $v" "$v +" "+ $v" "$ +v")
     [_Signposition * 4
     + _Symbolprecedes * 20
     + _Sepbyspace * 40];

  ::memcpy_s((_Pattern.field), (sizeof (_Pattern.field)), (_Ptr), (4));
  }

 void _Tidy()
  {
  :: free((void *)_Grouping);
  :: free((void *)_Currencysign);
  :: free((void *)_Plussign);
  :: free((void *)_Minussign);
  }

 const char *_Grouping;
 _Elem _Decimalpoint;
 _Elem _Kseparator;
 const _Elem *_Currencysign;
 const _Elem *_Plussign;
 const _Elem *_Minussign;
 int _Fracdigits;
 pattern _Plusformat;
 pattern _Minusformat;
 bool _International;

 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem,
 bool _Intl = false>
 class moneypunct
  : public _Mpunct<_Elem>
 {
public:
          __declspec(dllimport) static const bool intl;
                         __declspec(dllimport) static locale::id id;

 explicit moneypunct(size_t _Refs = 0)
  : _Mpunct<_Elem>(_Refs, _Intl)
  {
  }

 moneypunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : _Mpunct<_Elem>(_Lobj, _Refs, _Intl, _Isdef)
  {
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new moneypunct<_Elem, _Intl>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (3);
  }

protected:
 moneypunct(const char *_Locname, size_t _Refs = 0)
  : _Mpunct<_Elem>(_Locname, _Refs, _Intl)
  {
  }

 virtual ~moneypunct() noexcept
  {
  }
 };


template<class _Elem,
 bool _Intl>
          const bool moneypunct<_Elem, _Intl>::intl = _Intl;


template<class _Elem,
 bool _Intl>
                         locale::id moneypunct<_Elem, _Intl>::id;


template<class _Elem,
 bool _Intl = false>
 class moneypunct_byname
  : public moneypunct<_Elem, _Intl>
 {
public:
 explicit moneypunct_byname(const char *_Locname, size_t _Refs = 0)
  : moneypunct<_Elem, _Intl>(_Locname, _Refs)
  {
  }

 explicit moneypunct_byname(const string& _Str, size_t _Refs = 0)
  : moneypunct<_Elem, _Intl>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~moneypunct_byname() noexcept
  {
  }
 };


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class money_get
  : public locale::facet
 {
 typedef moneypunct<_Elem, false> _Mypunct0;
 typedef moneypunct<_Elem, true> _Mypunct1;

public:
 typedef _Elem char_type;
 typedef _InIt iter_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 _InIt get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   string_type& _Val) const
  {
  return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
  }

                         __declspec(dllimport) static locale::id id;

 explicit money_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 money_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new money_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (3);
  }

protected:
 virtual ~money_get() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Elem _Atoms[sizeof ("0123456789-")];
  string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Str.size() == 0)
   _State |= ios_base::failbit;
  else
   {
   const char *_Eb = _Str.c_str();
   char *_Ep;
   int _Errno = 0;
   const long double _Ans =
    :: _Stoldx(_Eb, &_Ep, 0, &_Errno);

   if (_Ep == _Eb || _Errno != 0)
    _State |= ios_base::failbit;
   else
    _Val = _Ans;
   }
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
   string_type& _Val) const
  {
  _Elem _Atoms[sizeof ("0123456789-")];
  string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);
  size_t _Len = _Str.size();

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Len == 0)
   _State |= ios_base::failbit;
  else
   {
   size_t _Idx = 0;
   _Val.resize(_Len);
   if (_Str[0] == '-')
    _Val[_Idx++] = _Atoms[10];
   for (; _Idx < _Len; ++_Idx)
    _Val[_Idx] = _Atoms[_Str[_Idx] - '0'];
   }
  return (_First);
  }

private:
 string _Getmfld(_InIt& _First, _InIt& _Last,
  bool _Intl, ios_base& _Iosbase, _Elem *_Atoms) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocmon", 463);
  const _Mpunct<_Elem> *_Ppunct_fac;
  if (_Intl)
   _Ppunct_fac =
    &use_facet< _Mypunct1 >(_Iosbase.getloc());
  else
   _Ppunct_fac =
    &use_facet< _Mypunct0 >(_Iosbase.getloc());

  bool _Bad = false, _Neg = false;
  string_type _Sign;
  const money_base::pattern _Pattern = _Ppunct_fac->neg_format();
  string _Val;
  size_t _Idx;
  static const char _Src[] = {"0123456789-"};
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  for (size_t _Off = 0; !_Bad && _Off < 4; ++_Off)
   switch (_Pattern.field[_Off])
    {
   case money_base::symbol:
    {
    string_type _Symbol = _Ppunct_fac->curr_symbol();
    typename string_type::const_iterator _Source;

    if (!(_Iosbase.flags() & ios_base::showbase)
     && _First != _Last && *_First != *_Symbol.c_str())
     _Symbol.erase();
    else if (_Off == 3 && _Sign.size() <= 1
     && (_First == _Last || *_First != *_Symbol.c_str()))
     _Symbol.erase();

    for (_Source = _Symbol.begin();
     _First != _Last && _Source != _Symbol.end()
      && *_First == *_Source; ++_Source, ++_First)
     ;

    if (_Source != _Symbol.end())
     _Bad = true;
    break;
    }

   case money_base::sign:
    if (_First == _Last)
     ;
    else if (0 < (_Ppunct_fac->positive_sign()).size()
     && _Ppunct_fac->positive_sign()[0] == *_First)
     {
     ++_First;
     _Sign = _Ppunct_fac->positive_sign();
     }
    else if (0 < (_Ppunct_fac->negative_sign()).size()
     && _Ppunct_fac->negative_sign()[0] == *_First)
     {
     ++_First;
     _Sign = _Ppunct_fac->negative_sign();
     _Neg = true;
     }
    else if (0 == (_Ppunct_fac->positive_sign()).size())
     ;
    else if (0 == (_Ppunct_fac->negative_sign()).size())
     _Neg = true;
    break;

   case money_base::value:
    {
    int _Fracdigseen = 0;
    int _Fracdigits = _Ppunct_fac->frac_digits();
    const string _Grouping = _Ppunct_fac->grouping();
    const _Elem _Kseparator = _Grouping.size() == 0
     ? (_Elem)0 : _Ppunct_fac->thousands_sep();

    if (_Kseparator == (_Elem)0
     || 127 <= (unsigned char)*_Grouping.c_str())
     for (; _First != _Last
      && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
      ++_First)
     _Val += _Src[_Idx];
    else
     {
     string _Groups((size_t)1, '\0');
     size_t _Group = 0;

     for (; _First != _Last; ++_First)
      if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
       {
       _Val += _Src[_Idx];
       if (_Groups[_Group] != 127)
        ++_Groups[_Group];
       }
      else if (_Groups[_Group] == '\0'
       || *_First != _Kseparator)
       break;
      else
       {
       _Groups.append((size_t)1, '\0');
       ++_Group;
       }

     if (_Group == 0)
      ;
     else if ('\0' < _Groups[_Group])
      ++_Group;
     else
      _Bad = true;

     for (const char *_Pg = _Grouping.c_str();
      !_Bad && 0 < _Group; )
      if (*_Pg == 127)
       break;
      else if ((0 < --_Group && *_Pg != _Groups[_Group])
       || (0 == _Group && *_Pg < _Groups[_Group]))
       _Bad = true;
      else if ('\0' < _Pg[1])
       ++_Pg;
     if (_Bad)
      break;
     }

    const _Elem _Point = _Ppunct_fac->decimal_point();
    if (_First != _Last
     && _Point != (_Elem)0
     && *_First == _Point)
     {
     while (++_First != _Last
      && _Fracdigseen < _Fracdigits
      && (_Idx = _Find_elem(_Atoms, *_First)) < 10)
      _Val += _Src[_Idx], ++_Fracdigseen;

     if (_Fracdigseen < _Fracdigits)
      _Bad = true;
     }

    if (_Val.size() == 0)
     _Bad = true;
    else
     for (; _Fracdigseen < _Fracdigits; ++_Fracdigseen)
      _Val += '0';
    break;
    }

   case money_base::space:
   case money_base::none:
    {
    if (_Off == 3)
     break;

    bool _Seen = false;

    for (; _First != _Last
     && _Ctype_fac.is(ctype_base::space, *_First); ++_First)
     _Seen = true;
    if (_Pattern.field[_Off] == money_base::space && !_Seen)
     _Bad = true;
    }
    }

  if (!_Bad && 1 < _Sign.size())
   {
   typename string_type::const_iterator _Source;

   for (_Source = _Sign.begin(); ++_Source != _Sign.end()
    && _First != _Last && *_First == *_Source; ++_First)
    ;
   if (_Source != _Sign.end())
    _Bad = true;
   }

  if (_Bad)
   _Val.erase();
  else if (_Neg)
   _Val.insert((size_t)0, (size_t)1, '-');
  return (_Val);
  }
 };


template<class _Elem,
 class _InIt>
                         locale::id money_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class money_put
  : public locale::facet
 {
 typedef moneypunct<_Elem, false> _Mypunct0;
 typedef moneypunct<_Elem, true> _Mypunct1;

public:
 typedef _Elem char_type;
 typedef _OutIt iter_type;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;

 _OutIt put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   long double _Val) const
  {
  return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   const string_type& _Val) const
  {
  return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
  }

                         __declspec(dllimport) static locale::id id;

 explicit money_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 money_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new money_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (3);
  }

protected:
 virtual ~money_put() noexcept
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual _OutIt do_put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   long double _Val) const
  {
  bool _Negative = false;
  if (_Val < 0)
   _Negative = true, _Val = -_Val;

  size_t _Exp;
  for (_Exp = 0; 1e35 <= _Val && _Exp < 5000; _Exp += 10)
   _Val /= 1e10;

  char _Buf[40];

  int _Count = :: sprintf_s(_Buf, sizeof (_Buf), "%.0Lf",
   _Val);

  if (_Count < 0)
   return (_Dest);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  const _Elem _E0 = _Ctype_fac.widen('0');

  string_type _Val2(_Count, (_Elem)0);
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Val2[0]);
  _Val2.append(_Exp, _E0);
  return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
   _Negative, _Val2, _E0));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   const string_type& _Val) const
  {
  static const char _Src[] = {"0123456789-"};
  _Elem _Atoms[sizeof (_Src)];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

  bool _Negative = false;
  size_t _Idx0 = 0;
  if (!_Val.empty() && _Val[0] == _Atoms[10])
   _Negative = true, ++_Idx0;

  size_t _Size = _Val.size();
  size_t _Idx = _Idx0;
  for (; _Idx < _Size && _Find_elem(_Atoms, _Val[_Idx]) < 10; ++_Idx)
   ;
  string_type _Val2(&_Val[_Idx0], (size_t)(_Idx - _Idx0));
  if (_Val2.empty())
   _Val2.append((size_t)1, _Atoms[0]);

  return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
   _Negative, _Val2, _Atoms[0]));
  }

private:
 _OutIt _Putmfld(_OutIt _Dest,
  bool _Intl, ios_base& _Iosbase, _Elem _Fill,
   bool _Neg, string_type _Val, _Elem _E0) const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocmon", 772);
  const _Mpunct<_Elem> *_Ppunct_fac;
  if (_Intl)
   _Ppunct_fac =
    &use_facet< _Mypunct1 >(_Iosbase.getloc());
  else
   _Ppunct_fac =
    &use_facet< _Mypunct0 >(_Iosbase.getloc());

  const string _Grouping = _Ppunct_fac->grouping();
  int _Ifracdigits = _Ppunct_fac->frac_digits();
  unsigned int _Fracdigits = _Ifracdigits < 0 ? -_Ifracdigits
   : _Ifracdigits;

  if (_Val.size() <= _Fracdigits)
   _Val.insert((size_t)0, _Fracdigits - _Val.size() + 1, _E0);
  else if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
   {
   const _Elem _Kseparator = _Ppunct_fac->thousands_sep();
   const char *_Pg = _Grouping.c_str();
   size_t _Off = _Val.size() - _Fracdigits;

   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Off)
    {
    _Val.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  money_base::pattern _Pattern;
  string_type _Sign;
  if (_Neg)
   {
   _Pattern = _Ppunct_fac->neg_format();
   _Sign = _Ppunct_fac->negative_sign();
   }
  else
   {
   _Pattern = _Ppunct_fac->pos_format();
   _Sign = _Ppunct_fac->positive_sign();
   }

  string_type _Symbol;
  if (_Iosbase.flags() & ios_base::showbase)
   _Symbol = _Ppunct_fac->curr_symbol();

  bool _Intern = false;
  size_t _Fillcount, _Off;
  for (_Fillcount = 0, _Off = 0; _Off < 4; ++_Off)
   switch (_Pattern.field[_Off])
   {
   case money_base::symbol:
    _Fillcount += _Symbol.size();
    break;

   case money_base::sign:
    _Fillcount += _Sign.size();
    break;

   case money_base::value:
    _Fillcount += _Val.size() + (0 < _Fracdigits ? 1 : 0)
     + (_Val.size() <= _Fracdigits
      ? _Fracdigits - _Val.size() + 1 : 0);
    break;

   case money_base::space:
    ++_Fillcount;


   case money_base::none:
    if (_Off != 3)
     _Intern = true;
    break;
   }

  _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Fillcount
    ? 0 : (size_t)_Iosbase.width() - _Fillcount;

  ios_base::fmtflags _Afl =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Afl != ios_base::left
   && (_Afl != ios_base::internal || !_Intern))
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }

  for (_Off = 0; _Off < 4; ++_Off)
   switch (_Pattern.field[_Off])
    {
   case money_base::symbol:
    _Dest = _Put(_Dest, _Symbol.begin(), _Symbol.size());
    break;

   case money_base::sign:
    if (0 < _Sign.size())
     _Dest = _Put(_Dest, _Sign.begin(), 1);
    break;

   case money_base::value:
    if (_Fracdigits == 0)
     _Dest = _Put(_Dest, _Val.begin(),
      _Val.size());
    else if (_Val.size() <= _Fracdigits)
     {
     *_Dest++ = _E0;
     *_Dest++ = _Ppunct_fac->decimal_point();
     _Dest = _Rep(_Dest, _E0,
      _Fracdigits - _Val.size());
     _Dest = _Put(_Dest, _Val.begin(), _Val.size());
     }
    else
     {
     _Dest = _Put(_Dest, _Val.begin(),
      _Val.size() - _Fracdigits);
     *_Dest++ = _Ppunct_fac->decimal_point();
     _Dest = _Put(_Dest, _Val.end() - _Fracdigits,
      _Fracdigits);
     }
    break;

   case money_base::space:
    _Dest = _Rep(_Dest, _Fill, 1);


   case money_base::none:
    if (_Afl == ios_base::internal)
     {
     _Dest = _Rep(_Dest, _Fill, _Fillcount);
     _Fillcount = 0;
     }
    }

  if (1 < _Sign.size())
   _Dest = _Put(_Dest, _Sign.begin() + 1,
    _Sign.size() - 1);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 static _OutIt _Put(_OutIt _Dest,
  typename string_type::const_iterator _Source, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Source)
   *_Dest = *_Source;
  return (_Dest);
  }

 static _OutIt _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id money_put<_Elem, _OutIt>::id;




template const bool moneypunct<char, true>::intl;
template const bool moneypunct<char, false>::intl;
template locale::id
 moneypunct<char, true>::id;
template locale::id
 moneypunct<char, false>::id;
template locale::id
 money_get<char, istreambuf_iterator<char,
  char_traits<char> > >::id;
template locale::id
 money_put<char, ostreambuf_iterator<char,
  char_traits<char> > >::id;

template const bool moneypunct<wchar_t, true>::intl;
template const bool moneypunct<wchar_t, false>::intl;
template locale::id
 moneypunct<wchar_t, true>::id;
template locale::id
 moneypunct<wchar_t, false>::id;
template locale::id
 money_get<wchar_t, istreambuf_iterator<wchar_t,
  char_traits<wchar_t> > >::id;
template locale::id
 money_put<wchar_t, ostreambuf_iterator<wchar_t,
  char_traits<wchar_t> > >::id;
# 982 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xlocmon" 3
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ctime" 1 3
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ctime" 3
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
 extern "C" {
# 23 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;
        long tv_nsec;
    };
# 60 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int* __cdecl __daylight(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __dstbias(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __timezone(void);




                             __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char** __cdecl __tzname(void);




__declspec(dllimport) errno_t __cdecl _get_daylight(
          int* _Daylight
    );


__declspec(dllimport) errno_t __cdecl _get_dstbias(
          long* _DaylightSavingsBias
    );


__declspec(dllimport) errno_t __cdecl _get_timezone(
          long* _TimeZone
    );


__declspec(dllimport) errno_t __cdecl _get_tzname(
                                 size_t* _ReturnValue,
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 int _Index
    );
# 115 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl asctime(
         struct tm const* _Tm
    );




    __declspec(dllimport) errno_t __cdecl asctime_s(
                                                            char* _Buffer,
                                                            size_t _SizeInBytes,
                                                            struct tm const* _Tm
        );


extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(char (&_Buffer)[_Size], struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) clock_t __cdecl clock(void);



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
                                                        char* _Buffer,
                                                        size_t _SizeInBytes,
                                                        __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
                                                          char* _Buffer,
                                                          size_t _SizeInBytes,
                                                          __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }






__declspec(dllimport) double __cdecl _difftime32(
         __time32_t _Time1,
         __time32_t _Time2
    );


__declspec(dllimport) double __cdecl _difftime64(
         __time64_t _Time1,
         __time64_t _Time2
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime32(
         __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime64(
         __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
            struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
            struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
            struct tm* _Tm
    );



__declspec(dllimport) size_t __cdecl strftime(
                                  char* _Buffer,
                                  size_t _SizeInBytes,
                                  char const* _Format,
                                  struct tm const* _Tm
    );



__declspec(dllimport) size_t __cdecl _strftime_l(
                                  char* _Buffer,
                                  size_t _MaxSize,
                                  char const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strdate( char *_Buffer);





__declspec(dllimport) errno_t __cdecl _strtime_s(
                                                       char* _Buffer,
                                                       size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);




__declspec(dllimport) __time32_t __cdecl _time32(
              __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
              __time64_t* _Time
    );



__declspec(dllimport) int __cdecl _timespec32_get(
          struct _timespec32* _Ts,
          int _Base
    );



__declspec(dllimport) int __cdecl _timespec64_get(
          struct _timespec64* _Ts,
          int _Base
    );
# 341 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
    __declspec(dllimport) void __cdecl _tzset(void);


    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
              struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
             struct tm* _Tm,
             unsigned _Milliseconds
        );
# 474 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _ctime64(_Time);
#pragma warning(pop)
 }


        static __inline double __cdecl difftime(
                 time_t const _Time1,
                 time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
                 time_t const* const _Time)
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _gmtime64(_Time);
#pragma warning(pop)
 }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _localtime64(_Time);
#pragma warning(pop)
 }


        static __inline time_t __cdecl _mkgmtime(
                    struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }


        static __inline time_t __cdecl mktime(
                    struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
                      time_t* const _Time
            )
        {
            return _time64(_Time);
        }


        static __inline int __cdecl timespec_get(
                  struct timespec* const _Ts,
                  int const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }



            static __inline errno_t __cdecl ctime_s(
                                                                    char* const _Buffer,
                                                                    size_t const _SizeInBytes,
                                                                    time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }


            static __inline errno_t __cdecl gmtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }


            static __inline errno_t __cdecl localtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
# 593 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);






}
# 600 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\time.h" 3
#pragma pack(pop)
# 13 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\ctime" 2 3




namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime" 2 3



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4275)

namespace std {

struct __declspec(dllimport) time_base
 : public locale::facet
 {
 enum dateorder
  {
  no_order, dmy, mdy, ymd, ydm};

                    time_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~time_base() noexcept
  {
  }
 };


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_get
  : public time_base
 {
public:
 typedef _Elem char_type;
 typedef _InIt iter_type;
 typedef ctype<_Elem> _Ctype;

                         static locale::id id;

 dateorder date_order() const
  {
  return (do_date_order());
  }

 _InIt get_time(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_time(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_date(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_date(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_weekday(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_weekday(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_monthname(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_monthname(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get_year(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  return (do_get_year(_First, _Last, _Iosbase, _State, _Pt));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
   char _Specifier, char _Modifier = '\0') const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 87);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 88);
  return (do_get(_First, _Last, _Iosbase, _State, _Pt,
   _Specifier, _Modifier));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
   const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 97);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 98);
  _Debug_range(_Fmtfirst, _Fmtlast, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 99);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  _State = ios_base::goodbit;

  for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
   if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
    {
    if (_Ctype_fac.is(_Ctype::space, *_Fmtfirst))
     for (; _First != _Last
      && _Ctype_fac.is(_Ctype::space, *_First); ++_First)
      ;
    else if (*_First != *_Fmtfirst)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     ++_First;
    }
   else if (++_Fmtfirst == _Fmtlast)
    {
    if (*_First != _Fmtfirst[-1])
     _State |= ios_base::failbit;
    else
     ++_First;
    break;
    }
   else
    {
    char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
    char _Modifier = '\0';
    _Elem _Percent = _Fmtfirst[-1];

    if (_Specifier != 'E' && _Specifier != 'O'
     && _Specifier != 'Q' && _Specifier != '#')
     ;
    else if (++_Fmtfirst == _Fmtlast)
     {
     if (*_First != _Percent
      || ++_First == _Last
      || _Ctype_fac.narrow(*_First) != _Specifier)
      _State |= ios_base::failbit;
     else
      ++_First;
     break;
     }
    else
     {
     _Modifier = _Specifier;
     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
     }

    _First = do_get(_First, _Last, _Iosbase, _State, _Pt,
     _Specifier, _Modifier);
    }
  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

 explicit time_get(size_t _Refs = 0)
  : time_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    time_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : time_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new time_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (5);
  }

protected:
 virtual ~time_get() noexcept
  {
  _Tidy();
  }

                    time_get(const char *_Locname, size_t _Refs = 0)
  : time_base(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  _Days = _Maklocstr(_Lobj._Getdays(), (_Elem *)0, _Cvt);
  _Months = _Maklocstr(_Lobj._Getmonths(), (_Elem *)0, _Cvt);
  _Ampm = _Maklocstr(":AM:am:PM:pm", (_Elem *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  _Days = (const _Elem *)_Maklocwcs(
   (const wchar_t *)_Lobj._W_Getdays());
  _Months = (const _Elem *)_Maklocwcs(
   (const wchar_t *)_Lobj._W_Getmonths());
  _Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Days = 0;
  _Months = 0;
  _Ampm = 0;

  try {
  _Getvals((_Elem)0, _Lobj);

  _Dateorder = (dateorder)_Lobj._Getdateorder();

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 virtual dateorder do_date_order() const
  {
  return (_Dateorder);
  }

 virtual _InIt do_get_time(
  _InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 243);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 244);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  _State |= _Getint(_First, _Last, 0, 23,
   _Pt->tm_hour, _Ctype_fac);

  if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
   _State |= ios_base::failbit;
  else
   _State |= _Getint(++_First, _Last, 0, 59,
    _Pt->tm_min, _Ctype_fac);

  if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
   _State |= ios_base::failbit;
  else
   _State |= _Getint(++_First, _Last, 0, 59,
    _Pt->tm_sec, _Ctype_fac);
  return (_First);
  }

 virtual _InIt do_get_date(
  _InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 268);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 269);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  dateorder _Dorder = date_order();
  if (_Dorder == no_order)
   _Dorder = mdy;

  if (_First == _Last)
   ;
  else if (!_Ctype_fac.is(_Ctype::digit, *_First))
   {
   _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
   _Dorder = mdy;
   }
  else if (_Dorder == mdy)
   {
   _State |= _Getint(_First, _Last, 1, 12,
    _Pt->tm_mon, _Ctype_fac);
   --_Pt->tm_mon;
   }
  else if (_Dorder == dmy)
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);
  else
   _First = get_year(_First, _Last, _Iosbase, _State, _Pt);

  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;

  if (_First != _Last)
   {
   char _Ch = _Ctype_fac.narrow(*_First);
   if (_Ch == ':' || _Ch == ',' || _Ch == '/')
    ++_First;
   }
  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;

  if (_First == _Last)
   ;
  else if (!_Ctype_fac.is(_Ctype::digit, *_First))
   if (_Dorder == mdy)
    _State |= ios_base::failbit;
   else
    {
    _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
    if (_Dorder == ydm)
     _Dorder = ymd;
    }
  else if (_Dorder == dmy || _Dorder == ymd)
   {
   _State |= _Getint(_First, _Last, 1, 12,
    _Pt->tm_mon, _Ctype_fac);
   --_Pt->tm_mon;
   }
  else
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);

  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;
  if (_First != _Last)
   {
   char _Ch = _Ctype_fac.narrow(*_First);
   if (_Ch == ':' || _Ch == ',' || _Ch == '/')
    ++_First;
   }
  while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
   ++_First;

  if (_First == _Last)
   _State |= ios_base::failbit;
  else if (!_Ctype_fac.is(_Ctype::digit, *_First))
   if (_Dorder != ydm)
    _State |= ios_base::failbit;
   else
    _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
  else if (_Dorder == ydm)
   {
   _State |= _Getint(_First, _Last, 1, 12,
    _Pt->tm_mon, _Ctype_fac);
   --_Pt->tm_mon;
   }
  else if (_Dorder == ymd)
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);
  else
   _First = get_year(_First, _Last, _Iosbase, _State, _Pt);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

 virtual _InIt do_get_weekday(
  _InIt _First, _InIt _Last,
  ios_base&, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 367);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 368);
  int _Num = _Getloctxt(_First, _Last, (size_t)0, _Days);

  if (_Num < 0)
   _State |= ios_base::failbit;
  else
   _Pt->tm_wday = _Num >> 1;
  return (_First);
  }

 virtual _InIt do_get_monthname(
  _InIt _First, _InIt _Last,
  ios_base&, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 382);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 383);
  int _Num = _Getloctxt(_First, _Last, (size_t)0, _Months);

  if (_Num < 0)
   _State |= ios_base::failbit;
  else
   _Pt->tm_mon = _Num >> 1;
  return (_First);
  }

 virtual _InIt do_get_year(
  _InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 397);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 398);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  int _Ans = 0;
  ios_base::iostate _Res = _Getint(_First, _Last, 0, 9999,
   _Ans, _Ctype_fac);

  _State |= _Res;
  if (_Res & ios_base::failbit)
   ;
  else if (_Ans < 69)
   _Pt->tm_year = _Ans + 100;
  else if (_Ans < 100)
   _Pt->tm_year = _Ans;
  else
   _Pt->tm_year = _Ans - 1900;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
  char _Specifier, char = 0) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());
  int _Ans = 0;

  _State = ios_base::goodbit;

  switch (_Specifier)
   {
  case 'a':
  case 'A':
   _First = get_weekday(_First, _Last, _Iosbase, _State, _Pt);
   break;

  case 'b':
  case 'B':
  case 'h':
   _First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
   break;

  case 'c':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%b %d %H : %M : %S %Y");
   break;

  case 'C':
   _State |= _Getint(_First, _Last, 0, 99,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_year = _Ans * 100 - 1900;
   break;

  case 'd':
  case 'e':
   _State |= _Getint(_First, _Last, 1, 31,
    _Pt->tm_mday, _Ctype_fac);
   break;

  case 'D':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%m / %d / %y");
   break;

  case 'H':
   _State |= _Getint(_First, _Last, 0, 23,
    _Pt->tm_hour, _Ctype_fac);
   break;

  case 'I':
   _State |= _Getint(_First, _Last, 1, 12,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_hour = _Ans == 12 ? 0 : _Ans;
   break;

  case 'j':
   _State |= _Getint(_First, _Last, 1, 366,
    _Pt->tm_yday, _Ctype_fac);
   break;

  case 'm':
   _State |= _Getint(_First, _Last, 1, 12,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_mon = _Ans - 1;
   break;

  case 'M':
   _State |= _Getint(_First, _Last, 0, 59,
    _Pt->tm_min, _Ctype_fac);
   break;

  case 'n':
  case 't':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    " ");
   break;

  case 'p':
   _Ans = _Getloctxt(_First, _Last, (size_t)0, ":AM:am:PM:pm");
   if (_Ans < 0)
    _State |= ios_base::failbit;
   else if (1 < _Ans)
    _Pt->tm_hour += 12;
   break;

  case 'r':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%I : %M : %S %p");
   break;

  case 'R':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%H : %M");
   break;

  case 'S':
   _State |= _Getint(_First, _Last, 0, 60,
    _Pt->tm_sec, _Ctype_fac);
   break;

  case 'T':
  case 'X':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%H : %M : %S");
   break;

  case 'U':
   _State |= _Getint(_First, _Last, 0, 53,
    _Pt->tm_yday, _Ctype_fac);
   break;

  case 'w':
   _State |= _Getint(_First, _Last, 0, 6,
    _Pt->tm_wday, _Ctype_fac);
   break;

  case 'W':
   _State |= _Getint(_First, _Last, 0, 53,
    _Pt->tm_yday, _Ctype_fac);
   break;

  case 'x':
   _First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
    "%d / %m / %y");
   break;

  case 'y':
   _State |= _Getint(_First, _Last, 0, 99,
    _Ans, _Ctype_fac);
   if (!(_State & ios_base::failbit))
    _Pt->tm_year = _Ans < 69 ? _Ans + 100 : _Ans;
   break;

  case 'Y':
   _First = get_year(_First, _Last, _Iosbase, _State, _Pt);
   break;

  default:
   _State |= ios_base::failbit;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

 _InIt _Getfmt(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
   const char *_Fmtfirst) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  for (; *_Fmtfirst != '\0'; ++_Fmtfirst)
   if (*_Fmtfirst == '%')
    _First = do_get(_First, _Last, _Iosbase, _State, _Pt,
     *++_Fmtfirst);
   else if (*_Fmtfirst == ' ')
    for (; _First != _Last
     && _Ctype_fac.is(_Ctype::space, *_First); ++_First)
     ;
   else if (_Ctype_fac.narrow(*_First) != *_Fmtfirst)
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    ++_First;
  if (_First == _Last)
   _State |= ios_base::eofbit;
  return (_First);
  }

private:
 ios_base::iostate __cdecl _Getint(
  _InIt& _First, _InIt& _Last,
  int _Lo, int _Hi, int& _Val,
  const _Ctype& _Ctype_fac) const
  {
  char _Ac[32], *_Ep;
  char *_Ptr = _Ac;
  char _Ch;

  if (_First == _Last)
   ;
  else if ((_Ch = _Ctype_fac.narrow(*_First)) == '+')
   *_Ptr++ = '+', ++_First;
  else if (_Ch == '-')
   *_Ptr++ = '-', ++_First;

  bool _Seendigit = false;
  while (_First != _Last && _Ctype_fac.narrow(*_First) == '0')
   _Seendigit = true, ++_First;
  if (_Seendigit)
   *_Ptr++ = '0';

  for (char *const _Pe = &_Ac[32 - 1]; _First != _Last
   && '0' <= (_Ch = _Ctype_fac.narrow(*_First)) && _Ch <= '9';
   _Seendigit = true, ++_First)
   {
   *_Ptr = _Ch;
   if (_Ptr < _Pe)
    ++_Ptr;
   }

  if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep, 10, &_Errno);
  ios_base::iostate _State = ios_base::goodbit;

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0 || _Ans < _Lo || _Hi < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_State);
  }

 void _Tidy()
  {
  :: free((void *)_Days);
  :: free((void *)_Months);
  :: free((void *)_Ampm);
  }

 const _Elem *_Days;
 const _Elem *_Months;
 const _Elem *_Ampm;
 dateorder _Dateorder;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem,
 class _InIt>
                         locale::id time_get<_Elem, _InIt>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_get_byname
  : public time_get<_Elem, _InIt>
 {
public:
 explicit time_get_byname(const char *_Locname, size_t _Refs = 0)
  : time_get<_Elem, _InIt>(_Locname, _Refs)
  {
  }

 explicit time_get_byname(const string& _Str, size_t _Refs = 0)
  : time_get<_Elem, _InIt>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~time_get_byname() noexcept
  {
  }
 };


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_put
  : public locale::facet
 {
public:
 typedef _Elem char_type;
 typedef _OutIt iter_type;
 typedef ctype<_Elem> _Ctype;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
   const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 697);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 698);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
   if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
    *_Dest++ = *_Fmtfirst;
   else if (++_Fmtfirst == _Fmtlast)
    {
    *_Dest++ = _Fmtfirst[-1];
    break;
    }
   else
    {
    char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
    char _Modifier = '\0';
    _Elem _Percent = _Fmtfirst[-1];

    if (_Specifier != 'E' && _Specifier != 'O'
     && _Specifier != 'Q' && _Specifier != '#')
     ;
    else if (++_Fmtfirst == _Fmtlast)
     {
     *_Dest++ = _Percent;
     *_Dest++ = _Specifier;
     break;
     }
    else
     {
     _Modifier = _Specifier;
     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
     }

    _Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
     _Specifier, _Modifier);
    }
  return (_Dest);
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
  char _Specifier, char _Modifier = '\0') const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
  }

                         static locale::id id;

 explicit time_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new time_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (5);
  }

protected:
 virtual ~time_put() noexcept
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Tnames = _Lobj._Gettnames();
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base&, _Elem, const tm *_Pt,
   char _Specifier, char _Modifier = '\0') const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 782);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 783);

  char _Fmt[5] = "!%x\0";
  size_t _Count, _Num;
  string _Str;

  if (_Modifier == '\0')
   _Fmt[2] = _Specifier;
  else
   {
   _Fmt[2] = _Modifier;
   _Fmt[3] = _Specifier;
   }

  for (_Num = 16; ; _Num *= 2)
   {
   _Str.append(_Num, '\0');
   if (0 < (_Count = _Strftime(&*_Str.begin(), _Str.size(),
    _Fmt, _Pt, _Tnames._Getptr())))
    break;
   }
  return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
  }

private:
 _Locinfo::_Timevec _Tnames;
 };


template<class _Elem,
 class _OutIt>
                         locale::id time_put<_Elem, _OutIt>::id;



template<class _OutIt>
 class __declspec(dllimport) time_put<wchar_t, _OutIt>
  : public locale::facet
 {
public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef _OutIt iter_type;
 typedef ctype<_Elem> _Ctype;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
   const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 832);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 833);
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

  for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
   if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
    *_Dest++ = *_Fmtfirst;
   else if (++_Fmtfirst == _Fmtlast)
    {
    *_Dest++ = _Fmtfirst[-1];
    break;
    }
   else
    {
    char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
    char _Modifier = '\0';
    _Elem _Percent = _Fmtfirst[-1];

    if (_Specifier != 'E' && _Specifier != 'O'
     && _Specifier != 'Q' && _Specifier != '#')
     ;
    else if (++_Fmtfirst == _Fmtlast)
     {
     *_Dest++ = _Percent;
     *_Dest++ = _Specifier;
     break;
     }
    else
     {
     _Modifier = _Specifier;
     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
     }

    _Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
     _Specifier, _Modifier);
    }
  return (_Dest);
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
  char _Specifier, char _Modifier = '\0') const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
  }

                         static locale::id id;

 explicit time_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new time_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (5);
  }

protected:
 virtual ~time_put() noexcept
  {
  }

                    time_put(const char *_Locname, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Tnames = _Lobj._W_Gettnames();
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base&, _Elem, const tm *_Pt,
   char _Specifier, char _Modifier = '\0') const
  {
  _Debug_pointer(_Dest, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 925);
  _Debug_pointer(_Pt, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime", 926);

  wchar_t _Fmt[5] = L"!%x\0";
  size_t _Count, _Num;
  wstring _Str;

  if (_Modifier == '\0')
   _Fmt[2] = (_Elem)_Specifier;
  else
   {
   _Fmt[2] = (_Elem)_Modifier;
   _Fmt[3] = (_Elem)_Specifier;
   }

  for (_Num = 16; ; _Num *= 2)
   {
   _Str.append(_Num, '\0');
   if (0 < (_Count = _Wcsftime(&*_Str.begin(), _Str.size(),
    _Fmt, _Pt, _Tnames._Getptr())))
    break;
   }
  return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
  }

private:
 _Locinfo::_Timevec _Tnames;
 };


template<class _OutIt>
                         locale::id time_put<wchar_t, _OutIt>::id;
# 1102 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime" 3
template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class time_put_byname
  : public time_put<_Elem, _OutIt>
 {
public:
 explicit time_put_byname(const char *_Locname, size_t _Refs = 0)
  : time_put<_Elem, _OutIt>(_Locname, _Refs)
  {
  }

 explicit time_put_byname(const string& _Str, size_t _Refs = 0)
  : time_put<_Elem, _OutIt>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~time_put_byname() noexcept
  {
  }
 };




template class __declspec(dllimport) time_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) time_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template class __declspec(dllimport) time_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) time_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
# 1145 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xloctime" 3
}


#pragma warning(pop)
#pragma pack(pop)
# 11 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4275)

namespace std {

template<class _Elem>
 class collate
  : public locale::facet
 {
public:
 typedef _Elem char_type;
 typedef basic_string<_Elem, char_traits<_Elem>,
  allocator<_Elem> > string_type;

 int compare(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2) const
  {
  return (do_compare(_First1, _Last1, _First2, _Last2));
  }

 string_type transform(const _Elem *_First, const _Elem *_Last) const
  {
  return (do_transform(_First, _Last));
  }

 long hash(const _Elem *_First, const _Elem *_Last) const
  {
  return (do_hash(_First, _Last));
  }

                         __declspec(dllimport) static locale::id id;

 explicit collate(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 collate(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new collate<_Elem>(
    _Locinfo(_Ploc->name().c_str()));
  return (1);
  }

protected:
                    ~collate() noexcept
  {
  :: free(_Coll._LocaleName);
  }

protected:
 collate(const char *_Locname, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj);
  }
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Coll = _Lobj._Getcoll();
  }

 virtual int do_compare(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2) const
  {
  _Debug_range(_First1, _Last1, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale", 95);
  _Debug_range(_First2, _Last2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale", 96);
  int _Ans = _LStrcoll(_First1, _Last1, _First2, _Last2, &_Coll);
  return (_Ans < 0 ? -1 : _Ans == 0 ? 0 : +1);
  }

 virtual string_type do_transform(const _Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale", 104);
  size_t _Count;
  string_type _Str;

  for (_Count = _Last - _First; 0 < _Count; )
   {
   _Str.resize(_Count);
   if ((_Count = _LStrxfrm(&*_Str.begin(),
    &*_Str.begin() + _Str.size(),
     _First, _Last, &_Coll)) <= _Str.size())
    break;
   }
  _Str.resize(_Count);
  return (_Str);
  }

 virtual long do_hash(const _Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale", 123);
  return ((long)_Hash_seq((const unsigned char *)_First,
   (_Last - _First) * sizeof (_Elem)));
  }

private:
 _Locinfo::_Collvec _Coll;
 };


template<class _Elem>
                         locale::id collate<_Elem>::id;




template locale::id collate<char>::id;
template locale::id collate<wchar_t>::id;
# 149 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\locale" 3
template<class _Elem>
 class collate_byname
  : public collate<_Elem>
 {
public:
 explicit collate_byname(const char *_Locname, size_t _Refs = 0)
  : collate<_Elem>(_Locname, _Refs)
  {
  }

 explicit collate_byname(const string& _Str, size_t _Refs = 0)
  : collate<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~collate_byname() noexcept
  {
  }
 };





template<class _Facet> inline
 bool has_facet(const locale& _Loc) noexcept
 {
 { ::std:: _Lockit _Lock(0);
  size_t _Id = _Facet::id;
  return (_Loc._Getfacet(_Id) != 0
   || _Facet::_Getcat() != (size_t)(-1));
 }
 }


template<class _Elem> inline
 bool (isalnum)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::alnum, _Ch));
 }

template<class _Elem> inline
 bool (isalpha)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::alpha, _Ch));
 }

template<class _Elem> inline
 bool (isblank)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::blank, _Ch));
 }

template<class _Elem> inline
 bool (iscntrl)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::cntrl, _Ch));
 }

template<class _Elem> inline
 bool (isdigit)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::digit, _Ch));
 }

template<class _Elem> inline
 bool (isgraph)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::graph, _Ch));
 }

template<class _Elem> inline
 bool (islower)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::lower, _Ch));
 }

template<class _Elem> inline
 bool (isprint)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::print, _Ch));
 }

template<class _Elem> inline
 bool (ispunct)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::punct, _Ch));
 }

template<class _Elem> inline
 bool (isspace)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::space, _Ch));
 }

template<class _Elem> inline
 bool (isupper)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::upper, _Ch));
 }

template<class _Elem> inline
 bool (isxdigit)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::xdigit, _Ch));
 }

template<class _Elem> inline
 _Elem (tolower)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).tolower(_Ch));
 }

template<class _Elem> inline
 _Elem (toupper)(_Elem _Ch, const locale& _Loc)
 {
 return (use_facet< ctype<_Elem> >(_Loc).toupper(_Ch));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp" 2




namespace sf
{
template <unsigned int N>
class Utf;





template <>
class Utf<8>
{
public:
# 66 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static In decode(In begin, In end, Uint32& output, Uint32 replacement = 0);
# 82 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename Out>
    static Out encode(Uint32 input, Out output, Uint8 replacement = 0);
# 97 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static In next(In begin, In end);
# 113 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static std::size_t count(In begin, In end);
# 130 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromAnsi(In begin, In end, Out output, const std::locale& locale = std::locale());
# 143 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromWide(In begin, In end, Out output);
# 156 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromLatin1(In begin, In end, Out output);
# 174 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toAnsi(In begin, In end, Out output, char replacement = 0, const std::locale& locale = std::locale());
# 188 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toWide(In begin, In end, Out output, wchar_t replacement = 0);
# 202 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toLatin1(In begin, In end, Out output, char replacement = 0);
# 220 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf8(In begin, In end, Out output);
# 233 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf16(In begin, In end, Out output);
# 246 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf32(In begin, In end, Out output);
};





template <>
class Utf<16>
{
public:
# 273 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static In decode(In begin, In end, Uint32& output, Uint32 replacement = 0);
# 289 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename Out>
    static Out encode(Uint32 input, Out output, Uint16 replacement = 0);
# 304 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static In next(In begin, In end);
# 320 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static std::size_t count(In begin, In end);
# 337 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromAnsi(In begin, In end, Out output, const std::locale& locale = std::locale());
# 350 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromWide(In begin, In end, Out output);
# 363 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromLatin1(In begin, In end, Out output);
# 381 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toAnsi(In begin, In end, Out output, char replacement = 0, const std::locale& locale = std::locale());
# 395 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toWide(In begin, In end, Out output, wchar_t replacement = 0);
# 409 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toLatin1(In begin, In end, Out output, char replacement = 0);
# 422 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf8(In begin, In end, Out output);
# 440 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf16(In begin, In end, Out output);
# 453 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf32(In begin, In end, Out output);
};





template <>
class Utf<32>
{
public:
# 481 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static In decode(In begin, In end, Uint32& output, Uint32 replacement = 0);
# 498 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename Out>
    static Out encode(Uint32 input, Out output, Uint32 replacement = 0);
# 513 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static In next(In begin, In end);
# 528 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static std::size_t count(In begin, In end);
# 545 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromAnsi(In begin, In end, Out output, const std::locale& locale = std::locale());
# 558 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromWide(In begin, In end, Out output);
# 571 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out fromLatin1(In begin, In end, Out output);
# 589 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toAnsi(In begin, In end, Out output, char replacement = 0, const std::locale& locale = std::locale());
# 603 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toWide(In begin, In end, Out output, wchar_t replacement = 0);
# 617 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toLatin1(In begin, In end, Out output, char replacement = 0);
# 630 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf8(In begin, In end, Out output);
# 643 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf16(In begin, In end, Out output);
# 661 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In, typename Out>
    static Out toUtf32(In begin, In end, Out output);
# 677 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static Uint32 decodeAnsi(In input, const std::locale& locale = std::locale());
# 692 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename In>
    static Uint32 decodeWide(In input);
# 710 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename Out>
    static Out encodeAnsi(Uint32 codepoint, Out output, char replacement = 0, const std::locale& locale = std::locale());
# 727 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp"
    template <typename Out>
    static Out encodeWide(Uint32 codepoint, Out output, wchar_t replacement = 0);
};


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.inl" 1
# 38 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.inl"
template <typename In>
In Utf<8>::decode(In begin, In end, Uint32& output, Uint32 replacement)
{

    static const int trailing[256] =
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5
    };
    static const Uint32 offsets[6] =
    {
        0x00000000, 0x00003080, 0x000E2080, 0x03C82080, 0xFA082080, 0x82082080
    };


    int trailingBytes = trailing[static_cast<Uint8>(*begin)];
    if (begin + trailingBytes < end)
    {
        output = 0;
        switch (trailingBytes)
        {
            case 5: output += static_cast<Uint8>(*begin++); output <<= 6;
            case 4: output += static_cast<Uint8>(*begin++); output <<= 6;
            case 3: output += static_cast<Uint8>(*begin++); output <<= 6;
            case 2: output += static_cast<Uint8>(*begin++); output <<= 6;
            case 1: output += static_cast<Uint8>(*begin++); output <<= 6;
            case 0: output += static_cast<Uint8>(*begin++);
        }
        output -= offsets[trailingBytes];
    }
    else
    {

        begin = end;
        output = replacement;
    }

    return begin;
}



template <typename Out>
Out Utf<8>::encode(Uint32 input, Out output, Uint8 replacement)
{

    static const Uint8 firstBytes[7] =
    {
        0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC
    };


    if ((input > 0x0010FFFF) || ((input >= 0xD800) && (input <= 0xDBFF)))
    {

        if (replacement)
            *output++ = replacement;
    }
    else
    {



        std::size_t bytestoWrite = 1;
        if (input < 0x80) bytestoWrite = 1;
        else if (input < 0x800) bytestoWrite = 2;
        else if (input < 0x10000) bytestoWrite = 3;
        else if (input <= 0x0010FFFF) bytestoWrite = 4;


        Uint8 bytes[4];
        switch (bytestoWrite)
        {
            case 4: bytes[3] = static_cast<Uint8>((input | 0x80) & 0xBF); input >>= 6;
            case 3: bytes[2] = static_cast<Uint8>((input | 0x80) & 0xBF); input >>= 6;
            case 2: bytes[1] = static_cast<Uint8>((input | 0x80) & 0xBF); input >>= 6;
            case 1: bytes[0] = static_cast<Uint8> (input | firstBytes[bytestoWrite]);
        }


        output = std::copy(bytes, bytes + bytestoWrite, output);
    }

    return output;
}



template <typename In>
In Utf<8>::next(In begin, In end)
{
    Uint32 codepoint;
    return decode(begin, end, codepoint);
}



template <typename In>
std::size_t Utf<8>::count(In begin, In end)
{
    std::size_t length = 0;
    while (begin < end)
    {
        begin = next(begin, end);
        ++length;
    }

    return length;
}



template <typename In, typename Out>
Out Utf<8>::fromAnsi(In begin, In end, Out output, const std::locale& locale)
{
    while (begin < end)
    {
        Uint32 codepoint = Utf<32>::decodeAnsi(*begin++, locale);
        output = encode(codepoint, output);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<8>::fromWide(In begin, In end, Out output)
{
    while (begin < end)
    {
        Uint32 codepoint = Utf<32>::decodeWide(*begin++);
        output = encode(codepoint, output);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<8>::fromLatin1(In begin, In end, Out output)
{


    while (begin < end)
        output = encode(*begin++, output);

    return output;
}



template <typename In, typename Out>
Out Utf<8>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        output = Utf<32>::encodeAnsi(codepoint, output, replacement, locale);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<8>::toWide(In begin, In end, Out output, wchar_t replacement)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        output = Utf<32>::encodeWide(codepoint, output, replacement);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<8>::toLatin1(In begin, In end, Out output, char replacement)
{


    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        *output++ = codepoint < 256 ? static_cast<char>(codepoint) : replacement;
    }

    return output;
}



template <typename In, typename Out>
Out Utf<8>::toUtf8(In begin, In end, Out output)
{
    return std::copy(begin, end, output);
}



template <typename In, typename Out>
Out Utf<8>::toUtf16(In begin, In end, Out output)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        output = Utf<16>::encode(codepoint, output);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<8>::toUtf32(In begin, In end, Out output)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        *output++ = codepoint;
    }

    return output;
}



template <typename In>
In Utf<16>::decode(In begin, In end, Uint32& output, Uint32 replacement)
{
    Uint16 first = *begin++;


    if ((first >= 0xD800) && (first <= 0xDBFF))
    {
        if (begin < end)
        {
            Uint32 second = *begin++;
            if ((second >= 0xDC00) && (second <= 0xDFFF))
            {

                output = static_cast<Uint32>(((first - 0xD800) << 10) + (second - 0xDC00) + 0x0010000);
            }
            else
            {

                output = replacement;
            }
        }
        else
        {

            begin = end;
            output = replacement;
        }
    }
    else
    {

        output = first;
    }

    return begin;
}



template <typename Out>
Out Utf<16>::encode(Uint32 input, Out output, Uint16 replacement)
{
    if (input < 0xFFFF)
    {

        if ((input >= 0xD800) && (input <= 0xDFFF))
        {

            if (replacement)
                *output++ = replacement;
        }
        else
        {

            *output++ = static_cast<Uint16>(input);
        }
    }
    else if (input > 0x0010FFFF)
    {

        if (replacement)
            *output++ = replacement;
    }
    else
    {

        input -= 0x0010000;
        *output++ = static_cast<Uint16>((input >> 10) + 0xD800);
        *output++ = static_cast<Uint16>((input & 0x3FFUL) + 0xDC00);
    }

    return output;
}



template <typename In>
In Utf<16>::next(In begin, In end)
{
    Uint32 codepoint;
    return decode(begin, end, codepoint);
}



template <typename In>
std::size_t Utf<16>::count(In begin, In end)
{
    std::size_t length = 0;
    while (begin < end)
    {
        begin = next(begin, end);
        ++length;
    }

    return length;
}



template <typename In, typename Out>
Out Utf<16>::fromAnsi(In begin, In end, Out output, const std::locale& locale)
{
    while (begin < end)
    {
        Uint32 codepoint = Utf<32>::decodeAnsi(*begin++, locale);
        output = encode(codepoint, output);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<16>::fromWide(In begin, In end, Out output)
{
    while (begin < end)
    {
        Uint32 codepoint = Utf<32>::decodeWide(*begin++);
        output = encode(codepoint, output);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<16>::fromLatin1(In begin, In end, Out output)
{


    return std::copy(begin, end, output);
}



template <typename In, typename Out>
Out Utf<16>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        output = Utf<32>::encodeAnsi(codepoint, output, replacement, locale);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<16>::toWide(In begin, In end, Out output, wchar_t replacement)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        output = Utf<32>::encodeWide(codepoint, output, replacement);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<16>::toLatin1(In begin, In end, Out output, char replacement)
{


    while (begin < end)
    {
        *output++ = *begin < 256 ? static_cast<char>(*begin) : replacement;
        begin++;
    }

    return output;
}



template <typename In, typename Out>
Out Utf<16>::toUtf8(In begin, In end, Out output)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        output = Utf<8>::encode(codepoint, output);
    }

    return output;
}



template <typename In, typename Out>
Out Utf<16>::toUtf16(In begin, In end, Out output)
{
    return std::copy(begin, end, output);
}



template <typename In, typename Out>
Out Utf<16>::toUtf32(In begin, In end, Out output)
{
    while (begin < end)
    {
        Uint32 codepoint;
        begin = decode(begin, end, codepoint);
        *output++ = codepoint;
    }

    return output;
}



template <typename In>
In Utf<32>::decode(In begin, In , Uint32& output, Uint32 )
{
    output = *begin++;
    return begin;
}



template <typename Out>
Out Utf<32>::encode(Uint32 input, Out output, Uint32 )
{
    *output++ = input;
    return output;
}



template <typename In>
In Utf<32>::next(In begin, In )
{
    return ++begin;
}



template <typename In>
std::size_t Utf<32>::count(In begin, In end)
{
    return begin - end;
}



template <typename In, typename Out>
Out Utf<32>::fromAnsi(In begin, In end, Out output, const std::locale& locale)
{
    while (begin < end)
        *output++ = decodeAnsi(*begin++, locale);

    return output;
}



template <typename In, typename Out>
Out Utf<32>::fromWide(In begin, In end, Out output)
{
    while (begin < end)
        *output++ = decodeWide(*begin++);

    return output;
}



template <typename In, typename Out>
Out Utf<32>::fromLatin1(In begin, In end, Out output)
{


    return std::copy(begin, end, output);
}



template <typename In, typename Out>
Out Utf<32>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)
{
    while (begin < end)
        output = encodeAnsi(*begin++, output, replacement, locale);

    return output;
}



template <typename In, typename Out>
Out Utf<32>::toWide(In begin, In end, Out output, wchar_t replacement)
{
    while (begin < end)
        output = encodeWide(*begin++, output, replacement);

    return output;
}



template <typename In, typename Out>
Out Utf<32>::toLatin1(In begin, In end, Out output, char replacement)
{


    while (begin < end)
    {
        *output++ = *begin < 256 ? static_cast<char>(*begin) : replacement;
        begin++;
    }

    return output;
}



template <typename In, typename Out>
Out Utf<32>::toUtf8(In begin, In end, Out output)
{
    while (begin < end)
        output = Utf<8>::encode(*begin++, output);

    return output;
}


template <typename In, typename Out>
Out Utf<32>::toUtf16(In begin, In end, Out output)
{
    while (begin < end)
        output = Utf<16>::encode(*begin++, output);

    return output;
}



template <typename In, typename Out>
Out Utf<32>::toUtf32(In begin, In end, Out output)
{
    return std::copy(begin, end, output);
}



template <typename In>
Uint32 Utf<32>::decodeAnsi(In input, const std::locale& locale)
{
# 659 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.inl"
        const std::ctype<wchar_t>& facet = std::use_facet< std::ctype<wchar_t> >(locale);


        return static_cast<Uint32>(facet.widen(input));


}



template <typename In>
Uint32 Utf<32>::decodeWide(In input)
{






    return input;
}



template <typename Out>
Out Utf<32>::encodeAnsi(Uint32 codepoint, Out output, char replacement, const std::locale& locale)
{
# 708 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.inl"
        const std::ctype<wchar_t>& facet = std::use_facet< std::ctype<wchar_t> >(locale);


        *output++ = facet.narrow(static_cast<wchar_t>(codepoint), replacement);

        return output;


}



template <typename Out>
Out Utf<32>::encodeWide(Uint32 codepoint, Out output, wchar_t replacement)
{






    switch (sizeof(wchar_t))
    {
        case 4:
        {
            *output++ = static_cast<wchar_t>(codepoint);
            break;
        }

        default:
        {
            if ((codepoint <= 0xFFFF) && ((codepoint < 0xD800) || (codepoint > 0xDFFF)))
            {
                *output++ = static_cast<wchar_t>(codepoint);
            }
            else if (replacement)
            {
                *output++ = replacement;
            }
            break;
        }
    }

    return output;
}
# 732 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Utf.hpp" 2


typedef Utf<8> Utf8;
typedef Utf<16> Utf16;
typedef Utf<32> Utf32;

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp" 2




namespace sf
{





class __declspec(dllimport) String
{
public:




    typedef std::basic_string<Uint32>::iterator Iterator;
    typedef std::basic_string<Uint32>::const_iterator ConstIterator;




    static const std::size_t InvalidPos;







    String();
# 77 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    String(char ansiChar, const std::locale& locale = std::locale());







    String(wchar_t wideChar);







    String(Uint32 utf32Char);
# 105 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    String(const char* ansiString, const std::locale& locale = std::locale());
# 117 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    String(const std::string& ansiString, const std::locale& locale = std::locale());







    String(const wchar_t* wideString);







    String(const std::wstring& wideString);







    String(const Uint32* utf32String);







    String(const std::basic_string<Uint32>& utf32String);







    String(const String& copy);
# 170 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    template <typename T>
    static String fromUtf8(T begin, T end);
# 184 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    template <typename T>
    static String fromUtf16(T begin, T end);
# 202 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    template <typename T>
    static String fromUtf32(T begin, T end);
# 220 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    operator std::string() const;
# 235 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    operator std::wstring() const;
# 252 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::string toAnsiString(const std::locale& locale = std::locale()) const;
# 265 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::wstring toWideString() const;
# 275 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::basic_string<Uint8> toUtf8() const;
# 285 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::basic_string<Uint16> toUtf16() const;
# 298 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::basic_string<Uint32> toUtf32() const;
# 308 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    String& operator =(const String& right);
# 318 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    String& operator +=(const String& right);
# 331 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    Uint32 operator [](std::size_t index) const;
# 344 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    Uint32& operator [](std::size_t index);
# 354 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    void clear();
# 364 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::size_t getSize() const;
# 374 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    bool isEmpty() const;
# 386 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    void erase(std::size_t position, std::size_t count = 1);
# 398 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    void insert(std::size_t position, const String& str);
# 412 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    std::size_t find(const String& str, std::size_t start = 0) const;
# 426 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    void replace(std::size_t position, std::size_t length, const String& replaceWith);
# 438 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    void replace(const String& searchFor, const String& replaceWith);
# 455 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    String substring(std::size_t position, std::size_t length = InvalidPos) const;
# 468 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    const Uint32* getData() const;
# 478 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    Iterator begin();
# 488 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    ConstIterator begin() const;
# 502 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    Iterator end();
# 516 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
    ConstIterator end() const;

private:

    friend __declspec(dllimport) bool operator ==(const String& left, const String& right);
    friend __declspec(dllimport) bool operator <(const String& left, const String& right);




    std::basic_string<Uint32> m_string;
};
# 539 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) bool operator ==(const String& left, const String& right);
# 551 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) bool operator !=(const String& left, const String& right);
# 563 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) bool operator <(const String& left, const String& right);
# 575 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) bool operator >(const String& left, const String& right);
# 587 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) bool operator <=(const String& left, const String& right);
# 599 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) bool operator >=(const String& left, const String& right);
# 611 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp"
__declspec(dllimport) String operator +(const String& left, const String& right);


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.inl" 1
# 27 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.inl"
template <typename T>
String String::fromUtf8(T begin, T end)
{
    String string;
    Utf8::toUtf32(begin, end, std::back_inserter(string.m_string));
    return string;
}



template <typename T>
String String::fromUtf16(T begin, T end)
{
    String string;
    Utf16::toUtf32(begin, end, std::back_inserter(string.m_string));
    return string;
}



template <typename T>
String String::fromUtf32(T begin, T end)
{
    String string;
    string.m_string.assign(begin, end);
    return string;
}
# 614 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/String.hpp" 2

}
# 43 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp" 1
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
namespace sf
{
namespace priv
{
    class ThreadImpl;
    struct ThreadFunc;
}





class __declspec(dllimport) Thread : NonCopyable
{
public:
# 74 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    template <typename F>
    Thread(F function);
# 102 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    template <typename F, typename A>
    Thread(F function, A argument);
# 125 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    template <typename C>
    Thread(void(C::*function)(), C* object);
# 135 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    ~Thread();
# 146 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    void launch();
# 159 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    void wait();
# 172 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp"
    void terminate();

private:

    friend class priv::ThreadImpl;







    void run();




    priv::ThreadImpl* m_impl;
    priv::ThreadFunc* m_entryPoint;
};


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.inl" 1
# 25 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.inl"
namespace priv
{

struct ThreadFunc
{
    virtual ~ThreadFunc() {}
    virtual void run() = 0;
};


template <typename T>
struct ThreadFunctor : ThreadFunc
{
    ThreadFunctor(T functor) : m_functor(functor) {}
    virtual void run() {m_functor();}
    T m_functor;
};


template <typename F, typename A>
struct ThreadFunctorWithArg : ThreadFunc
{
    ThreadFunctorWithArg(F function, A arg) : m_function(function), m_arg(arg) {}
    virtual void run() {m_function(m_arg);}
    F m_function;
    A m_arg;
};


template <typename C>
struct ThreadMemberFunc : ThreadFunc
{
    ThreadMemberFunc(void(C::*function)(), C* object) : m_function(function), m_object(object) {}
    virtual void run() {(m_object->*m_function)();}
    void(C::*m_function)();
    C* m_object;
};

}



template <typename F>
Thread::Thread(F functor) :
m_impl (0),
m_entryPoint(new priv::ThreadFunctor<F>(functor))
{
}



template <typename F, typename A>
Thread::Thread(F function, A argument) :
m_impl (0),
m_entryPoint(new priv::ThreadFunctorWithArg<F, A>(function, argument))
{
}



template <typename C>
Thread::Thread(void(C::*function)(), C* object) :
m_impl (0),
m_entryPoint(new priv::ThreadMemberFunc<C>(function, object))
{
}
# 194 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Thread.hpp" 2

}
# 44 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocal.hpp" 1
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocal.hpp"
namespace sf
{
namespace priv
{
    class ThreadLocalImpl;
}





class __declspec(dllimport) ThreadLocal : NonCopyable
{
public:







    ThreadLocal(void* value = 0);





    ~ThreadLocal();







    void setValue(void* value);







    void* getValue() const;

private:




    priv::ThreadLocalImpl* m_impl;
};

}
# 45 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp"
namespace sf
{




template <typename T>
class ThreadLocalPtr : private ThreadLocal
{
public:







    ThreadLocalPtr(T* value = 0);
# 62 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp"
    T& operator *() const;
# 73 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp"
    T* operator ->() const;
# 82 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp"
    operator T*() const;
# 92 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp"
    ThreadLocalPtr<T>& operator =(T* value);
# 102 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp"
    ThreadLocalPtr<T>& operator =(const ThreadLocalPtr<T>& right);
};

}


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.inl" 1
# 26 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.inl"
namespace sf
{

template <typename T>
ThreadLocalPtr<T>::ThreadLocalPtr(T* value) :
ThreadLocal(value)
{
}



template <typename T>
T& ThreadLocalPtr<T>::operator *() const
{
    return *static_cast<T*>(getValue());
}



template <typename T>
T* ThreadLocalPtr<T>::operator ->() const
{
    return static_cast<T*>(getValue());
}



template <typename T>
ThreadLocalPtr<T>::operator T*() const
{
    return static_cast<T*>(getValue());
}



template <typename T>
ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(T* value)
{
    setValue(value);
    return *this;
}



template <typename T>
ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(const ThreadLocalPtr<T>& right)
{
    setValue(right.getValue());
    return *this;
}

}
# 108 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/ThreadLocalPtr.hpp" 2
# 46 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp" 1
# 29 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
namespace sf
{





template <typename T>
class Vector2
{
public:







    Vector2();
# 56 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
    Vector2(T X, T Y);
# 69 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
    template <typename U>
    explicit Vector2(const Vector2<U>& vector);




    T x;
    T y;
};
# 88 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T> operator -(const Vector2<T>& right);
# 104 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& right);
# 120 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& right);
# 133 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& right);
# 146 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& right);
# 159 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T> operator *(const Vector2<T>& left, T right);
# 172 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T> operator *(T left, const Vector2<T>& right);
# 188 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T>& operator *=(Vector2<T>& left, T right);
# 201 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T> operator /(const Vector2<T>& left, T right);
# 217 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
Vector2<T>& operator /=(Vector2<T>& left, T right);
# 232 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
bool operator ==(const Vector2<T>& left, const Vector2<T>& right);
# 247 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp"
template <typename T>
bool operator !=(const Vector2<T>& left, const Vector2<T>& right);


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.inl" 1
# 27 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.inl"
template <typename T>
inline Vector2<T>::Vector2() :
x(0),
y(0)
{

}



template <typename T>
inline Vector2<T>::Vector2(T X, T Y) :
x(X),
y(Y)
{

}



template <typename T>
template <typename U>
inline Vector2<T>::Vector2(const Vector2<U>& vector) :
x(static_cast<T>(vector.x)),
y(static_cast<T>(vector.y))
{
}



template <typename T>
inline Vector2<T> operator -(const Vector2<T>& right)
{
    return Vector2<T>(-right.x, -right.y);
}



template <typename T>
inline Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& right)
{
    left.x += right.x;
    left.y += right.y;

    return left;
}



template <typename T>
inline Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& right)
{
    left.x -= right.x;
    left.y -= right.y;

    return left;
}



template <typename T>
inline Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& right)
{
    return Vector2<T>(left.x + right.x, left.y + right.y);
}



template <typename T>
inline Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& right)
{
    return Vector2<T>(left.x - right.x, left.y - right.y);
}



template <typename T>
inline Vector2<T> operator *(const Vector2<T>& left, T right)
{
    return Vector2<T>(left.x * right, left.y * right);
}



template <typename T>
inline Vector2<T> operator *(T left, const Vector2<T>& right)
{
    return Vector2<T>(right.x * left, right.y * left);
}



template <typename T>
inline Vector2<T>& operator *=(Vector2<T>& left, T right)
{
    left.x *= right;
    left.y *= right;

    return left;
}



template <typename T>
inline Vector2<T> operator /(const Vector2<T>& left, T right)
{
    return Vector2<T>(left.x / right, left.y / right);
}



template <typename T>
inline Vector2<T>& operator /=(Vector2<T>& left, T right)
{
    left.x /= right;
    left.y /= right;

    return left;
}



template <typename T>
inline bool operator ==(const Vector2<T>& left, const Vector2<T>& right)
{
    return (left.x == right.x) && (left.y == right.y);
}



template <typename T>
inline bool operator !=(const Vector2<T>& left, const Vector2<T>& right)
{
    return (left.x != right.x) || (left.y != right.y);
}
# 251 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector2.hpp" 2


typedef Vector2<int> Vector2i;
typedef Vector2<unsigned int> Vector2u;
typedef Vector2<float> Vector2f;

}
# 49 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp" 1
# 29 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
namespace sf
{





template <typename T>
class Vector3
{
public:







    Vector3();
# 57 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
    Vector3(T X, T Y, T Z);
# 70 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
    template <typename U>
    explicit Vector3(const Vector3<U>& vector);




    T x;
    T y;
    T z;
};
# 90 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T> operator -(const Vector3<T>& left);
# 106 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& right);
# 122 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& right);
# 135 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& right);
# 148 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& right);
# 161 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T> operator *(const Vector3<T>& left, T right);
# 174 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T> operator *(T left, const Vector3<T>& right);
# 190 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T>& operator *=(Vector3<T>& left, T right);
# 203 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T> operator /(const Vector3<T>& left, T right);
# 219 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
Vector3<T>& operator /=(Vector3<T>& left, T right);
# 234 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
bool operator ==(const Vector3<T>& left, const Vector3<T>& right);
# 249 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp"
template <typename T>
bool operator !=(const Vector3<T>& left, const Vector3<T>& right);


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.inl" 1
# 27 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.inl"
template <typename T>
inline Vector3<T>::Vector3() :
x(0),
y(0),
z(0)
{

}



template <typename T>
inline Vector3<T>::Vector3(T X, T Y, T Z) :
x(X),
y(Y),
z(Z)
{

}



template <typename T>
template <typename U>
inline Vector3<T>::Vector3(const Vector3<U>& vector) :
x(static_cast<T>(vector.x)),
y(static_cast<T>(vector.y)),
z(static_cast<T>(vector.z))
{
}



template <typename T>
inline Vector3<T> operator -(const Vector3<T>& left)
{
    return Vector3<T>(-left.x, -left.y, -left.z);
}



template <typename T>
inline Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& right)
{
    left.x += right.x;
    left.y += right.y;
    left.z += right.z;

    return left;
}



template <typename T>
inline Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& right)
{
    left.x -= right.x;
    left.y -= right.y;
    left.z -= right.z;

    return left;
}



template <typename T>
inline Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& right)
{
    return Vector3<T>(left.x + right.x, left.y + right.y, left.z + right.z);
}



template <typename T>
inline Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& right)
{
    return Vector3<T>(left.x - right.x, left.y - right.y, left.z - right.z);
}



template <typename T>
inline Vector3<T> operator *(const Vector3<T>& left, T right)
{
    return Vector3<T>(left.x * right, left.y * right, left.z * right);
}



template <typename T>
inline Vector3<T> operator *(T left, const Vector3<T>& right)
{
    return Vector3<T>(right.x * left, right.y * left, right.z * left);
}



template <typename T>
inline Vector3<T>& operator *=(Vector3<T>& left, T right)
{
    left.x *= right;
    left.y *= right;
    left.z *= right;

    return left;
}



template <typename T>
inline Vector3<T> operator /(const Vector3<T>& left, T right)
{
    return Vector3<T>(left.x / right, left.y / right, left.z / right);
}



template <typename T>
inline Vector3<T>& operator /=(Vector3<T>& left, T right)
{
    left.x /= right;
    left.y /= right;
    left.z /= right;

    return left;
}



template <typename T>
inline bool operator ==(const Vector3<T>& left, const Vector3<T>& right)
{
    return (left.x == right.x) && (left.y == right.y) && (left.z == right.z);
}



template <typename T>
inline bool operator !=(const Vector3<T>& left, const Vector3<T>& right)
{
    return (left.x != right.x) || (left.y != right.y) || (left.z != right.z);
}
# 253 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System/Vector3.hpp" 2


typedef Vector3<int> Vector3i;
typedef Vector3<float> Vector3f;

}
# 50 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/System.hpp" 2
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp" 1
# 31 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Export.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/GlResource.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/GlResource.hpp"
namespace sf
{




class __declspec(dllimport) GlResource
{
protected:





    GlResource();





    ~GlResource();





    static void ensureGlContext();
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/ContextSettings.hpp" 1
# 29 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/ContextSettings.hpp"
namespace sf
{





struct ContextSettings
{




    enum Attribute
    {
        Default = 0,
        Core = 1 << 0,
        Debug = 1 << 2
    };
# 60 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/ContextSettings.hpp"
    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 1, unsigned int minor = 1, unsigned int attributes = Default) :
    depthBits (depth),
    stencilBits (stencil),
    antialiasingLevel(antialiasing),
    majorVersion (major),
    minorVersion (minor),
    attributeFlags (attributes)
    {
    }




    unsigned int depthBits;
    unsigned int stencilBits;
    unsigned int antialiasingLevel;
    unsigned int majorVersion;
    unsigned int minorVersion;
    Uint32 attributeFlags;
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp" 2



namespace sf
{
namespace priv
{
    class GlContext;
}

typedef void (*GlFunctionPointer)();





class __declspec(dllimport) Context : GlResource, NonCopyable
{
public:







    Context();







    ~Context();
# 78 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp"
    bool setActive(bool active);

public:
# 89 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp"
    static GlFunctionPointer getFunction(const char* name);
# 102 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Context.hpp"
    Context(const ContextSettings& settings, unsigned int width, unsigned int height);

private:




    priv::GlContext* m_context;
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
namespace sf
{




class __declspec(dllimport) Joystick
{
public:





    enum
    {
        Count = 8,
        ButtonCount = 32,
        AxisCount = 8
    };





    enum Axis
    {
        X,
        Y,
        Z,
        R,
        U,
        V,
        PovX,
        PovY
    };





    struct __declspec(dllimport) Identification
    {
        Identification();

        String name;
        unsigned int vendorId;
        unsigned int productId;
    };
# 93 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static bool isConnected(unsigned int joystick);
# 105 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static unsigned int getButtonCount(unsigned int joystick);
# 118 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static bool hasAxis(unsigned int joystick, Axis axis);
# 131 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static bool isButtonPressed(unsigned int joystick, unsigned int button);
# 144 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static float getAxisPosition(unsigned int joystick, Axis axis);
# 154 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static Identification getIdentification(unsigned int joystick);
# 165 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Joystick.hpp"
    static void update();
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Keyboard.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Keyboard.hpp"
namespace sf
{




class __declspec(dllimport) Keyboard
{
public:





    enum Key
    {
        Unknown = -1,
        A = 0,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        Num0,
        Num1,
        Num2,
        Num3,
        Num4,
        Num5,
        Num6,
        Num7,
        Num8,
        Num9,
        Escape,
        LControl,
        LShift,
        LAlt,
        LSystem,
        RControl,
        RShift,
        RAlt,
        RSystem,
        Menu,
        LBracket,
        RBracket,
        SemiColon,
        Comma,
        Period,
        Quote,
        Slash,
        BackSlash,
        Tilde,
        Equal,
        Dash,
        Space,
        Return,
        BackSpace,
        Tab,
        PageUp,
        PageDown,
        End,
        Home,
        Insert,
        Delete,
        Add,
        Subtract,
        Multiply,
        Divide,
        Left,
        Right,
        Up,
        Down,
        Numpad0,
        Numpad1,
        Numpad2,
        Numpad3,
        Numpad4,
        Numpad5,
        Numpad6,
        Numpad7,
        Numpad8,
        Numpad9,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
        F13,
        F14,
        F15,
        Pause,

        KeyCount
    };
# 164 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Keyboard.hpp"
    static bool isKeyPressed(Key key);
# 179 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Keyboard.hpp"
    static void setVirtualKeyboardVisible(bool visible);
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp"
namespace sf
{
class Window;





class __declspec(dllimport) Mouse
{
public:





    enum Button
    {
        Left,
        Right,
        Middle,
        XButton1,
        XButton2,

        ButtonCount
    };





    enum Wheel
    {
        VerticalWheel,
        HorizontalWheel
    };
# 80 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp"
    static bool isButtonPressed(Button button);
# 91 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp"
    static Vector2i getPosition();
# 104 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp"
    static Vector2i getPosition(const Window& relativeTo);
# 115 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp"
    static void setPosition(const Vector2i& position);
# 127 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Mouse.hpp"
    static void setPosition(const Vector2i& position, const Window& relativeTo);
};

}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Sensor.hpp" 1
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Sensor.hpp"
namespace sf
{




class __declspec(dllimport) Sensor
{
public:





    enum Type
    {
        Accelerometer,
        Gyroscope,
        Magnetometer,
        Gravity,
        UserAcceleration,
        Orientation,

        Count
    };
# 70 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Sensor.hpp"
    static bool isAvailable(Type sensor);
# 85 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Sensor.hpp"
    static void setEnabled(Type sensor, bool enabled);
# 95 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Sensor.hpp"
    static Vector3f getValue(Type sensor);
};

}
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp" 2


namespace sf
{




class Event
{
public:





    struct SizeEvent
    {
        unsigned int width;
        unsigned int height;
    };





    struct KeyEvent
    {
        Keyboard::Key code;
        bool alt;
        bool control;
        bool shift;
        bool system;
    };





    struct TextEvent
    {
        Uint32 unicode;
    };





    struct MouseMoveEvent
    {
        int x;
        int y;
    };






    struct MouseButtonEvent
    {
        Mouse::Button button;
        int x;
        int y;
    };
# 109 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Event.hpp"
    struct MouseWheelEvent
    {
        int delta;
        int x;
        int y;
    };





    struct MouseWheelScrollEvent
    {
        Mouse::Wheel wheel;
        float delta;
        int x;
        int y;
    };






    struct JoystickConnectEvent
    {
        unsigned int joystickId;
    };





    struct JoystickMoveEvent
    {
        unsigned int joystickId;
        Joystick::Axis axis;
        float position;
    };






    struct JoystickButtonEvent
    {
        unsigned int joystickId;
        unsigned int button;
    };





    struct TouchEvent
    {
        unsigned int finger;
        int x;
        int y;
    };





    struct SensorEvent
    {
        Sensor::Type type;
        float x;
        float y;
        float z;
    };





    enum EventType
    {
        Closed,
        Resized,
        LostFocus,
        GainedFocus,
        TextEntered,
        KeyPressed,
        KeyReleased,
        MouseWheelMoved,
        MouseWheelScrolled,
        MouseButtonPressed,
        MouseButtonReleased,
        MouseMoved,
        MouseEntered,
        MouseLeft,
        JoystickButtonPressed,
        JoystickButtonReleased,
        JoystickMoved,
        JoystickConnected,
        JoystickDisconnected,
        TouchBegan,
        TouchMoved,
        TouchEnded,
        SensorChanged,

        Count
    };




    EventType type;

    union
    {
        SizeEvent size;
        KeyEvent key;
        TextEvent text;
        MouseMoveEvent mouseMove;
        MouseButtonEvent mouseButton;
        MouseWheelEvent mouseWheel;
        MouseWheelScrollEvent mouseWheelScroll;
        JoystickMoveEvent joystickMove;
        JoystickButtonEvent joystickButton;
        JoystickConnectEvent joystickConnect;
        TouchEvent touch;
        SensorEvent sensor;
    };
};

}
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 2




# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Touch.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Touch.hpp"
namespace sf
{
class Window;





class __declspec(dllimport) Touch
{
public:
# 55 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Touch.hpp"
    static bool isDown(unsigned int finger);
# 68 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Touch.hpp"
    static Vector2i getPosition(unsigned int finger);
# 82 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Touch.hpp"
    static Vector2i getPosition(unsigned int finger, const Window& relativeTo);
};

}
# 41 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
#pragma warning(disable: 4244)

namespace std {



template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Myvec::value_type,
   typename _Myvec::difference_type,
   typename _Myvec::const_pointer,
   typename _Myvec::const_reference,
   _Iterator_base>
 {
public:
 typedef _Vector_const_iterator<_Myvec> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::const_pointer pointer;
 typedef typename _Myvec::const_reference reference;
 typedef typename _Myvec::pointer _Tptr;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = (_Tptr)_Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
   || ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
   {
   _Debug_message(L"vector iterator not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 72);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 73, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 73, 0); };
   }
# 84 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
                                          ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
   {
   _Debug_message(L"vector iterator not incrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 101);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 102, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 102, 0); };
   }
# 112 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
   {
   _Debug_message(L"vector iterator not decrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 130);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 131, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 131, 0); };
   }
# 141 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (this->_Getcont() == 0
   || this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
   || ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
   {
   _Debug_message(L"vector iterator + offset out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 159);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 160, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 160, 0); };
   }
# 170 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"vector iterators incompatible", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 241);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 242, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 242, 0); };
   }
  }
# 259 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 _Tptr _Ptr;
 };

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_const_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>&
  _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
   typename _Vector_const_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 typedef _Vector_iterator<_Myvec> _Myiter;
 typedef _Vector_const_iterator<_Myvec> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::pointer pointer;
 typedef typename _Myvec::reference reference;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>&
  _Rechecked(_Vector_iterator<_Myvec>& _Iter,
   typename _Vector_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _Vec_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Vec_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _Vec_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 typedef _Vector_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Myt> iterator;
 typedef _Vector_const_iterator<_Myt> const_iterator;

 _Vector_val()
  {
  _Myfirst = pointer();
  _Mylast = pointer();
  _Myend = pointer();
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<class _Alloc_types>
 class _Vector_alloc
 {
public:
 typedef _Vector_alloc<_Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
 typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
# 538 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 _Vector_alloc(const _Alloc& _Al = _Alloc())
  : _Mypair(_One_then_variadic_args_t(), _Al)
  {
  _Alloc_proxy();
  }

 _Vector_alloc(_Alloc&& _Al)
  : _Mypair(_One_then_variadic_args_t(), ::std:: move(_Al))
  {
  _Alloc_proxy();
  }

 ~_Vector_alloc() noexcept
  {
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Pocs(_Getal(), _Right._Getal());
  _Swap_adl(_Myproxy(), _Right._Myproxy());
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Alproxy.allocate(1);
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Myproxy(), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Vector_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Vector_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second());
  }

 pointer& _Myfirst() noexcept
  {
  return (_Get_data()._Myfirst);
  }

 const pointer& _Myfirst() const noexcept
  {
  return (_Get_data()._Myfirst);
  }

 pointer& _Mylast() noexcept
  {
  return (_Get_data()._Mylast);
  }

 const pointer& _Mylast() const noexcept
  {
  return (_Get_data()._Mylast);
  }

 pointer& _Myend() noexcept
  {
  return (_Get_data()._Myend);
  }

 const pointer& _Myend() const noexcept
  {
  return (_Get_data()._Myend);
  }

private:
 _Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class vector
  : public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
 {
public:
 typedef vector<_Ty, _Alloc> _Myt;
 typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;




 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 vector() noexcept
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al) noexcept
  : _Mybase(_Al)
  {
  }

 explicit vector(size_type _Count)
  : _Mybase()
  {
  if (_Buy(_Count))
   {
   try {
   _Uninitialized_default_fill_n(this->_Myfirst(), _Count,
    this->_Getal());
   this->_Mylast() += _Count;
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  if (_Buy(::std:: distance(_First, _Last)))
   {
   try {
   this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 void _Construct_n(size_type _Count, const value_type *_Pval)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::propagate_on_container_move_assignment::value || _Alty::is_always_equal::value)

  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Myfirst() = _Right._Myfirst();
  this->_Mylast() = _Right._Mylast();
  this->_Myend() = _Right._Myend();

  _Right._Myfirst() = pointer();
  _Right._Mylast() = pointer();
  _Right._Myend() = pointer();
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_back(value_type&& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst();
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(this->_Mylast(),
    ::std:: forward<value_type>(this->_Myfirst()[_Idx]));
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(this->_Mylast(),
    ::std:: forward<value_type>(_Val));
   ++this->_Mylast();
   }
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  if (this->_Mylast() == this->_Myend())
   _Reserve(1);
  _Orphan_range(this->_Mylast(), this->_Mylast());
  this->_Getal().construct(this->_Mylast(),
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mylast();
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();


  if (size() < _Off)
   _Debug_message(L"vector emplace iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 940);


  emplace_back(::std:: forward<_Valty>(_Val)...);
  ::std:: rotate(begin() + _Off, end() - 1, end());
  return (begin() + _Off);
  }


 vector(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Construct(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Copy_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right.empty())
    clear();
   else if (_Right.size() <= size())
    {
    pointer _Ptr = _Copy_impl(_Right._Myfirst(),
     _Right._Mylast(), this->_Myfirst());
    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = this->_Myfirst() + _Right.size();
    }
   else if (_Right.size() <= capacity())
    {
    pointer _Ptr = _Right._Myfirst() + size();
    _Copy_impl(_Right._Myfirst(),
     _Ptr, this->_Myfirst());
    this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
     this->_Mylast());
    }
   else
    {
    if (this->_Myfirst() != pointer())
     {
     _Destroy(this->_Myfirst(), this->_Mylast());
     this->_Getal().deallocate(this->_Myfirst(),
      this->_Myend() - this->_Myfirst());
     }
    if (_Buy(_Right.size()))
     try {
     this->_Mylast() =
      _Ucopy(_Right._Myfirst(), _Right._Mylast(),
      this->_Myfirst());
     } catch (...) {
     _Tidy();
     throw;
     }
    }
   }
  return (*this);
  }

 void reserve(size_type _Count)
  {
  if (capacity() < _Count)
   {
   if (max_size() < _Count)
    _Xlen();
   _Reallocate(_Count);
   }
  }

 size_type capacity() const noexcept
  {
  return (this->_Myend() - this->_Myfirst());
  }

 size_type _Unused_capacity() const noexcept
  {
  return (this->_Myend() - this->_Mylast());
  }

 size_type _Has_unused_capacity() const noexcept
  {
  return (this->_Myend() != this->_Mylast());
  }

 iterator begin() noexcept
  {
  return (iterator(this->_Myfirst(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(this->_Myfirst(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Mylast(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Mylast(), &this->_Get_data()));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    _Tidy();
   else
    _Reallocate(size());
   }
  }

 void resize(size_type _Newsize)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   _Reserve(_Newsize - size());
   try {
   _Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
    this->_Getal());
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   const value_type *_Ptr = ::std:: addressof(_Val);

   if (_Inside(_Ptr))
    {
    const difference_type _Idx = _Ptr
     - ::std:: addressof(*this->_Myfirst());
    _Reserve(_Newsize - size());
    _Ptr = ::std:: addressof(*this->_Myfirst()) + _Idx;
    }
   else
    _Reserve(_Newsize - size());

   try {
   _Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast() += _Newsize - size();
   }
  }

 size_type size() const noexcept
  {
  return (this->_Mylast() - this->_Myfirst());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (this->_Myfirst() == this->_Mylast());
  }

 _Alloc get_allocator() const noexcept
  {
  return (this->_Getal());
  }

 const_reference at(size_type _Pos) const
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst() + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1216);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1217, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1217, 0); };
   }





  return (*(this->_Myfirst() + _Pos));
  }

 reference operator[](size_type _Pos)
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1232);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1233, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1233, 0); };
   }





  return (*(this->_Myfirst() + _Pos));
  }

 pointer data() noexcept
  {
  return (this->_Myfirst());
  }

 const_pointer data() const noexcept
  {
  return (this->_Myfirst());
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const value_type& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst();
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(this->_Mylast(),
    this->_Myfirst()[_Idx]);
   ++this->_Mylast();
   }
  else
   {
   if (this->_Mylast() == this->_Myend())
    _Reserve(1);
   _Orphan_range(this->_Mylast(), this->_Mylast());
   this->_Getal().construct(this->_Mylast(),
    _Val);
   ++this->_Mylast();
   }
  }


 void pop_back()
  {
  if (empty())
   _Debug_message(L"vector empty before pop", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1300);
  else
   {
   _Orphan_range(this->_Mylast() - 1, this->_Mylast());
   this->_Getal().destroy(this->_Mylast() - 1);
   --this->_Mylast();
   }
  }
# 1317 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();
  _Assign(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  size_type _Newsize = ::std:: distance(_First, _Last);

  if (capacity() < _Newsize)
   {
   size_type _Newcapacity = _Grow_to(_Newsize);
   _Tidy();
   _Buy(_Newcapacity);
   }

  this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  clear();
  insert(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const _Ty& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst();


  if (size() < _Off)
   _Debug_message(L"vector insert iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1386);


  if (_First != _Last)
   {
   size_type _Oldsize = size();

   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   erase(begin() + _Oldsize, end());
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    forward_iterator_tag)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1415);
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1416);


  size_type _Count = 0;
  _Distance(_First, _Last, _Count);

  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   _Ptr = _Ucopy(_First, _Last, _Ptr);
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Ptr);
   } catch (...) {
   _Destroy(_Newvec, _Ptr);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else
   {
   _Ucopy(_First, _Last, this->_Mylast());
   ::std:: rotate((_Where)._Ptr, this->_Mylast(),
    this->_Mylast() + _Count);
   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   }
  }


 iterator erase(const_iterator _Where)
  {
  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() <= (_Where)._Ptr)
   _Debug_message(L"vector erase iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1474);
  _Move((_Where)._Ptr + 1, this->_Mylast(), (_Where)._Ptr);
  _Destroy(this->_Mylast() - 1, this->_Mylast());
  _Orphan_range((_Where)._Ptr, this->_Mylast());
  --this->_Mylast();
  return (_Make_iter(_Where));
  }
# 1493 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  if (_First_arg == begin() && _Last_arg == end())
   clear();
  else if (_First_arg != _Last_arg)
   {
   iterator _First = _Make_iter(_First_arg);
   iterator _Last = _Make_iter(_Last_arg);

   if (_First != _Last)
    {

    if (_Last < _First || _First._Getcont() != &this->_Get_data()
     || (_First)._Ptr < this->_Myfirst()
     || this->_Mylast() < (_Last)._Ptr)
     _Debug_message(L"vector erase iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1509);
    pointer _Ptr = _Move((_Last)._Ptr, this->_Mylast(),
     (_First)._Ptr);
    _Orphan_range((_First)._Ptr, this->_Mylast());






    _Destroy(_Ptr, this->_Mylast());
    this->_Mylast() = _Ptr;
    }
   }
  return (_Make_iter(_First_arg));
  }

 void _Pop_back_n(size_type _Count)
  {
  pointer _Ptr = this->_Mylast() - _Count;


  _Orphan_range(_Ptr, this->_Mylast());


  _Destroy(_Ptr, this->_Mylast());
  this->_Mylast() = _Ptr;
  }

 void clear() noexcept
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst(), this->_Mylast());
  this->_Mylast() = this->_Myfirst();
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::propagate_on_container_swap::value || _Alty::is_always_equal::value)

  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst(), _Right._Myfirst());
   _Swap_adl(this->_Mylast(), _Right._Mylast());
   _Swap_adl(this->_Myend(), _Right._Myend());
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Myfirst(), _Right._Myfirst());
   _Swap_adl(this->_Mylast(), _Right._Mylast());
   _Swap_adl(this->_Myend(), _Right._Myend());
   }

  else
   {

   _Debug_message(L"vector containers incompatible for swap", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1570);




   }
  }

protected:
 bool _Buy(size_type _Capacity)
  {
  this->_Myfirst() = pointer();
  this->_Mylast() = pointer();
  this->_Myend() = pointer();

  if (_Capacity == 0)
   return (false);
  else if (max_size() < _Capacity)
   _Xlen();
  else
   {
   this->_Myfirst() = this->_Getal().allocate(_Capacity);
   this->_Mylast() = this->_Myfirst();
   this->_Myend() = this->_Myfirst() + _Capacity;
   }
  return (true);
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Destroy_range(_First, _Last, this->_Getal());
  }

 size_type _Grow_to(size_type _Count) const
  {
  size_type _Capacity = capacity();

  _Capacity = max_size() - _Capacity / 2 < _Capacity
   ? 0 : _Capacity + _Capacity / 2;
  if (_Capacity < _Count)
   _Capacity = _Count;
  return (_Capacity);
  }

 bool _Inside(const value_type *_Ptr) const
  {
  return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
  }

 void _Reallocate(size_type _Count)
  {
  pointer _Ptr = this->_Getal().allocate(_Count);

  try {
  _Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
  } catch (...) {
  this->_Getal().deallocate(_Ptr, _Count);
  throw;
  }

  size_type _Size = size();
  if (this->_Myfirst() != pointer())
   {
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   }

  this->_Orphan_all();
  this->_Myend() = _Ptr + _Count;
  this->_Mylast() = _Ptr + _Size;
  this->_Myfirst() = _Ptr;
  }

 void _Reserve(size_type _Count)
  {
  if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();
   _Reallocate(_Grow_to(size() + _Count));
   }
  }

 void _Tidy()
  {
  if (this->_Myfirst() != pointer())
   {
   this->_Orphan_all();
   _Destroy(this->_Myfirst(), this->_Mylast());
   this->_Getal().deallocate(this->_Myfirst(),
    this->_Myend() - this->_Myfirst());
   this->_Myfirst() = pointer();
   this->_Mylast() = pointer();
   this->_Myend() = pointer();
   }
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_copy(_First, _Last,
   _Ptr, this->_Getal()));
  }

 template<class _Iter>
  pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  return (_Uninitialized_move(_First, _Last,
   _Ptr, this->_Getal()));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || (_Where)._Ptr < this->_Myfirst()
   || this->_Mylast() < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1689);


  size_type _Off = (_Where)._Ptr - this->_Myfirst();
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   size_type _Whereoff = (_Where)._Ptr - this->_Myfirst();
   int _Ncopied = 0;

   try {
   _Ufill(_Newvec + _Whereoff, _Count,
    ::std:: addressof(_Val));
   ++_Ncopied;
   _Umove(this->_Myfirst(), (_Where)._Ptr,
    _Newvec);
   ++_Ncopied;
   _Umove((_Where)._Ptr, this->_Mylast(),
    _Newvec + (_Whereoff + _Count));
   } catch (...) {
   if (1 < _Ncopied)
    _Destroy(_Newvec, _Newvec + _Whereoff);
   if (0 < _Ncopied)
    _Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst() != pointer())
    {
    _Destroy(this->_Myfirst(), this->_Mylast());
    this->_Getal().deallocate(this->_Myfirst(),
     this->_Myend() - this->_Myfirst());
    }

   this->_Orphan_all();
   this->_Myend() = _Newvec + _Capacity;
   this->_Mylast() = _Newvec + _Count;
   this->_Myfirst() = _Newvec;
   }
  else if ((size_type)(this->_Mylast() - (_Where)._Ptr)
   < _Count)
   {
   value_type _Tmp = _Val;

   _Umove((_Where)._Ptr, this->_Mylast(),
    (_Where)._Ptr + _Count);

   try {
   _Ufill(this->_Mylast(),
    _Count - (this->_Mylast() - (_Where)._Ptr),
    ::std:: addressof(_Tmp));
   } catch (...) {
   _Destroy((_Where)._Ptr + _Count,
    this->_Mylast() + _Count);
   throw;
   }

   this->_Mylast() += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast());
   ::std:: fill((_Where)._Ptr, this->_Mylast() - _Count,
    _Tmp);
   }
  else
   {
   value_type _Tmp = _Val;

   pointer _Oldend = this->_Mylast();
   this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
    this->_Mylast());

   _Orphan_range((_Where)._Ptr, this->_Mylast());
   _Move_backward((_Where)._Ptr, _Oldend - _Count,
    _Oldend);
   ::std:: fill((_Where)._Ptr,
    (_Where)._Ptr + _Count, _Tmp);
   }
  return (begin() + _Off);
  }

 pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
  {
  _Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
  return (_Ptr + _Count);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("vector<T> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid vector<T> subscript");
  }


 void _Orphan_range(pointer _First, pointer _Last) const
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   {
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
   }
  }






 };



template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }




typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);


template<class _Alloc>
 class _Vb_iter_base
  : public _Iterator012<random_access_iterator_tag,
   bool,
   typename _Alloc::difference_type,
   bool *,
   bool,
   _Iterator_base>
 {
public:
 typedef typename _Alloc::size_type _Sizet;
 typedef vector<bool, _Alloc> _Mycont;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {

  _Sizet _Mysize = ((_Mycont *)this->_Getcont())->_Mysize;

  _Inc += _Myoff;
  _Inc += _VBITS * (_Myptr
   - (((_Mycont *)this->_Getcont())->_Myvec)._Myfirst());
  return (_Inc < _Mysize ? -1 : _Inc == _Mysize ? 0 : +1);





  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alloc>
 class _Vb_reference
  : public _Vb_iter_base<_Alloc>
 {
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_reference<_Alloc> _Mytype;

 _Vb_reference() noexcept
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Mytype& operator=(const _Mytype& _Right) noexcept
  {
  return (*this = bool(_Right));
  }

 _Mytype& operator=(bool _Val) noexcept
  {
  if (_Val)
   *(_Vbase *)_Getptr() |= _Mask();
  else
   *(_Vbase *)_Getptr() &= (~_Mask());
  return (*this);
  }

 void flip() noexcept
  {
  *(_Vbase *)_Getptr() ^= _Mask();
  }

 operator bool() const noexcept
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {

  if (this->_Getcont() == 0
   || this->_Myptr == 0
   || 0 <= this->_Valid(0))
   {
   _Debug_message(L"vector<bool> iterator not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1985);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1986, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 1986, 0); };
   }






  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return ((_Vbase)(1) << this->_Myoff);
  }
 };

template<class _Alloc> inline
 void swap(_Vb_reference<_Alloc> _Left,
  _Vb_reference<_Alloc> _Right)
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alloc>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alloc>
 {
public:
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_const_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef const_reference *pointer;
 typedef const_reference reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  _Inc();
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  _Dec();
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(
  const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (_VBITS * (this->_Myptr - _Right._Myptr)
   + (difference_type)this->_Myoff
   - (difference_type)_Right._Myoff);
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Mytype& _Right) const
  {
  if (this->_Getcont() != _Right._Getcont())
   _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Mytype& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Mytype& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Mytype& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Mytype& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Mytype& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   _Debug_message(L"vector<bool> iterators incompatible", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2161);
  }
# 2177 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid((size_type)-1))
    {
    _Debug_message(L"vector<bool> iterator not decrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2186);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2187, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2187, 0); };
    }






   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid(1))
    {
    _Debug_message(L"vector<bool> iterator not incrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2209);
    { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2210, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2210, 0); };
    }






   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alloc> inline
 _Vb_const_iterator<_Alloc> operator+(
  typename _Alloc::difference_type _Off,
  _Vb_const_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alloc>
 {
public:
 typedef _Vb_const_iterator<_Alloc> _Mybase;
 typedef _Vb_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef _Reft *pointer;
 typedef _Reft reference;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alloc> inline
 _Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
  _Vb_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 typedef vector<_Vbase, _Alloc> _Vectype;
 typedef typename _Vectype::_Alty _Alty;
 typedef typename _Alty::size_type size_type;

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, _Al),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() noexcept
  {
  _Free_proxy();
  }
# 2410 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector" 3
 void _Swap_alloc(_Vb_val& _Right)
  {
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec.get_allocator());
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec.get_allocator());
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 typename _Alty::size_type _Mysize;
 };



template<class _Alloc>
 class vector<bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 typedef vector<bool, _Alloc> _Myt;
 typedef _Vb_val<_Alloc> _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Vectype _Vectype;

 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference<_Alty> reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator<_Alty> const_iterator;
 typedef _Vb_iterator<_Alty> iterator;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};
 vector()
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector(size_type _Count, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, false, _Al)
  {
  _Trim(_Count);
  }

 vector(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const _Myt& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: forward<_Myt>(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->get_allocator() != _Right.get_allocator())
    {
    this->_Free_proxy();
    this->_Myvec = ::std:: move(_Right._Myvec);
    this->_Alloc_proxy();
    }
   else
    this->_Myvec = ::std:: move(_Right._Myvec);


   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;
   }
  return (*this);
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  push_back(_Tmp);
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  bool _Tmp(::std:: forward<_Valty>(_Val)...);
  return (insert(_Where, _Tmp));
  }


 vector(::std:: initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   ::std:: initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->_Mysize = _Right._Mysize;
  this->_Myvec = _Right._Myvec;
  return (*this);
  }

 void reserve(size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const noexcept
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() noexcept
  {
  return (iterator((_Vbase *)this->_Myvec._Myfirst(), this));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator((_Vbase *)this->_Myvec._Myfirst(), this));
  }

 iterator end() noexcept
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const noexcept
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec._Has_unused_capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 void resize(size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize);
  }

 size_type max_size() const noexcept
  {
  const size_type _Maxsize = this->_Myvec.max_size();
  return (_Maxsize < (size_type)(-1) / _VBITS
   ? _Maxsize * _VBITS : (size_type)(-1));
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 _Alloc get_allocator() const noexcept
  {
  return (this->_Myvec.get_allocator());
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
    input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, (void)++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2839);
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);

  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: copy(_First, _Last, begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();


  if (end() <= _Where)
   _Debug_message(L"vector<bool> erase iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2854);
  ::std:: copy(_Where + 1, end(), _Where);
  _Orphan_range(_Off, this->_Mysize);





  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {

   if (_Last < _First || end() < _Last)
    _Debug_message(L"vector<bool> erase iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2877);
   iterator _Next = ::std:: copy(_Last, end(), _First);
   size_type _Newsize = _Next - begin();
   _Orphan_range(_Newsize, this->_Mysize);
   _Trim(_Newsize);





   }
  return (begin() + _Off);
  }

 void clear() noexcept
  {
  erase(begin(), end());
  }

 void flip() noexcept
  {
  for (typename _Vectype::iterator _Next = this->_Myvec.begin();
   _Next != this->_Myvec.end(); ++_Next)
   *_Next = (_Vbase)~*_Next;
  _Trim(this->_Mysize);
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->get_allocator() == _Right.get_allocator())
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else
   {

   _Debug_message(L"vector<bool> containers incompatible for swap", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2925);




   }
  }

 static void swap(reference _Left, reference _Right) noexcept
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }

 size_t hash() const
  {
  return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
   this->_Myvec.size() * sizeof (_Vbase)));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();


  if (end() < _Where)
   _Debug_message(L"vector<bool> insert iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\vector", 2961);
  bool _Realloc = capacity() - size() < _Count;


  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }


   _Orphan_range(_Realloc ? 0 : _Off, this->_Mysize);

   }
  return (_Off);
  }


 void _Orphan_range(size_type _Offlo, size_type _Offhi) const
  {
  typedef _Vb_iter_base<_Alty> _Myiterbase;

  _Lockit _Lock(3);
  _Vbase *_Base = (_Vbase *)this->_Myvec._Myfirst();

  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    {
    size_type _Off = _VBITS * ((*_Pnext)->_Myptr - _Base)
     + (*_Pnext)->_Myoff;
    if (_Off < _Offlo || _Offhi < _Off)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
    }
  }







 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= ((_Vbase)(1) << _Size) - 1;
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<bool, _Alloc> >
 {
 typedef vector<bool, _Alloc> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (_Keyval.hash());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp" 2


namespace sf
{




class __declspec(dllimport) VideoMode
{
public:







    VideoMode();
# 61 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
    VideoMode(unsigned int modeWidth, unsigned int modeHeight, unsigned int modeBitsPerPixel = 32);







    static VideoMode getDesktopMode();
# 85 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
    static const std::vector<VideoMode>& getFullscreenModes();
# 97 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
    bool isValid() const;




    unsigned int width;
    unsigned int height;
    unsigned int bitsPerPixel;
};
# 117 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
__declspec(dllimport) bool operator ==(const VideoMode& left, const VideoMode& right);
# 129 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
__declspec(dllimport) bool operator !=(const VideoMode& left, const VideoMode& right);
# 141 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
__declspec(dllimport) bool operator <(const VideoMode& left, const VideoMode& right);
# 153 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
__declspec(dllimport) bool operator >(const VideoMode& left, const VideoMode& right);
# 165 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
__declspec(dllimport) bool operator <=(const VideoMode& left, const VideoMode& right);
# 177 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/VideoMode.hpp"
__declspec(dllimport) bool operator >=(const VideoMode& left, const VideoMode& right);

}
# 42 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/WindowHandle.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/WindowHandle.hpp"
    struct HWND__;


namespace sf
{







    typedef HWND__* WindowHandle;
# 71 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/WindowHandle.hpp"
}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/WindowStyle.hpp" 1
# 29 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/WindowStyle.hpp"
namespace sf
{
namespace Style
{





    enum
    {
        None = 0,
        Titlebar = 1 << 0,
        Resize = 1 << 1,
        Close = 1 << 2,
        Fullscreen = 1 << 3,

        Default = Titlebar | Resize | Close
    };
}

}
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp" 2







namespace sf
{
namespace priv
{
    class GlContext;
    class WindowImpl;
}

class Event;





class __declspec(dllimport) Window : GlResource, NonCopyable
{
public:
# 68 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    Window();
# 89 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    Window(VideoMode mode, const String& title, Uint32 style = Style::Default, const ContextSettings& settings = ContextSettings());
# 106 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    explicit Window(WindowHandle handle, const ContextSettings& settings = ContextSettings());







    virtual ~Window();
# 133 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void create(VideoMode mode, const String& title, Uint32 style = Style::Default, const ContextSettings& settings = ContextSettings());
# 151 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void create(WindowHandle handle, const ContextSettings& settings = ContextSettings());
# 163 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void close();
# 175 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    bool isOpen() const;
# 188 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    const ContextSettings& getSettings() const;
# 213 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    bool pollEvent(Event& event);
# 240 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    bool waitEvent(Event& event);
# 250 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    Vector2i getPosition() const;
# 264 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setPosition(const Vector2i& position);
# 277 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    Vector2u getSize() const;
# 287 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setSize(const Vector2u& size);
# 297 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setTitle(const String& title);
# 316 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setIcon(unsigned int width, unsigned int height, const Uint8* pixels);
# 326 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setVisible(bool visible);
# 341 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setVerticalSyncEnabled(bool enabled);
# 351 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setMouseCursorVisible(bool visible);
# 365 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setKeyRepeatEnabled(bool enabled);
# 382 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setFramerateLimit(unsigned int limit);
# 395 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void setJoystickThreshold(float threshold);
# 413 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    bool setActive(bool active = true) const;
# 429 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void requestFocus();
# 442 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    bool hasFocus() const;
# 452 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    void display();
# 468 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    WindowHandle getSystemHandle() const;

protected:
# 480 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    virtual void onCreate();
# 489 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    virtual void onResize();

private:
# 505 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window/Window.hpp"
    bool filterEvent(const Event& event);





    void initialize();




    priv::WindowImpl* m_impl;
    priv::GlContext* m_context;
    Clock m_clock;
    Time m_frameTimeLimit;
    Vector2u m_size;
};

}
# 43 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Window.hpp" 2
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp" 1
# 31 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Export.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp" 2


namespace sf
{





struct __declspec(dllimport) BlendMode
{






    enum Factor
    {
        Zero,
        One,
        SrcColor,
        OneMinusSrcColor,
        DstColor,
        OneMinusDstColor,
        SrcAlpha,
        OneMinusSrcAlpha,
        DstAlpha,
        OneMinusDstAlpha
    };







    enum Equation
    {
        Add,
        Subtract
    };







    BlendMode();
# 94 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp"
    BlendMode(Factor sourceFactor, Factor destinationFactor, Equation blendEquation = Add);
# 107 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp"
    BlendMode(Factor colorSourceFactor, Factor colorDestinationFactor,
              Equation colorBlendEquation, Factor alphaSourceFactor,
              Factor alphaDestinationFactor, Equation alphaBlendEquation);




    Factor colorSrcFactor;
    Factor colorDstFactor;
    Equation colorEquation;
    Factor alphaSrcFactor;
    Factor alphaDstFactor;
    Equation alphaEquation;
};
# 132 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp"
__declspec(dllimport) bool operator ==(const BlendMode& left, const BlendMode& right);
# 144 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/BlendMode.hpp"
__declspec(dllimport) bool operator !=(const BlendMode& left, const BlendMode& right);




__declspec(dllimport) extern const BlendMode BlendAlpha;
__declspec(dllimport) extern const BlendMode BlendAdd;
__declspec(dllimport) extern const BlendMode BlendMultiply;
__declspec(dllimport) extern const BlendMode BlendNone;

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Drawable.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Drawable.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderStates.hpp" 1
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderStates.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
namespace sf
{




template <typename T>
class Rect
{
public:
# 53 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    Rect();
# 67 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight);
# 79 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    Rect(const Vector2<T>& position, const Vector2<T>& size);
# 92 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    template <typename U>
    explicit Rect(const Rect<U>& rectangle);
# 106 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    bool contains(T x, T y) const;
# 118 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    bool contains(const Vector2<T>& point) const;
# 130 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    bool intersects(const Rect<T>& rectangle) const;
# 146 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
    bool intersects(const Rect<T>& rectangle, Rect<T>& intersection) const;




    T left;
    T top;
    T width;
    T height;
};
# 169 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
template <typename T>
bool operator ==(const Rect<T>& left, const Rect<T>& right);
# 184 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp"
template <typename T>
bool operator !=(const Rect<T>& left, const Rect<T>& right);


# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.inl" 1
# 27 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.inl"
template <typename T>
Rect<T>::Rect() :
left (0),
top (0),
width (0),
height(0)
{

}



template <typename T>
Rect<T>::Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight) :
left (rectLeft),
top (rectTop),
width (rectWidth),
height(rectHeight)
{

}



template <typename T>
Rect<T>::Rect(const Vector2<T>& position, const Vector2<T>& size) :
left (position.x),
top (position.y),
width (size.x),
height(size.y)
{

}



template <typename T>
template <typename U>
Rect<T>::Rect(const Rect<U>& rectangle) :
left (static_cast<T>(rectangle.left)),
top (static_cast<T>(rectangle.top)),
width (static_cast<T>(rectangle.width)),
height(static_cast<T>(rectangle.height))
{
}



template <typename T>
bool Rect<T>::contains(T x, T y) const
{



    T minX = std::min(left, static_cast<T>(left + width));
    T maxX = std::max(left, static_cast<T>(left + width));
    T minY = std::min(top, static_cast<T>(top + height));
    T maxY = std::max(top, static_cast<T>(top + height));

    return (x >= minX) && (x < maxX) && (y >= minY) && (y < maxY);
}



template <typename T>
bool Rect<T>::contains(const Vector2<T>& point) const
{
    return contains(point.x, point.y);
}



template <typename T>
bool Rect<T>::intersects(const Rect<T>& rectangle) const
{
    Rect<T> intersection;
    return intersects(rectangle, intersection);
}



template <typename T>
bool Rect<T>::intersects(const Rect<T>& rectangle, Rect<T>& intersection) const
{



    T r1MinX = std::min(left, static_cast<T>(left + width));
    T r1MaxX = std::max(left, static_cast<T>(left + width));
    T r1MinY = std::min(top, static_cast<T>(top + height));
    T r1MaxY = std::max(top, static_cast<T>(top + height));


    T r2MinX = std::min(rectangle.left, static_cast<T>(rectangle.left + rectangle.width));
    T r2MaxX = std::max(rectangle.left, static_cast<T>(rectangle.left + rectangle.width));
    T r2MinY = std::min(rectangle.top, static_cast<T>(rectangle.top + rectangle.height));
    T r2MaxY = std::max(rectangle.top, static_cast<T>(rectangle.top + rectangle.height));


    T interLeft = std::max(r1MinX, r2MinX);
    T interTop = std::max(r1MinY, r2MinY);
    T interRight = std::min(r1MaxX, r2MaxX);
    T interBottom = std::min(r1MaxY, r2MaxY);


    if ((interLeft < interRight) && (interTop < interBottom))
    {
        intersection = Rect<T>(interLeft, interTop, interRight - interLeft, interBottom - interTop);
        return true;
    }
    else
    {
        intersection = Rect<T>(0, 0, 0, 0);
        return false;
    }
}



template <typename T>
inline bool operator ==(const Rect<T>& left, const Rect<T>& right)
{
    return (left.left == right.left) && (left.width == right.width) &&
           (left.top == right.top) && (left.height == right.height);
}



template <typename T>
inline bool operator !=(const Rect<T>& left, const Rect<T>& right)
{
    return !(left == right);
}
# 188 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Rect.hpp" 2


typedef Rect<int> IntRect;
typedef Rect<float> FloatRect;

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp" 2



namespace sf
{




class __declspec(dllimport) Transform
{
public:







    Transform();
# 68 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform(float a00, float a01, float a02,
              float a10, float a11, float a12,
              float a20, float a21, float a22);
# 87 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    const float* getMatrix() const;
# 98 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform getInverse() const;
# 109 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Vector2f transformPoint(float x, float y) const;
# 119 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Vector2f transformPoint(const Vector2f& point) const;
# 135 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    FloatRect transformRect(const FloatRect& rectangle) const;
# 149 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& combine(const Transform& transform);
# 169 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& translate(float x, float y);
# 188 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& translate(const Vector2f& offset);
# 207 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& rotate(float angle);
# 233 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& rotate(float angle, float centerX, float centerY);
# 258 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& rotate(float angle, const Vector2f& center);
# 278 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& scale(float scaleX, float scaleY);
# 305 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& scale(float scaleX, float scaleY, float centerX, float centerY);
# 324 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& scale(const Vector2f& factors);
# 349 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
    Transform& scale(const Vector2f& factors, const Vector2f& center);




    static const Transform Identity;

private:




    float m_matrix[16];
};
# 376 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
__declspec(dllimport) Transform operator *(const Transform& left, const Transform& right);
# 390 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
__declspec(dllimport) Transform& operator *=(Transform& left, const Transform& right);
# 404 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transform.hpp"
__declspec(dllimport) Vector2f operator *(const Transform& left, const Vector2f& right);

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderStates.hpp" 2


namespace sf
{
class Shader;
class Texture;





class __declspec(dllimport) RenderStates
{
public:
# 61 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderStates.hpp"
    RenderStates();







    RenderStates(const BlendMode& theBlendMode);







    RenderStates(const Transform& theTransform);







    RenderStates(const Texture* theTexture);







    RenderStates(const Shader* theShader);
# 104 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderStates.hpp"
    RenderStates(const BlendMode& theBlendMode, const Transform& theTransform,
                 const Texture* theTexture, const Shader* theShader);




    static const RenderStates Default;




    BlendMode blendMode;
    Transform transform;
    const Texture* texture;
    const Shader* shader;
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Drawable.hpp" 2


namespace sf
{
class RenderTarget;






class __declspec(dllimport) Drawable
{
public:





    virtual ~Drawable() {}

protected:

    friend class RenderTarget;
# 69 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Drawable.hpp"
    virtual void draw(RenderTarget& target, RenderStates states) const = 0;
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
namespace sf
{




class __declspec(dllimport) Transformable
{
public:





    Transformable();





    virtual ~Transformable();
# 70 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setPosition(float x, float y);
# 84 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setPosition(const Vector2f& position);
# 98 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setRotation(float angle);
# 113 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setScale(float factorX, float factorY);
# 127 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setScale(const Vector2f& factors);
# 145 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setOrigin(float x, float y);
# 162 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void setOrigin(const Vector2f& origin);
# 172 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    const Vector2f& getPosition() const;
# 184 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    float getRotation() const;
# 194 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    const Vector2f& getScale() const;
# 204 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    const Vector2f& getOrigin() const;
# 223 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void move(float offsetX, float offsetY);
# 240 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void move(const Vector2f& offset);
# 255 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void rotate(float angle);
# 274 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void scale(float factorX, float factorY);
# 292 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    void scale(const Vector2f& factor);
# 302 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    const Transform& getTransform() const;
# 312 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Transformable.hpp"
    const Transform& getInverseTransform() const;

private:




    Vector2f m_origin;
    Vector2f m_position;
    float m_rotation;
    Vector2f m_scale;
    mutable Transform m_transform;
    mutable bool m_transformNeedUpdate;
    mutable Transform m_inverseTransform;
    mutable bool m_inverseTransformNeedUpdate;
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
namespace sf
{




class __declspec(dllimport) Color
{
public:
# 51 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
    Color();
# 62 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
    Color(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha = 255);







    explicit Color(Uint32 color);







    Uint32 toInteger() const;




    static const Color Black;
    static const Color White;
    static const Color Red;
    static const Color Green;
    static const Color Blue;
    static const Color Yellow;
    static const Color Magenta;
    static const Color Cyan;
    static const Color Transparent;




    Uint8 r;
    Uint8 g;
    Uint8 b;
    Uint8 a;
};
# 114 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) bool operator ==(const Color& left, const Color& right);
# 128 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) bool operator !=(const Color& left, const Color& right);
# 143 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) Color operator +(const Color& left, const Color& right);
# 158 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) Color operator -(const Color& left, const Color& right);
# 175 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) Color operator *(const Color& left, const Color& right);
# 191 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) Color& operator +=(Color& left, const Color& right);
# 207 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) Color& operator -=(Color& left, const Color& right);
# 225 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Color.hpp"
__declspec(dllimport) Color& operator *=(Color& left, const Color& right);

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp" 2



namespace sf
{




class __declspec(dllimport) Vertex
{
public:





    Vertex();
# 60 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp"
    Vertex(const Vector2f& thePosition);
# 71 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp"
    Vertex(const Vector2f& thePosition, const Color& theColor);
# 82 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp"
    Vertex(const Vector2f& thePosition, const Vector2f& theTexCoords);
# 92 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Vertex.hpp"
    Vertex(const Vector2f& thePosition, const Color& theColor, const Vector2f& theTexCoords);




    Vector2f position;
    Color color;
    Vector2f texCoords;
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/PrimitiveType.hpp" 1
# 28 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/PrimitiveType.hpp"
namespace sf
{
# 39 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/PrimitiveType.hpp"
enum PrimitiveType
{
    Points,
    Lines,
    LinesStrip,
    Triangles,
    TrianglesStrip,
    TrianglesFan,
    Quads
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp" 2





namespace sf
{




class __declspec(dllimport) VertexArray : public Drawable
{
public:







    VertexArray();
# 64 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    explicit VertexArray(PrimitiveType type, std::size_t vertexCount = 0);







    std::size_t getVertexCount() const;
# 88 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    Vertex& operator [](std::size_t index);
# 104 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    const Vertex& operator [](std::size_t index) const;
# 115 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    void clear();
# 129 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    void resize(std::size_t vertexCount);







    void append(const Vertex& vertex);
# 153 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    void setPrimitiveType(PrimitiveType type);







    PrimitiveType getPrimitiveType() const;
# 172 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    FloatRect getBounds() const;

private:
# 183 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/VertexArray.hpp"
    virtual void draw(RenderTarget& target, RenderStates states) const;

private:




    std::vector<Vertex> m_vertices;
    PrimitiveType m_primitiveType;
};

}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp" 2



namespace sf
{




class __declspec(dllimport) Shape : public Drawable, public Transformable
{
public:





    virtual ~Shape();
# 74 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    void setTexture(const Texture* texture, bool resetRect = false);
# 88 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    void setTextureRect(const IntRect& rect);
# 105 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    void setFillColor(const Color& color);
# 117 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    void setOutlineColor(const Color& color);
# 132 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    void setOutlineThickness(float thickness);
# 146 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    const Texture* getTexture() const;
# 156 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    const IntRect& getTextureRect() const;
# 166 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    const Color& getFillColor() const;
# 176 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    const Color& getOutlineColor() const;
# 186 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    float getOutlineThickness() const;
# 196 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    virtual std::size_t getPointCount() const = 0;
# 213 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    virtual Vector2f getPoint(std::size_t index) const = 0;
# 227 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    FloatRect getLocalBounds() const;
# 248 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    FloatRect getGlobalBounds() const;

protected:





    Shape();
# 266 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    void update();

private:
# 277 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shape.hpp"
    virtual void draw(RenderTarget& target, RenderStates states) const;





    void updateFillColors();





    void updateTexCoords();





    void updateOutline();





    void updateOutlineColors();

private:




    const Texture* m_texture;
    IntRect m_textureRect;
    Color m_fillColor;
    Color m_outlineColor;
    float m_outlineThickness;
    VertexArray m_vertices;
    VertexArray m_outlineVertices;
    FloatRect m_insideBounds;
    FloatRect m_bounds;
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp" 2


namespace sf
{




class __declspec(dllimport) CircleShape : public Shape
{
public:
# 52 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
    explicit CircleShape(float radius = 0, std::size_t pointCount = 30);
# 62 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
    void setRadius(float radius);
# 72 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
    float getRadius() const;
# 82 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
    void setPointCount(std::size_t count);
# 92 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
    virtual std::size_t getPointCount() const;
# 107 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/CircleShape.hpp"
    virtual Vector2f getPoint(std::size_t index) const;

private:




    float m_radius;
    std::size_t m_pointCount;
};

}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/ConvexShape.hpp" 1
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/ConvexShape.hpp"
namespace sf
{




class __declspec(dllimport) ConvexShape : public Shape
{
public:







    explicit ConvexShape(std::size_t pointCount = 0);
# 64 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/ConvexShape.hpp"
    void setPointCount(std::size_t count);
# 74 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/ConvexShape.hpp"
    virtual std::size_t getPointCount() const;
# 91 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/ConvexShape.hpp"
    void setPoint(std::size_t index, const Vector2f& point);
# 108 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/ConvexShape.hpp"
    virtual Vector2f getPoint(std::size_t index) const;

private:




    std::vector<Vector2f> m_points;
};

}
# 37 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Glyph.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Glyph.hpp"
namespace sf
{




class __declspec(dllimport) Glyph
{
public:





    Glyph() : advance(0) {}




    float advance;
    FloatRect bounds;
    IntRect textureRect;
};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp" 1
# 32 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp" 1
# 38 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
namespace sf
{
class InputStream;





class __declspec(dllimport) Image
{
public:







    Image();





    ~Image();
# 72 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    void create(unsigned int width, unsigned int height, const Color& color = Color(0, 0, 0));
# 87 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    void create(unsigned int width, unsigned int height, const Uint8* pixels);
# 104 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    bool loadFromFile(const std::string& filename);
# 122 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    bool loadFromMemory(const void* data, std::size_t size);
# 139 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    bool loadFromStream(InputStream& stream);
# 156 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    bool saveToFile(const std::string& filename) const;







    Vector2u getSize() const;
# 177 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    void createMaskFromColor(const Color& color, Uint8 alpha = 0);
# 199 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    void copy(const Image& source, unsigned int destX, unsigned int destY, const IntRect& sourceRect = IntRect(0, 0, 0, 0), bool applyAlpha = false);
# 215 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    void setPixel(unsigned int x, unsigned int y, const Color& color);
# 232 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    Color getPixel(unsigned int x, unsigned int y) const;
# 247 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Image.hpp"
    const Uint8* getPixelsPtr() const;





    void flipHorizontally();





    void flipVertically();

private:




    Vector2u m_size;
    std::vector<Uint8> m_pixels;



};

}
# 33 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp" 2



namespace sf
{
class Window;
class RenderTarget;
class RenderTexture;
class InputStream;





class __declspec(dllimport) Texture : GlResource
{
public:





    enum CoordinateType
    {
        Normalized,
        Pixels
    };

public:







    Texture();







    Texture(const Texture& copy);





    ~Texture();
# 96 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool create(unsigned int width, unsigned int height);
# 127 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool loadFromFile(const std::string& filename, const IntRect& area = IntRect());
# 159 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool loadFromMemory(const void* data, std::size_t size, const IntRect& area = IntRect());
# 190 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool loadFromStream(InputStream& stream, const IntRect& area = IntRect());
# 214 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool loadFromImage(const Image& image, const IntRect& area = IntRect());







    Vector2u getSize() const;
# 237 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    Image copyToImage() const;
# 255 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void update(const Uint8* pixels);
# 277 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void update(const Uint8* pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y);
# 297 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void update(const Image& image);
# 314 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void update(const Image& image, unsigned int x, unsigned int y);
# 334 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void update(const Window& window);
# 351 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void update(const Window& window, unsigned int x, unsigned int y);
# 367 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void setSmooth(bool smooth);
# 377 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool isSmooth() const;
# 401 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    void setRepeated(bool repeated);
# 411 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    bool isRepeated() const;
# 421 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    Texture& operator =(const Texture& right);
# 433 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    unsigned int getNativeHandle() const;
# 466 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    static void bind(const Texture* texture, CoordinateType coordinateType = Normalized);
# 481 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    static unsigned int getMaximumSize();

private:

    friend class RenderTexture;
    friend class RenderTarget;
# 501 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Texture.hpp"
    static unsigned int getValidSize(unsigned int size);




    Vector2u m_size;
    Vector2u m_actualSize;
    unsigned int m_texture;
    bool m_isSmooth;
    bool m_isRepeated;
    mutable bool m_pixelsFlipped;
    bool m_fboAttachment;
    Uint64 m_cacheId;
};

}
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp" 2



# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\map" 1 3






# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tuple" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\tuple" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4296 4521 4522)

namespace std {

template<class _Src,
 class _Dest>
 struct _Tuple_enable
 {
 };

template<>
 struct _Tuple_enable<tuple<>, tuple<> >
 {
 typedef void ** type;
 };

template<class _Src0,
 class... _Types1,
 class _Dest0,
 class... _Types2>
 struct _Tuple_enable<tuple<_Src0, _Types1...>,
  tuple<_Dest0, _Types2...> >
 : _If<is_convertible<_Src0, _Dest0>::value,
  _Tuple_enable<tuple<_Types1...>, tuple<_Types2...> >,
  _Tuple_enable<int, int>
 >::type
 {
 };



struct _Ignore
 {
 template<class _Ty>
  void operator=(const _Ty&) const
  {
  }
 };

constexpr _Ignore ignore{};


struct _Tuple_alloc_t
 {
 };

constexpr _Tuple_alloc_t _Tuple_alloc{};


template<class _Ty>
 struct _Tuple_val
 {
 constexpr _Tuple_val()
  : _Val()
  {
  }

 template<class _Other>
  constexpr _Tuple_val(_Other&& _Arg)
  : _Val(::std:: forward<_Other>(_Arg))
  {
  }

 template<class _Other>
  _Tuple_val& operator=(_Other&& _Right)
  {
  _Val = ::std:: forward<_Other>(_Right);
  return (*this);
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc&,
   typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && !is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)..., _Al)
  {
  }


 _Ty _Val;
 };


template<class... _Types>
 class tuple;

template<>
 class tuple<>
 {
public:
 typedef tuple<> _Myt;

 constexpr tuple() noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 constexpr tuple(const tuple&) noexcept
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&, const _Myt&) noexcept
  {
  }

 void swap(_Myt&) noexcept
  {
  }

 constexpr bool _Equals(const _Myt&) const noexcept
  {
  return (true);
  }

 constexpr bool _Less(const _Myt&) const noexcept
  {
  return (false);
  }
 };

struct _One_arg_t
 {
 };

template<class _This,
 class... _Rest>
 class tuple<_This, _Rest...>
  : private tuple<_Rest...>
 {
public:
 typedef _This _This_type;
 typedef tuple<_This, _Rest...> _Myt;
 typedef tuple<_Rest...> _Mybase;
 static const size_t _Mysize = 1 + sizeof...(_Rest);

 constexpr tuple()
  : _Mybase(),
   _Myfirst()
  {
  }

 template<class... _Rest2>
  explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
   : _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
    _Myfirst(allocator_arg)
  {
  }

 template<class... _Other,
  class = typename _Tuple_enable<
   tuple<const _Other&...>, _Myt>::type>
  constexpr tuple(const tuple<_Other...>& _Right)
  : _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Alloc,
  class... _Other,
  class = typename _Tuple_enable<
   tuple<const _Other&...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : _Mybase(allocator_arg, _Al, _Right._Get_rest()),
   _Myfirst(_Al, _Tuple_alloc,
    _Right._Myfirst._Val)
  {
  }

 constexpr explicit tuple(const _This& _This_arg,
  const _Rest&... _Rest_arg)
  : _Mybase(_Rest_arg...),
   _Myfirst(_This_arg)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : _Mybase(allocator_arg, _Al, _Rest_arg...),
   _Myfirst(_Al, _Tuple_alloc, _This_arg)
  {
  }

 template<class _This2,
  class... _Rest2,
  class = typename _Tuple_enable<
   tuple<_This2, _Rest2...>, _Myt>::type>
  constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  class = typename _Tuple_enable<
   tuple<_This2, _Rest2...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_This2>(_This_arg))
  {
  }

 template<class... _Other,
  class = typename _Tuple_enable<
   tuple<_Other...>, _Myt>::type>
  constexpr tuple(tuple<_Other...>&& _Right)
  : _Mybase((typename tuple<_Other...>::_Mybase&&)_Right),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>
    (_Right._Myfirst._Val))
  {
  }

 template<class _Alloc,
  class... _Other,
  class = typename _Tuple_enable<
   tuple<_Other...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<typename tuple<_Other...>::_Mybase>
     (_Right._Get_rest())),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<typename tuple<_Other...>::_This_type>
     (_Right._Myfirst._Val))
  {
  }

 template<class... _Other>
  _Myt& operator=(const tuple<_Other...>& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class... _Other>
  _Myt& operator=(tuple<_Other...>&& _Right)
  {
  _Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
   (_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest());
  return (*this);
  }

 template<class... _Other>
  constexpr bool _Equals(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val == _Right._Myfirst._Val
   && _Mybase::_Equals(_Right._Get_rest()));
  }

 template<class... _Other>
  constexpr bool _Less(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val < _Right._Myfirst._Val
   || (!(_Right._Myfirst._Val < _Myfirst._Val)
    && _Mybase::_Less(_Right._Get_rest())));
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al)
  : _Mybase(allocator_arg, _Al),
   _Myfirst(_Al, _Tuple_alloc)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _Myt& _Right)
  : _Mybase(allocator_arg, _Al, _Right._Get_rest()),
   _Myfirst(_Al, _Tuple_alloc,
    _Right._Myfirst._Val)
  {
  }

 tuple(const _Myt&) = default;
 tuple(_Myt&&) = default;

 template<class _Tag,
  class _This2,
  class = typename enable_if<is_same<_Tag, _One_arg_t>::value>::type>
  constexpr tuple(_Tag, _This2&& _This_arg)
  : _Mybase(),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<const _First&, const _Second&>, _Myt>::type>
  constexpr tuple(const pair<_First, _Second>& _Right)

  : _Mybase(_One_arg_t(), _Right.second),
   _Myfirst(_Right.first)
  {

  }

 template<class _Alloc,
  class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<const _First&, const _Second&>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)

  : _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
   _Myfirst(_Al, _Tuple_alloc,
    _Right.first)
  {

  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  _Get_rest() = _Right._Get_rest();
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(const pair<_First, _Second>& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = _Right.first;
  _Get_rest()._Myfirst._Val = _Right.second;
  return (*this);
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _Myt&& _Right)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<_Mybase>(_Right._Get_rest())),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_This>(_Right._Myfirst._Val))
  {
  }

 template<class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<_First, _Second>, _Myt>::type>
  constexpr tuple(pair<_First, _Second>&& _Right)

  : _Mybase(_One_arg_t(), ::std:: forward<_Second>(_Right.second)),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {

  }

 template<class _Alloc,
  class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<_First, _Second>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)

  : _Mybase(allocator_arg, _Al,
    tuple<_Second>(::std:: forward<_Second>(_Right.second))),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_First>(_Right.first))
  {

  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(is_nothrow_move_assignable<_This>::value && is_nothrow_move_assignable<_Mybase>::value)

  {
  _Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
  _Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(pair<_First, _Second>&& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = ::std:: forward<_First>(_Right.first);
  _Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
  return (*this);
  }

 _Mybase& _Get_rest() noexcept
  {
  return (*this);
  }

 constexpr const _Mybase& _Get_rest() const noexcept
  {
  return (*this);
  }

 void swap(tuple& _Right)
  noexcept(noexcept(_Swap_adl(this->_Myfirst._Val, _Right._Myfirst._Val)) && noexcept(_Swap_adl(_Right._Get_rest(), _Right._Get_rest())))


  {
  _Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
  _Mybase::swap(_Right._Get_rest());
  }

 _Tuple_val<_This> _Myfirst;
 };




template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator==(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator!=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator<(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator>=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator>(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Right < _Left);
 }

template<class... _Types1,
 class... _Types2> inline
 constexpr bool operator<=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class... _Types> inline
 void swap(tuple<_Types...>& _Left,
  tuple<_Types...>& _Right)
   noexcept(noexcept(_Left.swap(_Right)))
 {
 return (_Left.swap(_Right));
 }



template<class _Ty,
 class _Tuple>
 struct _Tuple_element;

template<class _This,
 class... _Rest>
 struct _Tuple_element<_This, tuple<_This, _Rest...> >
 {
 typedef int _Check_type;
 static_assert(is_void<typename _Tuple_element<_This,
  tuple<_Rest...> >::_Check_type>::value,
  "duplicate type T in get<T>(tuple)");

 typedef _This type;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<class _Ty,
 class _This,
 class... _Rest>
 struct _Tuple_element<_Ty, tuple<_This, _Rest...> >
  : public _Tuple_element<_Ty, tuple<_Rest...> >
 {
 };

template<class _Ty>
 struct _Tuple_element<_Ty, tuple<> >
 {
 typedef void _Check_type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, const _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, volatile _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<class _Ty,
 class _Tuple>
 struct _Tuple_element<_Ty, const volatile _Tuple>
  : public _Tuple_element<_Ty, _Tuple>
 {
 typedef _Tuple_element<_Ty, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };


template<size_t _Index,
 class... _Types> inline
 constexpr typename tuple_element<_Index, tuple<_Types...> >::type&
  get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 constexpr const typename tuple_element<_Index, tuple<_Types...> >::type&
  get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 constexpr typename tuple_element<_Index, tuple<_Types...> >::type&&
  get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 typedef typename tuple_element<_Index, tuple<_Types...> >::type&&
  _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class _Ty,
 class... _Types> inline
 constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types> inline
 constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<class _Ty,
 class... _Types> inline
 constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
 {
 typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
 return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class... _Types> inline
 constexpr tuple<typename _Unrefwrap<_Types>::type...>
  make_tuple(_Types&&... _Args)
 {
 typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
 return (_Ttype(::std:: forward<_Types>(_Args)...));
 }


template<class... _Types> inline
 constexpr tuple<_Types&...>
  tie(_Types&... _Args) noexcept
 {
 typedef tuple<_Types&...> _Ttype;
 return (_Ttype(_Args...));
 }




template<class... _Types> inline
 constexpr tuple<_Types&&...>
  forward_as_tuple(_Types&&... _Args) noexcept
 {
 return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
 }



template<class _Seq_type1,
 class _Seq_type2>
 struct _Cat_sequences;

template<size_t... _Indexes1,
 size_t... _Indexes2>
 struct _Cat_sequences<integer_sequence<size_t, _Indexes1...>,
  integer_sequence<size_t, _Indexes2...> >
 {
 typedef integer_sequence<size_t, _Indexes1..., _Indexes2...> type;
 };


template<class _Ty,
 size_t _Size>
 class array;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
 class _Ty,
 size_t _Size>
 constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;


template<class _Ty,
 class... _For_array>
 struct _View_as_tuple
 {
 static_assert(_Always_false<_Ty>::value,
  "Unsupported tuple_cat arguments.");
 };

template<class... _Types>
 struct _View_as_tuple<tuple<_Types...> >
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty1,
 class _Ty2>
 struct _View_as_tuple<pair<_Ty1, _Ty2> >
 {
 typedef tuple<_Ty1, _Ty2> type;
 };

template<class _Ty,
 class... _Types>
 struct _View_as_tuple<array<_Ty, 0>, _Types...>
 {
 typedef tuple<_Types...> type;
 };

template<class _Ty,
 size_t _Size,
 class... _Types>
 struct _View_as_tuple<array<_Ty, _Size>, _Types...>
  : _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
 {
 };


template<size_t _Nx,
 class _Ty>
 struct _Repeat_for
  : integral_constant<size_t, _Nx>
 {
 };


template<class _Ret,
 class _Kx_arg,
 class _Ix_arg,
 size_t _Ix_next,
 class... _Tuples>
 struct _Tuple_cat2
 {
 static_assert(sizeof...(_Tuples) == 0,
  "Unsupported tuple_cat arguments.");
 typedef _Ret type;
 typedef _Kx_arg _Kx_arg_seq;
 typedef _Ix_arg _Ix_arg_seq;
 };

template<class... _Types1,
 class _Kx_arg,
 size_t... _Ix,
 size_t _Ix_next,
 class... _Types2,
 class... _Rest>
 struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
  integer_sequence<size_t, _Ix...>, _Ix_next,
  tuple<_Types2...>, _Rest...>
  : _Tuple_cat2<
   tuple<_Types1..., _Types2...>,
   typename _Cat_sequences<_Kx_arg,

    make_integer_sequence<size_t, sizeof...(_Types2)> >::type,

   integer_sequence<size_t, _Ix...,
    _Repeat_for<_Ix_next, _Types2>::value...>,
   _Ix_next + 1,
   _Rest...>
 {
 };

template<class... _Tuples>
 struct _Tuple_cat1
  : _Tuple_cat2<tuple<>, integer_sequence<size_t>,
    integer_sequence<size_t>, 0,
   typename _View_as_tuple<typename decay<_Tuples>::type>::type...>
 {
 };

template<class _Ret,
 size_t... _Kx,
 size_t... _Ix,
 class _Ty> inline
 constexpr _Ret _Tuple_cat(integer_sequence<size_t, _Kx...>,
  integer_sequence<size_t, _Ix...>, _Ty&& _Arg)
 {
 return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
 }

template<class... _Tuples> inline
 constexpr typename _Tuple_cat1<_Tuples...>::type
  tuple_cat(_Tuples&&... _Tpls)
 {
 typedef _Tuple_cat1<_Tuples...> _Cat1;
 return (_Tuple_cat<typename _Cat1::type>(
  typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
  ::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
 }




template<class _Ty1,
 class _Ty2>
 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   integer_sequence<size_t, _Indexes1...>,
   integer_sequence<size_t, _Indexes2...>)
  : first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
   second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
  {
  }


template<class _Ty1,
 class _Ty2>
 template<class... _Types1,
  class... _Types2> inline
  pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)
  : pair(_Val1, _Val2,
   make_integer_sequence<size_t, sizeof...(_Types1)>(),
   make_integer_sequence<size_t, sizeof...(_Types2)>())
  {
  }

}

namespace std {

template<class... _Types,
 class _Alloc>
 struct uses_allocator<tuple<_Types...>, _Alloc>
  : true_type
 {
 };

}

namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
}
}


#pragma warning(pop)
#pragma pack(pop)
# 7 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\map" 2 3


# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
namespace std {

template<class _Mytree,
 class _Base = _Iterator_base0>
 class _Tree_unchecked_const_iterator
  : public _Iterator012<bidirectional_iterator_tag,
   typename _Mytree::value_type,
   typename _Mytree::difference_type,
   typename _Mytree::const_pointer,
   typename _Mytree::const_reference,
   _Base>
 {
public:
 typedef _Tree_unchecked_const_iterator<_Mytree, _Base> _Myiter;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_unchecked_const_iterator()
  : _Ptr(0)
  {
  }

 _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Mytree::_Myval(_Ptr));
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  if (_Mytree::_Isnil(_Ptr))
   ;
  else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
   _Ptr = _Mytree::_Min(
    _Mytree::_Right(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Right(_Pnode))
    _Ptr = _Pnode;
   _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  if (_Mytree::_Isnil(_Ptr))
   _Ptr = _Mytree::_Right(_Ptr);
  else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
   _Ptr = _Mytree::_Max(
    _Mytree::_Left(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Left(_Pnode))
    _Ptr = _Pnode;
   if (_Mytree::_Isnil(_Ptr))
    ;
   else
    _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Mynode() const
  {
  return (_Ptr);
  }

 _Nodeptr _Ptr;
 };


template<class _Mytree>
 class _Tree_unchecked_iterator
  : public _Tree_unchecked_const_iterator<_Mytree>
 {
public:
 typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_unchecked_iterator()
  {
  }

 _Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mytree>
 class _Tree_const_iterator
  : public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
 {
public:
 typedef _Tree_const_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_const_iterator()
  : _Mybase()
  {
  }

 _Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
   {
   _Debug_message(L"map/set iterator not dereferencable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 237);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 238, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 238, 0); };
   }







  return (_Mytree::_Myval(this->_Ptr));
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || _Mytree::_Isnil(this->_Ptr))
   {
   _Debug_message(L"map/set iterator not incrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 262);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 263, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 263, 0); };
   }






  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0)
   {
   _Debug_message(L"map/set iterator not decrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 288);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 289, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 289, 0); };
   }

  _Nodeptr _Ptrsav = this->_Ptr;
  --(*(_Mybase *)this);
  if (_Ptrsav == this->_Ptr)
   {
   _Debug_message(L"map/set iterator not decrementable", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 296);
   { (void)( (!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 297, 0, L"%ls", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 297, 0); };
   }
# 311 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree" 3
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {

  if (this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"map/set iterators incompatible", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 326);
   { (void)( (!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 327, 0, L"%ls", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 327, 0); };
   }





  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mytree> inline
 typename _Tree_const_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_const_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_const_iterator<_Mytree>&
  _Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
   typename _Tree_const_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Mytree>
 class _Tree_iterator
  : public _Tree_const_iterator<_Mytree>
 {
public:
 typedef _Tree_iterator<_Mytree> _Myiter;
 typedef _Tree_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;

 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_iterator()
  {
  }

 _Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mytree> inline
 typename _Tree_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_iterator<_Mytree>&
  _Rechecked(_Tree_iterator<_Mytree>& _Iter,
   typename _Tree_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _Tree_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Nodeptr_type _Nodeptr;
 };

template<class _Value_type,
 class _Voidptr>
 struct _Tree_node
  {
  _Voidptr _Left;
  _Voidptr _Parent;
  _Voidptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Value_type>
 struct _Tree_node<_Value_type, void *>
  {
  typedef _Tree_node<_Value_type, void *> *_Nodeptr;
  _Nodeptr _Left;
  _Nodeptr _Parent;
  _Nodeptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Ty>
 struct _Tree_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _Tree_node<_Ty, void *> _Node;
 typedef _Node *_Nodeptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _Tree_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Tree_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
  _Voidptr;
 typedef _Tree_node<typename _Alty::value_type,
  _Voidptr> _Node;

 typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
 typedef typename _Alnod_type::pointer _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Tree_simple_types<typename _Alty::value_type>,
  _Tree_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Nodeptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Tree_val
  : public _Container_base
 {
public:
 typedef _Tree_val<_Val_types> _Myt;

 typedef typename _Val_types::_Nodeptr _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Myt> const_iterator;
 typedef _Tree_iterator<_Myt> iterator;

 _Tree_val()
  {
  this->_Myhead = 0;
  this->_Mysize = 0;
  }

 enum _Redbl
  {
  _Red, _Black};

 static char& _Color(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Color);
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Isnil);
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Left);
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Parent);
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Right);
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return ((reference)_Pnode->_Myval);
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Right(_Pnode)))
   _Pnode = _Right(_Pnode);
  return (_Pnode);
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Left(_Pnode)))
   _Pnode = _Left(_Pnode);
  return (_Pnode);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<class _Traits>
 class _Tree_comp_alloc
 {
public:
 typedef _Tree_comp_alloc<_Traits> _Myt;

 typedef typename _Traits::allocator_type allocator_type;
 typedef typename _Traits::key_compare key_compare;

 typedef _Tree_base_types<typename _Traits::value_type,
  allocator_type> _Alloc_types;

 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
 typedef typename _Alloc_types::_Val_types _Val_types;

 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
 typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;

 enum _Redbl
  {
  _Red, _Black
  };

 static char& _Color(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Color(_Pnode));
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Isnil(_Pnode));
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Left(_Pnode));
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Parent(_Pnode));
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Right(_Pnode));
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Myval(_Pnode));
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Max(_Pnode));
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  return (_Tree_val<_Val_types>::_Min(_Pnode));
  }

 _Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _One_then_variadic_args_t(), _Al)
  {
  _Construct();
  }

 _Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
  : _Mypair(_One_then_variadic_args_t(), _Parg,
   _One_then_variadic_args_t(), ::std:: move(_Al))
  {
  _Construct();
  }
# 741 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree" 3
 void _Construct()
  {
  _Myhead() = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(_Myhead());
  throw;
  }
  }

 ~_Tree_comp_alloc() noexcept
  {
  _Freeheadnode(_Myhead());
  _Free_proxy();
  }

 void _Copy_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  _Pocca(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Move_alloc(_Alty& _Al)
  {
  _Free_proxy();
  _Pocma(_Getal(), _Al);
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Pocs(_Getal(), _Right._Getal());
  _Swap_adl(_Myproxy(), _Right._Myproxy());
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Myproxy() = _Alproxy.allocate(1);
  _Alproxy.construct(_Myproxy(), _Container_proxy());
  _Myproxy()->_Mycont = &_Get_data();
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  _Orphan_all();
  _Alproxy.destroy(_Myproxy());
  _Alproxy.deallocate(_Myproxy(), 1);
  _Myproxy() = 0;
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Get_data()._Getpfirst());
  }

 _Container_proxy * & _Myproxy() noexcept
  {
  return (_Get_data()._Myproxy);
  }

 _Container_proxy * const & _Myproxy() const noexcept
  {
  return (_Get_data()._Myproxy);
  }


 void _Orphan_all()
  {
  _Get_data()._Orphan_all();
  }

 void _Swap_all(_Myt& _Right)
  {
  _Get_data()._Swap_all(_Right._Get_data());
  }

 _Nodeptr _Buyheadnode()
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  try {
  _Getal().construct(
   ::std:: addressof(_Left(_Pnode)), _Pnode);
  _Getal().construct(
   ::std:: addressof(_Parent(_Pnode)), _Pnode);
  _Getal().construct(
   ::std:: addressof(_Right(_Pnode)), _Pnode);
  } catch (...) {
  _Getal().deallocate(_Pnode, 1);
  throw;
  }

  _Color(_Pnode) = _Black;
  _Isnil(_Pnode) = true;
  return (_Pnode);
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  _Getal().destroy(
   ::std:: addressof(_Left(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Parent(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Right(_Pnode)));
  _Getal().deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0()
  {
  _Nodeptr _Pnode = _Getal().allocate(1);

  try {
  _Getal().construct(
   ::std:: addressof(_Left(_Pnode)), _Myhead());
  _Getal().construct(
   ::std:: addressof(_Parent(_Pnode)), _Myhead());
  _Getal().construct(
   ::std:: addressof(_Right(_Pnode)), _Myhead());
  } catch (...) {
  _Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Freenode0(_Nodeptr _Pnode)
  {
  _Getal().destroy(
   ::std:: addressof(_Left(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Parent(_Pnode)));
  _Getal().destroy(
   ::std:: addressof(_Right(_Pnode)));
  _Getal().deallocate(_Pnode, 1);
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Buynode0();

  this->_Color(_Pnode) = _Red;
  this->_Isnil(_Pnode) = false;

  try {
  this->_Getal().construct(
   ::std:: addressof(_Myval(_Pnode)),
    ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  _Freenode0(_Pnode);
  throw;
  }

  return (_Pnode);
  }


 key_compare& _Getcomp() noexcept
  {
  return (_Mypair._Get_first());
  }

 const key_compare& _Getcomp() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Alty& _Getal() noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 const _Alty& _Getal() const noexcept
  {
  return (_Mypair._Get_second()._Get_first());
  }

 _Tree_val<_Val_types>& _Get_data() noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 const _Tree_val<_Val_types>& _Get_data() const noexcept
  {
  return (_Mypair._Get_second()._Get_second());
  }

 _Nodeptr& _Myhead() noexcept
  {
  return (_Get_data()._Myhead);
  }

 const _Nodeptr& _Myhead() const noexcept
  {
  return (_Get_data()._Myhead);
  }

 size_type& _Mysize() noexcept
  {
  return (_Get_data()._Mysize);
  }

 const size_type& _Mysize() const noexcept
  {
  return (_Get_data()._Mysize);
  }

private:
 _Compressed_pair<key_compare,
  _Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
 };


template<class _Traits>
 class _Tree
  : public _Tree_comp_alloc<_Traits>
 {
public:
 typedef _Tree<_Traits> _Myt;
 typedef _Tree_comp_alloc<_Traits> _Mybase;

 typedef typename _Traits::key_type key_type;
 typedef typename _Traits::value_compare value_compare;
 enum
  {
  _Multi = _Traits::_Multi};

 typedef typename _Mybase::_Node _Node;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::key_compare key_compare;
 typedef typename _Mybase::allocator_type allocator_type;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _If<is_same<key_type, value_type>::value,
  typename _Mybase::const_iterator,
  typename _Mybase::iterator>::type iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 typedef pair<iterator, bool> _Pairib;
 typedef pair<iterator, iterator> _Pairii;
 typedef pair<const_iterator, const_iterator> _Paircc;

 struct _Copy_tag
  {
  };
 struct _Move_tag
  {
  };

 _Tree(const key_compare& _Parg,
  const allocator_type& _Al)
  : _Mybase(_Parg, _Al)
  {
  }

 _Tree(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  try {
  _Copy(_Right, _Copy_tag());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 _Tree(_Myt&& _Right)
  : _Mybase(_Right.key_comp(), ::std:: move(_Right._Getal()))
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 _Tree(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Move_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Getcomp(), _Right._Getcomp());
  _Swap_adl(this->_Myhead(), _Right._Myhead());
  ::std:: swap(this->_Mysize(), _Right._Mysize());
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Copy(_Right, _Move_tag());
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 _Pairib insert(value_type&& _Val)
  {
  return (_Insert_nohint(false,
   ::std:: forward<value_type>(_Val), _Nil()));
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Insert_hint(_Where,
   ::std:: forward<value_type>(_Val), _Nil()));
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   _Pairib>::type
  insert(_Valty&& _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val));
  return (_Insert_nohint(false,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(const_iterator _Where, _Valty&& _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val));
  return (_Insert_hint(_Where,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class... _Valty>
  _Pairib emplace(_Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_nohint(false,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class... _Valty>
  iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_hint(_Where,
   this->_Myval(_Newnode), _Newnode));
  }


 ~_Tree() noexcept
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    this->_Copy_alloc(_Right._Getal());

   this->_Getcomp() = _Right._Getcomp();
   _Copy(_Right, _Copy_tag());
   }
  return (*this);
  }

 iterator begin() noexcept
  {
  return (iterator(_Lmost(), &this->_Get_data()));
  }

 const_iterator begin() const noexcept
  {
  return (const_iterator(_Lmost(), &this->_Get_data()));
  }

 iterator end() noexcept
  {
  return (iterator(this->_Myhead(), &this->_Get_data()));
  }

 const_iterator end() const noexcept
  {
  return (const_iterator(this->_Myhead(), &this->_Get_data()));
  }

 reverse_iterator rbegin() noexcept
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const noexcept
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() noexcept
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const noexcept
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const noexcept
  {
  return (begin());
  }

 const_iterator cend() const noexcept
  {
  return (end());
  }

 const_reverse_iterator crbegin() const noexcept
  {
  return (rbegin());
  }

 const_reverse_iterator crend() const noexcept
  {
  return (rend());
  }

 size_type size() const noexcept
  {
  return (this->_Mysize());
  }

 size_type max_size() const noexcept
  {
  return (this->_Getal().max_size());
  }

 bool empty() const noexcept
  {
  return (size() == 0);
  }

 allocator_type get_allocator() const noexcept
  {
  return (this->_Getal());
  }

 key_compare key_comp() const
  {
  return (this->_Getcomp());
  }

 value_compare value_comp() const
  {
  return (value_compare(key_comp()));
  }

 _Pairib insert(const value_type& _Val)
  {
  return (_Insert_nohint(false,
   _Val, _Nil()));
  }

 iterator insert(const_iterator _Where,
  const value_type& _Val)
  {
  return (_Insert_hint(_Where,
   _Val, _Nil()));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Debug_range(_First, _Last, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1251);
  for (; _First != _Last; ++_First)

   emplace_hint(end(), *_First);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  insert(_Ilist.begin(), _Ilist.end());
  }

 iterator erase(const_iterator _Where)
  {

  if (_Where._Getcont() != &this->_Get_data()
   || this->_Isnil(_Where._Mynode()))
   _Debug_message(L"map/set erase iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1267);
  _Nodeptr _Erasednode = _Where._Mynode();
  ++_Where;
  _Orphan_ptr(_Erasednode);






  _Nodeptr _Fixnode;
  _Nodeptr _Fixnodeparent;
  _Nodeptr _Pnode = _Erasednode;

  if (this->_Isnil(this->_Left(_Pnode)))
   _Fixnode = this->_Right(_Pnode);
  else if (this->_Isnil(this->_Right(_Pnode)))
   _Fixnode = this->_Left(_Pnode);
  else
   {
   _Pnode = _Where._Mynode();
   _Fixnode = this->_Right(_Pnode);
   }

  if (_Pnode == _Erasednode)
   {
   _Fixnodeparent = this->_Parent(_Erasednode);
   if (!this->_Isnil(_Fixnode))
    this->_Parent(_Fixnode) = _Fixnodeparent;

   if (_Root() == _Erasednode)
    _Root() = _Fixnode;
   else if (this->_Left(_Fixnodeparent) == _Erasednode)
    this->_Left(_Fixnodeparent) = _Fixnode;
   else
    this->_Right(_Fixnodeparent) =
     _Fixnode;

   if (_Lmost() == _Erasednode)
    _Lmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Min(_Fixnode);

   if (_Rmost() == _Erasednode)
    _Rmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Max(_Fixnode);
   }
  else
   {
   this->_Parent(this->_Left(_Erasednode)) =
    _Pnode;
   this->_Left(_Pnode) =
    this->_Left(_Erasednode);

   if (_Pnode == this->_Right(_Erasednode))
    _Fixnodeparent = _Pnode;
   else
    {
    _Fixnodeparent =
     this->_Parent(_Pnode);
    if (!this->_Isnil(_Fixnode))
     this->_Parent(_Fixnode) = _Fixnodeparent;
    this->_Left(_Fixnodeparent) = _Fixnode;
    this->_Right(_Pnode) =
     this->_Right(_Erasednode);
    this->_Parent(this->_Right(_Erasednode)) =
     _Pnode;
    }

   if (_Root() == _Erasednode)
    _Root() = _Pnode;
   else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
    this->_Left(this->_Parent(_Erasednode)) =
     _Pnode;
   else
    this->_Right(this->_Parent(_Erasednode)) =
     _Pnode;

   this->_Parent(_Pnode) =
    this->_Parent(_Erasednode);
   ::std:: swap(this->_Color(_Pnode),
    this->_Color(_Erasednode));
   }

  if (this->_Color(_Erasednode) == this->_Black)
   {
   for (; _Fixnode != _Root()
    && this->_Color(_Fixnode) == this->_Black;
    _Fixnodeparent = this->_Parent(_Fixnode))
    if (_Fixnode == this->_Left(_Fixnodeparent))
     {
     _Pnode = this->_Right(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Lrotate(_Fixnodeparent);
      _Pnode = this->_Right(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Left(_Pnode)) == this->_Black
      && this->_Color(this->_Right(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Right(_Pnode))
       == this->_Black)
       {
       this->_Color(this->_Left(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Rrotate(_Pnode);
       _Pnode = this->_Right(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Right(_Pnode)) = this->_Black;
      _Lrotate(_Fixnodeparent);
      break;
      }
     }
    else
     {
     _Pnode = this->_Left(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Rrotate(_Fixnodeparent);
      _Pnode = this->_Left(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Right(_Pnode)) ==
      this->_Black
      && this->_Color(this->_Left(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Left(_Pnode)) == this->_Black)
       {
       this->_Color(this->_Right(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Lrotate(_Pnode);
       _Pnode = this->_Left(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Left(_Pnode)) = this->_Black;
      _Rrotate(_Fixnodeparent);
      break;
      }
     }

   this->_Color(_Fixnode) = this->_Black;
   }

  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Erasednode)));

  this->_Getal().deallocate(_Erasednode, 1);

  if (0 < this->_Mysize())
   --this->_Mysize();

  return (iterator(_Where._Ptr,
   &this->_Get_data()));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (begin());
   }
  else
   {
   while (_First != _Last)
    erase(_First++);
   return (iterator(_First._Ptr, &this->_Get_data()));
   }
  }

 size_type erase(const key_type& _Keyval)
  {
  _Pairii _Where = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Where.first, _Where.second, _Num);
  erase(_Where.first, _Where.second);
  return (_Num);
  }

 void clear() noexcept
  {

  this->_Orphan_ptr(0);


  _Erase(_Root());
  _Root() = this->_Myhead();
  _Lmost() = this->_Myhead();
  _Rmost() = this->_Myhead();
  this->_Mysize() = 0;
  }

 iterator find(const key_type& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1489)

     ? end() : _Where);
  }

 const_iterator find(const key_type& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1498)

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator find(const _Other& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1510)

     ? end() : _Where);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator find(const _Other& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1522)

     ? end() : _Where);
  }

 size_type count(const key_type& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Ans.first, _Ans.second, _Num);
  return (_Num);
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  size_type count(const _Other& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Ans.first, _Ans.second, _Num);
  return (_Num);
  }

 iterator lower_bound(const key_type& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 const_iterator lower_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator lower_bound(const _Other& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator lower_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
  }

 iterator upper_bound(const key_type& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 const_iterator upper_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  iterator upper_bound(const _Other& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  const_iterator upper_bound(const _Other& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
  }

 _Pairii equal_range(const key_type& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 _Paircc equal_range(const key_type& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Pairii equal_range(const _Other& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 template<class _Other,
  class _Mycomp = key_compare,
  class = typename _Mycomp::is_transparent>
  _Paircc equal_range(const _Other& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Getcomp(), _Right._Getcomp());
   _Swap_adl(this->_Myhead(), _Right._Myhead());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Getcomp(), _Right._Getcomp());
   _Swap_adl(this->_Myhead(), _Right._Myhead());
   ::std:: swap(this->_Mysize(), _Right._Mysize());
   }

  else
   {

   _Debug_message(L"map/set containers incompatible for swap", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1646);




   }
  }

protected:
 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
  {
  return (_Node);
  }

 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
  {
  return (this->_Buynode(::std:: forward<_Valty>(_Val)));
  }

 void _Destroy_if_not_nil(_Nodeptr _Newnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Newnode)));

  this->_Getal().deallocate(_Newnode, 1);
  }

 void _Destroy_if_not_nil(_Nil)
  {
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_hint(const_iterator _Where,
   _Valty&& _Val, _Nodety _Newnode)
  {
  const_iterator _Next;
  bool _Leftish = false;

  try {


  if (_Where._Getcont() != &this->_Get_data())
   _Debug_message(L"map/set insert iterator outside range", L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1691);


  if (size() == 0)
   return (_Insert_at(true, this->_Myhead(),
    ::std:: forward<_Valty>(_Val), _Newnode));
  else if (this->_Multi)
   {
   if (_Where == begin())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1702))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    _Leftish = true;
    }
   else if (_Where == end())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Rmost()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1710))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1715)

    && !_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1718))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1728)

    && (++(_Next = _Where) == end()
     || !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Next._Mynode()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1731)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else
    _Leftish = true;
   }
  else
   {
   if (_Where == begin())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1748))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Where == end())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Rmost()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1755))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1760)

    && _Debug_lt_pred(this->_Getcomp(), this->_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1763))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1773)

    && (++(_Next = _Where) == end()
     || _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Next._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1776)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }

  return (_Insert_nohint(_Leftish,
   ::std:: forward<_Valty>(_Val), _Newnode).first);
  }

 template<class _Valty,
  class _Nodety>
  _Pairib _Insert_nohint(bool _Leftish,
   _Valty&& _Val, _Nodety _Newnode)
  {
  try {
  _Nodeptr _Trynode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();
  bool _Addleft = true;

  while (!this->_Isnil(_Trynode))
   {
   _Wherenode = _Trynode;
   if (_Leftish)
    _Addleft = !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Trynode), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1811);


   else
    _Addleft = _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Trynode), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1815);


   _Trynode = _Addleft ? this->_Left(_Trynode)
    : this->_Right(_Trynode);
   }

  if (this->_Multi)
   return (_Pairib(_Insert_at(_Addleft, _Wherenode,
    ::std:: forward<_Valty>(_Val), _Newnode), true));
  else
   {
   iterator _Where = iterator(_Wherenode, &this->_Get_data());
   if (!_Addleft)
    ;
   else if (_Where == begin())
    return (_Pairib(_Insert_at(true, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    --_Where;

   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 1836))


    return (_Pairib(_Insert_at(_Addleft, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    {
    _Destroy_if_not_nil(_Newnode);
    return (_Pairib(_Where, false));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
  _Valty&& _Val, _Nodety _Node)
  {
  if (max_size() - 1 <= this->_Mysize())
   {
   _Destroy_if_not_nil(_Node);
   _Xlength_error("map/set<T> too long");
   }
  _Nodeptr _Newnode = _Buynode_if_nil(_Node,
   ::std:: forward<_Valty>(_Val));

  ++this->_Mysize();
  _Newnode->_Parent = _Wherenode;

  if (_Wherenode == this->_Myhead())
   {
   _Root() = _Newnode;
   _Lmost() = _Newnode;
   _Rmost() = _Newnode;
   }
  else if (_Addleft)
   {
   this->_Left(_Wherenode) = _Newnode;
   if (_Wherenode == _Lmost())
    _Lmost() = _Newnode;
   }
  else
   {
   this->_Right(_Wherenode) = _Newnode;
   if (_Wherenode == _Rmost())
    _Rmost() = _Newnode;
   }

  for (_Nodeptr _Pnode = _Newnode;
   this->_Color(this->_Parent(_Pnode)) == this->_Red; )
   if (this->_Parent(_Pnode)
    == this->_Left(this->_Parent(this->_Parent(_Pnode))))
    {
    _Wherenode =
     this->_Right(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode)))
      = this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Right(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Lrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Rrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }
   else
    {
    _Wherenode =
     this->_Left(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Left(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Rrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Lrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }

  this->_Color(_Root()) = this->_Black;
  return (iterator(_Newnode, &this->_Get_data()));
  }

 template<class _Moveit>
  void _Copy(const _Myt& _Right, _Moveit _Movefl)
  {
  _Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
  this->_Mysize() = _Right.size();
  if (!this->_Isnil(_Root()))
   {
   _Lmost() = this->_Min(_Root());
   _Rmost() = this->_Max(_Root());
   }
  else
   {
   _Lmost() = this->_Myhead();
   _Rmost() = this->_Myhead();
   }
  }

 template<class _Ty,
  class _Is_set>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
  {
  return (this->_Buynode(_Val));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
  {
  return (this->_Buynode(::std:: move(_Val)));
  }

 template<class _Ty>
  _Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
  {
  return (this->_Buynode(
   ::std:: move(const_cast<key_type&>(_Val.first)),
   ::std:: move(_Val.second)));
  }

 template<class _Moveit>
  _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
   _Moveit _Movefl)
  {
  _Nodeptr _Newroot = this->_Myhead();

  if (!this->_Isnil(_Rootnode))
   {
   typename is_same<key_type, value_type>::type _Is_set;
   _Nodeptr _Pnode = _Copy_or_move(
    this->_Myval(_Rootnode), _Movefl, _Is_set);
   _Pnode->_Parent = _Wherenode;
   _Pnode->_Color = this->_Color(_Rootnode);
   if (this->_Isnil(_Newroot))
    _Newroot = _Pnode;

   try {
   this->_Left(_Pnode) =
    _Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
   this->_Right(_Pnode) =
    _Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
   } catch (...) {
   _Erase(_Newroot);
   throw;
   }
   }

  return (_Newroot);
  }

 template<class _Other>
  _Paircc _Eqrange(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Lonode = this->_Myhead();
  _Nodeptr _Hinode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 2022))
    _Pnode = this->_Right(_Pnode);
   else
    {
    if (this->_Isnil(_Hinode)
      && _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 2028))

     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  _Pnode = this->_Isnil(_Hinode) ? _Root()
   : this->_Left(_Hinode);
  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 2037))
    {
    _Hinode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
  const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
  return (_Paircc(_First, _Last));
  }

 template<class _Other>
  _Pairii _Eqrange(const _Other& _Keyval)
  {
  _Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
  iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
  iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
  return (_Pairii(_First, _Last));
  }

 void _Erase(_Nodeptr _Rootnode)
  {
  for (_Nodeptr _Pnode = _Rootnode;
   !this->_Isnil(_Pnode); _Rootnode = _Pnode)
   {
   _Erase(this->_Right(_Pnode));
   _Pnode = this->_Left(_Pnode);
   this->_Getal().destroy(
    ::std:: addressof(this->_Myval(_Rootnode)));

   this->_Getal().deallocate(_Rootnode, 1);
   }
  }

 bool _Compare(const key_type& _Left, const key_type& _Right) const
  {
  return (_Debug_lt_pred(this->_Getcomp(), _Left, _Right, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xtree", 2075));
  }

 template<class _Ty1,
  class _Ty2>
  bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
  {
  return (this->_Getcomp()(_Left, _Right));
  }

 template<class _Other>
  _Nodeptr _Lbound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Compare(this->_Key(_Pnode), _Keyval))
    _Pnode = this->_Right(_Pnode);
   else
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  return (_Wherenode);
  }

 _Nodeptr& _Lmost() const
  {
  return (this->_Left(this->_Myhead()));
  }

 void _Lrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Right(_Wherenode);
  this->_Right(_Wherenode) = this->_Left(_Pnode);

  if (!this->_Isnil(this->_Left(_Pnode)))
   this->_Parent(this->_Left(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  this->_Left(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 _Nodeptr& _Rmost() const
  {
  return (this->_Right(this->_Myhead()));
  }

 _Nodeptr& _Root() const
  {
  return (this->_Parent(this->_Myhead()));
  }

 void _Rrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Left(_Wherenode);
  this->_Left(_Wherenode) = this->_Right(_Pnode);

  if (!this->_Isnil(this->_Right(_Pnode)))
   this->_Parent(this->_Right(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  this->_Right(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 template<class _Other>
  _Nodeptr _Ubound(const _Other& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead();

  while (!this->_Isnil(_Pnode))
   if (_Compare(_Keyval, this->_Key(_Pnode)))
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  return (_Wherenode);
  }


 void _Orphan_ptr(_Nodeptr _Ptr)
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr == this->_Myhead()
     || _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }


 void _Tidy()
  {
  erase(begin(), end());
  }

 const key_type& _Kfn(const value_type& _Val) const
  {
  return (_Traits::_Kfn(_Val));
  }

 const key_type& _Key(_Nodeptr _Pnode) const
  {
  return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));
  }
 };


template<class _Traits> inline
 bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Left.size() == _Right.size()
  && ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Traits> inline
 bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Traits> inline
 bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Traits> inline
 bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Traits> inline
 bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Traits> inline
 bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left < _Right));
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 9 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\map" 2 3


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc,
 bool _Mfl>
 class _Tmap_traits
 {
public:
 typedef _Kty key_type;
 typedef pair<const _Kty, _Ty> value_type;
 typedef _Pr key_compare;
 typedef _Alloc allocator_type;

 enum
  {
  _Multi = _Mfl};

 class value_compare
  {
  friend class _Tmap_traits<_Kty, _Ty, _Pr, _Alloc, _Mfl>;

 public:
  typedef value_type first_argument_type;
  typedef value_type second_argument_type;
  typedef bool result_type;

  bool operator()(const value_type& _Left,
   const value_type& _Right) const
   {
   return (comp(_Left.first, _Right.first));
   }

  value_compare(key_compare _Pred)
   : comp(_Pred)
   {
   }

 protected:
  key_compare comp;
  };

 template<class _Ty1,
  class _Ty2>
  static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
  {
  return (_Val.first);
  }
 };


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class map
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> >
 {
public:
 typedef map<_Kty, _Ty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> > _Mybase;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Pairib _Pairib;

 map()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit map(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 map(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())


  {
  }

 map(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit map(const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  }

 map(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 map(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 map(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 mapped_type& operator[](key_type&& _Keyval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))

   _Where = _Mybase::emplace_hint(_Where,
    piecewise_construct,
    ::std:: forward_as_tuple(::std:: move(_Keyval)),
    tuple<>());


  return (_Where->second);
  }

 void swap(_Myt& _Right)
  noexcept(_Alty::is_always_equal::value && noexcept(_Swap_adl( ::std:: declval<_Pr&>(), ::std:: declval<_Pr&>())))


  {
  _Mybase::swap(_Right);
  }

 template<class _Keyty,
  class... _Mappedty>
  _Pairib _Try_emplace(_Keyty&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Debug_lt_pred(_Mybase::_Getcomp(), _Keyval, _Mybase::_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\map", 210))

   return (_Pairib(
    _Mybase::emplace_hint(_Where,
     piecewise_construct,
     ::std:: forward_as_tuple(
      ::std:: forward<_Keyty>(_Keyval)),
     ::std:: forward_as_tuple(
      ::std:: forward<_Mappedty>(_Mapval)...)),
    true));
  else
   return (_Pairib(_Where, false));
  }

 template<class... _Mappedty>
  _Pairib try_emplace(const key_type& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(_Keyval, ::std:: forward<_Mappedty>(_Mapval)...));
  }

 template<class... _Mappedty>
  iterator try_emplace(const_iterator, const key_type& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)...).first);
  }

 template<class... _Mappedty>
  _Pairib try_emplace(key_type&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)...));
  }

 template<class... _Mappedty>
  iterator try_emplace(const_iterator, key_type&& _Keyval,
   _Mappedty&&... _Mapval)
  {
  return (_Try_emplace(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)...).first);
  }

 template<class _Keyty,
  class _Mappedty>
  _Pairib _Insert_or_assign(_Keyty&& _Keyval,
   _Mappedty&& _Mapval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Debug_lt_pred(_Mybase::_Getcomp(), _Keyval, _Mybase::_Key(_Where._Mynode()), L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\map", 262))

   return (_Pairib(
    _Mybase::emplace_hint(_Where,
     ::std:: forward<_Keyty>(_Keyval),
     ::std:: forward<_Mappedty>(_Mapval)),
    true));
  else
   {
   _Where->second = ::std:: forward<_Mappedty>(_Mapval);
   return (_Pairib(_Where, false));
   }
  }

 template<class _Mappedty>
  _Pairib insert_or_assign(const key_type& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)));
  }

 template<class _Mappedty>
  iterator insert_or_assign(const_iterator, const key_type& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(_Keyval,
   ::std:: forward<_Mappedty>(_Mapval)).first);
  }

 template<class _Mappedty>
  _Pairib insert_or_assign(key_type&& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)));
  }

 template<class _Mappedty>
  iterator insert_or_assign(const_iterator, key_type&& _Keyval,
   _Mappedty&& _Mapval)
  {
  return (_Insert_or_assign(::std:: move(_Keyval),
   ::std:: forward<_Mappedty>(_Mapval)).first);
  }

 map(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 map(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 map(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  _Mybase::clear();
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }






 mapped_type& operator[](const key_type& _Keyval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))

   _Where = _Mybase::emplace_hint(_Where,
    piecewise_construct,
    ::std:: forward_as_tuple(_Keyval),
    tuple<>());


  return (_Where->second);
  }

 mapped_type& at(const key_type& _Keyval)
  {
  iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }

 const mapped_type& at(const key_type& _Keyval) const
  {
  const_iterator _Where = _Mybase::lower_bound(_Keyval);
  if (_Where == _Mybase::end()
   || _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Mynode())))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left,
  map<_Kty, _Ty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class multimap
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> >
 {
public:
 typedef multimap<_Kty, _Ty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> > _Mybase;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::_Alty _Alty;

 multimap()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit multimap(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 multimap(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())


  {
  }

 multimap(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit multimap(const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  }

 multimap(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 multimap(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 multimap(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  noexcept(_Alty::is_always_equal::value && is_nothrow_move_assignable<_Pr>::value)

  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(_Valty&& _Val)
  {
  return (_Mybase::insert(::std:: forward<_Valty>(_Val)).first);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(const_iterator _Where, _Valty&& _Val)
  {
  return (_Mybase::insert(_Where, ::std:: forward<_Valty>(_Val)));
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }


 void swap(_Myt& _Right)
  noexcept(_Alty::is_always_equal::value && noexcept(_Swap_adl( ::std:: declval<_Pr&>(), ::std:: declval<_Pr&>())))


  {
  _Mybase::swap(_Right);
  }

 multimap(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 multimap(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 multimap(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  _Mybase::clear();
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  _Mybase::insert(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const value_type& _Val)
  {
  return (_Mybase::insert(_Val).first);
  }

 iterator insert(const_iterator _Where, const value_type& _Val)
  {
  return (_Mybase::insert(_Where, _Val));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Mybase::insert(_First, _Last);
  }
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left,
  multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
  noexcept(noexcept(_Left.swap(_Right)))
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 38 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp" 2




namespace sf
{
class InputStream;





class __declspec(dllimport) Font
{
public:





    struct Info
    {
        std::string family;
    };

public:







    Font();







    Font(const Font& copy);







    ~Font();
# 109 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    bool loadFromFile(const std::string& filename);
# 130 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    bool loadFromMemory(const void* data, std::size_t sizeInBytes);
# 152 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    bool loadFromStream(InputStream& stream);







    const Info& getInfo() const;
# 176 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    const Glyph& getGlyph(Uint32 codePoint, unsigned int characterSize, bool bold) const;
# 194 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    float getKerning(Uint32 first, Uint32 second, unsigned int characterSize) const;
# 207 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    float getLineSpacing(unsigned int characterSize) const;
# 222 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    float getUnderlinePosition(unsigned int characterSize) const;
# 236 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    float getUnderlineThickness(unsigned int characterSize) const;
# 250 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    const Texture& getTexture(unsigned int characterSize) const;
# 260 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    Font& operator =(const Font& right);

private:





    struct Row
    {
        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeight) {}

        unsigned int width;
        unsigned int top;
        unsigned int height;
    };




    typedef std::map<Uint32, Glyph> GlyphTable;





    struct Page
    {
        Page();

        GlyphTable glyphs;
        Texture texture;
        unsigned int nextRow;
        std::vector<Row> rows;
    };





    void cleanup();
# 312 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    Glyph loadGlyph(Uint32 codePoint, unsigned int characterSize, bool bold) const;
# 324 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    IntRect findGlyphRect(Page& page, unsigned int width, unsigned int height) const;
# 334 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Font.hpp"
    bool setCurrentSize(unsigned int characterSize) const;




    typedef std::map<unsigned int, Page> PageTable;




    void* m_library;
    void* m_face;
    void* m_streamRec;
    int* m_refCount;
    Info m_info;
    mutable PageTable m_pages;
    mutable std::vector<Uint8> m_pixelBuffer;



};

}
# 39 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2




# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RectangleShape.hpp" 1
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RectangleShape.hpp"
namespace sf
{




class __declspec(dllimport) RectangleShape : public Shape
{
public:







    explicit RectangleShape(const Vector2f& size = Vector2f(0, 0));
# 61 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RectangleShape.hpp"
    void setSize(const Vector2f& size);
# 71 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RectangleShape.hpp"
    const Vector2f& getSize() const;
# 80 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RectangleShape.hpp"
    virtual std::size_t getPointCount() const;
# 95 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RectangleShape.hpp"
    virtual Vector2f getPoint(std::size_t index) const;

private:




    Vector2f m_size;
};

}
# 44 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp" 1
# 34 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp" 1
# 37 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
namespace sf
{




class __declspec(dllimport) View
{
public:







    View();







    explicit View(const FloatRect& rectangle);
# 70 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    View(const Vector2f& center, const Vector2f& size);
# 81 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void setCenter(float x, float y);
# 91 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void setCenter(const Vector2f& center);
# 102 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void setSize(float width, float height);
# 112 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void setSize(const Vector2f& size);
# 124 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void setRotation(float angle);
# 141 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void setViewport(const FloatRect& viewport);
# 153 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void reset(const FloatRect& rectangle);
# 163 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    const Vector2f& getCenter() const;
# 173 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    const Vector2f& getSize() const;
# 183 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    float getRotation() const;
# 193 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    const FloatRect& getViewport() const;
# 204 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void move(float offsetX, float offsetY);
# 214 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void move(const Vector2f& offset);
# 224 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void rotate(float angle);
# 241 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    void zoom(float factor);
# 253 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    const Transform& getTransform() const;
# 265 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/View.hpp"
    const Transform& getInverseTransform() const;

private:




    Vector2f m_center;
    Vector2f m_size;
    float m_rotation;
    FloatRect m_viewport;
    mutable Transform m_transform;
    mutable Transform m_inverseTransform;
    mutable bool m_transformUpdated;
    mutable bool m_invTransformUpdated;
};

}
# 35 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp" 2








namespace sf
{
class Drawable;





class __declspec(dllimport) RenderTarget : NonCopyable
{
public:





    virtual ~RenderTarget();
# 70 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void clear(const Color& color = Color(0, 0, 0, 255));
# 91 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void setView(const View& view);
# 101 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    const View& getView() const;
# 114 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    const View& getDefaultView() const;
# 129 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    IntRect getViewport(const View& view) const;
# 149 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    Vector2f mapPixelToCoords(const Vector2i& point) const;
# 180 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    Vector2f mapPixelToCoords(const Vector2i& point, const View& view) const;
# 200 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    Vector2i mapCoordsToPixel(const Vector2f& point) const;
# 227 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    Vector2i mapCoordsToPixel(const Vector2f& point, const View& view) const;
# 236 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void draw(const Drawable& drawable, const RenderStates& states = RenderStates::Default);
# 247 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void draw(const Vertex* vertices, std::size_t vertexCount,
              PrimitiveType type, const RenderStates& states = RenderStates::Default);







    virtual Vector2u getSize() const = 0;
# 290 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void pushGLStates();
# 301 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void popGLStates();
# 324 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void resetGLStates();

protected:





    RenderTarget();
# 341 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    void initialize();

private:





    void applyCurrentView();







    void applyBlendMode(const BlendMode& mode);







    void applyTransform(const Transform& transform);







    void applyTexture(const Texture* texture);







    void applyShader(const Shader* shader);
# 395 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTarget.hpp"
    virtual bool activate(bool active) = 0;





    struct StatesCache
    {
        enum {VertexCacheSize = 4};

        bool glStatesSet;
        bool viewChanged;
        BlendMode lastBlendMode;
        Uint64 lastTextureId;
        bool useVertexCache;
        Vertex vertexCache[VertexCacheSize];
    };




    View m_defaultView;
    View m_view;
    StatesCache m_cache;
};

}
# 46 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp" 1
# 36 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
namespace sf
{
namespace priv
{
    class RenderTextureImpl;
}





class __declspec(dllimport) RenderTexture : public RenderTarget
{
public:
# 60 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    RenderTexture();





    virtual ~RenderTexture();
# 86 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    bool create(unsigned int width, unsigned int height, bool depthBuffer = false);
# 99 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    void setSmooth(bool smooth);
# 109 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    bool isSmooth() const;
# 122 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    void setRepeated(bool repeated);
# 132 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    bool isRepeated() const;
# 149 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    bool setActive(bool active = true);
# 160 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    void display();
# 171 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    virtual Vector2u getSize() const;
# 187 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    const Texture& getTexture() const;

private:
# 202 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderTexture.hpp"
    virtual bool activate(bool active);




    priv::RenderTextureImpl* m_impl;
    Texture m_texture;
};

}
# 47 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp" 1
# 38 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
namespace sf
{




class __declspec(dllimport) RenderWindow : public Window, public RenderTarget
{
public:
# 55 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    RenderWindow();
# 76 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    RenderWindow(VideoMode mode, const String& title, Uint32 style = Style::Default, const ContextSettings& settings = ContextSettings());
# 94 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    explicit RenderWindow(WindowHandle handle, const ContextSettings& settings = ContextSettings());







    virtual ~RenderWindow();
# 113 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    virtual Vector2u getSize() const;
# 129 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    Image capture() const;

protected:
# 141 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    virtual void onCreate();
# 150 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    virtual void onResize();

private:
# 162 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/RenderWindow.hpp"
    virtual bool activate(bool active);
};

}
# 48 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp" 1
# 42 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
namespace sf
{
class InputStream;
class Texture;





class __declspec(dllimport) Shader : GlResource, NonCopyable
{
public:





    enum Type
    {
        Vertex,
        Fragment
    };
# 72 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    struct CurrentTextureType {};







    static CurrentTextureType CurrentTexture;

public:







    Shader();





    ~Shader();
# 117 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool loadFromFile(const std::string& filename, Type type);
# 138 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool loadFromFile(const std::string& vertexShaderFilename, const std::string& fragmentShaderFilename);
# 158 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool loadFromMemory(const std::string& shader, Type type);
# 179 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool loadFromMemory(const std::string& vertexShader, const std::string& fragmentShader);
# 199 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool loadFromStream(InputStream& stream, Type type);
# 220 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool loadFromStream(InputStream& vertexShaderStream, InputStream& fragmentShaderStream);
# 241 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, float x);
# 263 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, float x, float y);
# 286 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, float x, float y, float z);
# 310 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, float x, float y, float z, float w);
# 331 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, const Vector2f& vector);
# 352 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, const Vector3f& vector);
# 379 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, const Color& color);
# 402 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, const Transform& transform);
# 434 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, const Texture& texture);
# 457 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void setParameter(const std::string& name, CurrentTextureType);
# 469 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    unsigned int getNativeHandle() const;
# 492 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    static void bind(const Shader* shader);
# 507 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    static bool isAvailable();

private:
# 523 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    bool compile(const char* vertexShaderCode, const char* fragmentShaderCode);
# 532 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    void bindTextures() const;
# 542 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Shader.hpp"
    int getParamLocation(const std::string& name);




    typedef std::map<int, const Texture*> TextureTable;
    typedef std::map<std::string, int> ParamTable;




    unsigned int m_shaderProgram;
    int m_currentTexture;
    TextureTable m_textures;
    ParamTable m_params;
};

}
# 49 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2

# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp" 1
# 38 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
namespace sf
{
class Texture;






class __declspec(dllimport) Sprite : public Drawable, public Transformable
{
public:







    Sprite();
# 67 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    explicit Sprite(const Texture& texture);
# 78 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    Sprite(const Texture& texture, const IntRect& rectangle);
# 99 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    void setTexture(const Texture& texture, bool resetRect = false);
# 113 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    void setTextureRect(const IntRect& rectangle);
# 128 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    void setColor(const Color& color);
# 142 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    const Texture* getTexture() const;
# 152 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    const IntRect& getTextureRect() const;
# 162 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    const Color& getColor() const;
# 176 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    FloatRect getLocalBounds() const;
# 190 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    FloatRect getGlobalBounds() const;

private:
# 201 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Sprite.hpp"
    virtual void draw(RenderTarget& target, RenderStates states) const;





    void updatePositions();





    void updateTexCoords();




    Vertex m_vertices[4];
    const Texture* m_texture;
    IntRect m_textureRect;
};

}
# 51 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 1 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp" 1
# 42 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
namespace sf
{




class __declspec(dllimport) Text : public Drawable, public Transformable
{
public:





    enum Style
    {
        Regular = 0,
        Bold = 1 << 0,
        Italic = 1 << 1,
        Underlined = 1 << 2,
        StrikeThrough = 1 << 3
    };







    Text();
# 88 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    Text(const String& string, const Font& font, unsigned int characterSize = 30);
# 109 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    void setString(const String& string);
# 126 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    void setFont(const Font& font);
# 145 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    void setCharacterSize(unsigned int size);
# 159 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    void setStyle(Uint32 style);
# 171 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    void setColor(const Color& color);
# 190 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    const String& getString() const;
# 204 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    const Font* getFont() const;
# 214 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    unsigned int getCharacterSize() const;
# 224 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    Uint32 getStyle() const;
# 234 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    const Color& getColor() const;
# 251 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    Vector2f findCharacterPos(std::size_t index) const;
# 265 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    FloatRect getLocalBounds() const;
# 279 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    FloatRect getGlobalBounds() const;

private:
# 290 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    virtual void draw(RenderTarget& target, RenderStates states) const;
# 299 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics/Text.hpp"
    void ensureGeometryUpdate() const;




    String m_string;
    const Font* m_font;
    unsigned int m_characterSize;
    Uint32 m_style;
    Color m_color;
    mutable VertexArray m_vertices;
    mutable FloatRect m_bounds;
    mutable bool m_geometryNeedUpdate;
};

}
# 52 "C:/Programing/Libs/SFML-2.3.2/include\\SFML/Graphics.hpp" 2
# 4 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/enemy.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/level.hpp" 1








# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iostream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
# 26 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iostream" 3
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit() noexcept;
private:
                         static int _Init_cnt;
 };

}

#pragma warning(pop)
#pragma pack(pop)
# 9 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/level.hpp" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h" 1
# 30 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
#pragma warning(push)
#pragma warning(disable: 4530)
#pragma warning(disable: 4786)







# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 39 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h" 2
# 52 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinystr.h" 1
# 30 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinystr.h"
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 30 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinystr.h" 2
# 55 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinystr.h"
class TiXmlString
{
  public :

   typedef size_t size_type;


 static const size_type npos;



 TiXmlString () : rep_(&nullrep_)
 {
 }


 TiXmlString ( const TiXmlString & copy) : rep_(0)
 {
  init(copy.length());
  memcpy(start(), copy.data(), length());
 }


 explicit TiXmlString ( const char * copy) : rep_(0)
 {
  init( static_cast<size_type>( strlen(copy) ));
  memcpy(start(), copy, length());
 }


 explicit TiXmlString ( const char * str, size_type len) : rep_(0)
 {
  init(len);
  memcpy(start(), str, len);
 }


 ~TiXmlString ()
 {
  quit();
 }

 TiXmlString& operator = (const char * copy)
 {
  return assign( copy, (size_type)strlen(copy));
 }

 TiXmlString& operator = (const TiXmlString & copy)
 {
  return assign(copy.start(), copy.length());
 }



 TiXmlString& operator += (const char * suffix)
 {
  return append(suffix, static_cast<size_type>( strlen(suffix) ));
 }


 TiXmlString& operator += (char single)
 {
  return append(&single, 1);
 }


 TiXmlString& operator += (const TiXmlString & suffix)
 {
  return append(suffix.data(), suffix.length());
 }



 const char * c_str () const { return rep_->str; }


 const char * data () const { return rep_->str; }


 size_type length () const { return rep_->size; }


 size_type size () const { return rep_->size; }


 bool empty () const { return rep_->size == 0; }


 size_type capacity () const { return rep_->capacity; }



 const char& at (size_type index) const
 {
  (void)( (!!(index < length())) || (_wassert(L"index < length()", L"C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinystr.h", (unsigned)(149)), 0) );
  return rep_->str[ index ];
 }


 char& operator [] (size_type index) const
 {
  (void)( (!!(index < length())) || (_wassert(L"index < length()", L"C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinystr.h", (unsigned)(156)), 0) );
  return rep_->str[ index ];
 }


 size_type find (char lookup) const
 {
  return find(lookup, 0);
 }


 size_type find (char tofind, size_type offset) const
 {
  if (offset >= length()) return npos;

  for (const char* p = c_str() + offset; *p != '\0'; ++p)
  {
     if (*p == tofind) return static_cast< size_type >( p - c_str() );
  }
  return npos;
 }

 void clear ()
 {




  quit();
  init(0,0);
 }




 void reserve (size_type cap);

 TiXmlString& assign (const char* str, size_type len);

 TiXmlString& append (const char* str, size_type len);

 void swap (TiXmlString& other)
 {
  Rep* r = rep_;
  rep_ = other.rep_;
  other.rep_ = r;
 }

  private:

 void init(size_type sz) { init(sz, sz); }
 void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\0'; }
 char* start() const { return rep_->str; }
 char* finish() const { return rep_->str + rep_->size; }

 struct Rep
 {
  size_type size, capacity;
  char str[1];
 };

 void init(size_type sz, size_type cap)
 {
  if (cap)
  {





   const size_type bytesNeeded = sizeof(Rep) + cap;
   const size_type intsNeeded = ( bytesNeeded + sizeof(int) - 1 ) / sizeof( int );
   rep_ = reinterpret_cast<Rep*>( new int[ intsNeeded ] );

   rep_->str[ rep_->size = sz ] = '\0';
   rep_->capacity = cap;
  }
  else
  {
   rep_ = &nullrep_;
  }
 }

 void quit()
 {
  if (rep_ != &nullrep_)
  {


   delete [] ( reinterpret_cast<int*>( rep_ ) );
  }
 }

 Rep * rep_;
 static Rep nullrep_;

} ;


inline bool operator == (const TiXmlString & a, const TiXmlString & b)
{
 return ( a.length() == b.length() )
        && ( strcmp(a.c_str(), b.c_str()) == 0 );
}
inline bool operator < (const TiXmlString & a, const TiXmlString & b)
{
 return strcmp(a.c_str(), b.c_str()) < 0;
}

inline bool operator != (const TiXmlString & a, const TiXmlString & b) { return !(a == b); }
inline bool operator > (const TiXmlString & a, const TiXmlString & b) { return b < a; }
inline bool operator <= (const TiXmlString & a, const TiXmlString & b) { return !(b < a); }
inline bool operator >= (const TiXmlString & a, const TiXmlString & b) { return !(a < b); }

inline bool operator == (const TiXmlString & a, const char* b) { return strcmp(a.c_str(), b) == 0; }
inline bool operator == (const char* a, const TiXmlString & b) { return b == a; }
inline bool operator != (const TiXmlString & a, const char* b) { return !(a == b); }
inline bool operator != (const char* a, const TiXmlString & b) { return !(b == a); }

TiXmlString operator + (const TiXmlString & a, const TiXmlString & b);
TiXmlString operator + (const TiXmlString & a, const char* b);
TiXmlString operator + (const char* a, const TiXmlString & b);






class TiXmlOutStream : public TiXmlString
{
public :


 TiXmlOutStream & operator << (const TiXmlString & in)
 {
  *this += in;
  return *this;
 }


 TiXmlOutStream & operator << (const char * in)
 {
  *this += in;
  return *this;
 }

} ;
# 52 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h" 2
# 83 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlDocument;
class TiXmlElement;
class TiXmlComment;
class TiXmlUnknown;
class TiXmlAttribute;
class TiXmlText;
class TiXmlDeclaration;
class TiXmlParsingData;

const int TIXML_MAJOR_VERSION = 2;
const int TIXML_MINOR_VERSION = 6;
const int TIXML_PATCH_VERSION = 2;




struct TiXmlCursor
{
 TiXmlCursor() { Clear(); }
 void Clear() { row = col = -1; }

 int row;
 int col;
};
# 128 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlVisitor
{
public:
 virtual ~TiXmlVisitor() {}


 virtual bool VisitEnter( const TiXmlDocument& ) { return true; }

 virtual bool VisitExit( const TiXmlDocument& ) { return true; }


 virtual bool VisitEnter( const TiXmlElement& , const TiXmlAttribute* ) { return true; }

 virtual bool VisitExit( const TiXmlElement& ) { return true; }


 virtual bool Visit( const TiXmlDeclaration& ) { return true; }

 virtual bool Visit( const TiXmlText& ) { return true; }

 virtual bool Visit( const TiXmlComment& ) { return true; }

 virtual bool Visit( const TiXmlUnknown& ) { return true; }
};


enum
{
 TIXML_SUCCESS,
 TIXML_NO_ATTRIBUTE,
 TIXML_WRONG_TYPE
};



enum TiXmlEncoding
{
 TIXML_ENCODING_UNKNOWN,
 TIXML_ENCODING_UTF8,
 TIXML_ENCODING_LEGACY
};

const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;
# 194 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlBase
{
 friend class TiXmlNode;
 friend class TiXmlElement;
 friend class TiXmlDocument;

public:
 TiXmlBase() : userData(0) {}
 virtual ~TiXmlBase() {}
# 213 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 virtual void Print( FILE* cfile, int depth ) const = 0;







 static void SetCondenseWhiteSpace( bool condense ) { condenseWhiteSpace = condense; }


 static bool IsWhiteSpaceCondensed() { return condenseWhiteSpace; }
# 244 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 int Row() const { return location.row + 1; }
 int Column() const { return location.col + 1; }

 void SetUserData( void* user ) { userData = user; }
 void* GetUserData() { return userData; }
 const void* GetUserData() const { return userData; }



 static const int utf8ByteTable[256];

 virtual const char* Parse( const char* p,
        TiXmlParsingData* data,
        TiXmlEncoding encoding ) = 0;




 static void EncodeString( const TiXmlString& str, TiXmlString* out );

 enum
 {
  TIXML_NO_ERROR = 0,
  TIXML_ERROR,
  TIXML_ERROR_OPENING_FILE,
  TIXML_ERROR_PARSING_ELEMENT,
  TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,
  TIXML_ERROR_READING_ELEMENT_VALUE,
  TIXML_ERROR_READING_ATTRIBUTES,
  TIXML_ERROR_PARSING_EMPTY,
  TIXML_ERROR_READING_END_TAG,
  TIXML_ERROR_PARSING_UNKNOWN,
  TIXML_ERROR_PARSING_COMMENT,
  TIXML_ERROR_PARSING_DECLARATION,
  TIXML_ERROR_DOCUMENT_EMPTY,
  TIXML_ERROR_EMBEDDED_NULL,
  TIXML_ERROR_PARSING_CDATA,
  TIXML_ERROR_DOCUMENT_TOP_ONLY,

  TIXML_ERROR_STRING_COUNT
 };

protected:

 static const char* SkipWhiteSpace( const char*, TiXmlEncoding encoding );

 inline static bool IsWhiteSpace( char c )
 {
  return ( isspace( (unsigned char) c ) || c == '\n' || c == '\r' );
 }
 inline static bool IsWhiteSpace( int c )
 {
  if ( c < 256 )
   return IsWhiteSpace( (char) c );
  return false;
 }
# 310 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 static const char* ReadName( const char* p, TiXmlString* name, TiXmlEncoding encoding );




 static const char* ReadText( const char* in,
         TiXmlString* text,
         bool ignoreWhiteSpace,
         const char* endTag,
         bool ignoreCase,
         TiXmlEncoding encoding );


 static const char* GetEntity( const char* in, char* value, int* length, TiXmlEncoding encoding );



 inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )
 {
  (void)( (!!(p)) || (_wassert(L"p", L"C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h", (unsigned)(329)), 0) );
  if ( encoding == TIXML_ENCODING_UTF8 )
  {
   *length = utf8ByteTable[ *((const unsigned char*)p) ];
   (void)( (!!(*length >= 0 && *length < 5)) || (_wassert(L"*length >= 0 && *length < 5", L"C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h", (unsigned)(333)), 0) );
  }
  else
  {
   *length = 1;
  }

  if ( *length == 1 )
  {
   if ( *p == '&' )
    return GetEntity( p, _value, length, encoding );
   *_value = *p;
   return p+1;
  }
  else if ( *length )
  {


   for( int i=0; p[i] && i<*length; ++i ) {
    _value[i] = p[i];
   }
   return p + (*length);
  }
  else
  {

   return 0;
  }
 }




 static bool StringEqual( const char* p,
        const char* endTag,
        bool ignoreCase,
        TiXmlEncoding encoding );

 static const char* errorString[ TIXML_ERROR_STRING_COUNT ];

 TiXmlCursor location;


 void* userData;



 static int IsAlpha( unsigned char anyByte, TiXmlEncoding encoding );
 static int IsAlphaNum( unsigned char anyByte, TiXmlEncoding encoding );
 inline static int ToLower( int v, TiXmlEncoding encoding )
 {
  if ( encoding == TIXML_ENCODING_UTF8 )
  {
   if ( v < 128 ) return tolower( v );
   return v;
  }
  else
  {
   return tolower( v );
  }
 }
 static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );

private:
 TiXmlBase( const TiXmlBase& );
 void operator=( const TiXmlBase& base );

 struct Entity
 {
  const char* str;
  unsigned int strLength;
  char chr;
 };
 enum
 {
  NUM_ENTITY = 5,
  MAX_ENTITY_LENGTH = 6

 };
 static Entity entity[ NUM_ENTITY ];
 static bool condenseWhiteSpace;
};
# 423 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlNode : public TiXmlBase
{
 friend class TiXmlDocument;
 friend class TiXmlElement;

public:
# 462 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 enum NodeType
 {
  TINYXML_DOCUMENT,
  TINYXML_ELEMENT,
  TINYXML_COMMENT,
  TINYXML_UNKNOWN,
  TINYXML_TEXT,
  TINYXML_DECLARATION,
  TINYXML_TYPECOUNT
 };

 virtual ~TiXmlNode();
# 487 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const char *Value() const { return value.c_str (); }
# 497 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const TiXmlString& ValueTStr() const { return value; }
# 508 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 void SetValue(const char * _value) { value = _value;}







 void Clear();


 TiXmlNode* Parent() { return parent; }
 const TiXmlNode* Parent() const { return parent; }

 const TiXmlNode* FirstChild() const { return firstChild; }
 TiXmlNode* FirstChild() { return firstChild; }
 const TiXmlNode* FirstChild( const char * value ) const;

 TiXmlNode* FirstChild( const char * _value ) {


  return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->FirstChild( _value ));
 }
 const TiXmlNode* LastChild() const { return lastChild; }
 TiXmlNode* LastChild() { return lastChild; }

 const TiXmlNode* LastChild( const char * value ) const;
 TiXmlNode* LastChild( const char * _value ) {
  return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->LastChild( _value ));
 }
# 562 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const TiXmlNode* IterateChildren( const TiXmlNode* previous ) const;
 TiXmlNode* IterateChildren( const TiXmlNode* previous ) {
  return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->IterateChildren( previous ) );
 }


 const TiXmlNode* IterateChildren( const char * value, const TiXmlNode* previous ) const;
 TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {
  return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->IterateChildren( _value, previous ) );
 }
# 581 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 TiXmlNode* InsertEndChild( const TiXmlNode& addThis );
# 593 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 TiXmlNode* LinkEndChild( TiXmlNode* addThis );




 TiXmlNode* InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis );




 TiXmlNode* InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis );




 TiXmlNode* ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis );


 bool RemoveChild( TiXmlNode* removeThis );


 const TiXmlNode* PreviousSibling() const { return prev; }
 TiXmlNode* PreviousSibling() { return prev; }


 const TiXmlNode* PreviousSibling( const char * ) const;
 TiXmlNode* PreviousSibling( const char *_prev ) {
  return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->PreviousSibling( _prev ) );
 }
# 631 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const TiXmlNode* NextSibling() const { return next; }
 TiXmlNode* NextSibling() { return next; }


 const TiXmlNode* NextSibling( const char * ) const;
 TiXmlNode* NextSibling( const char* _next ) {
  return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->NextSibling( _next ) );
 }





 const TiXmlElement* NextSiblingElement() const;
 TiXmlElement* NextSiblingElement() {
  return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->NextSiblingElement() );
 }





 const TiXmlElement* NextSiblingElement( const char * ) const;
 TiXmlElement* NextSiblingElement( const char *_next ) {
  return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->NextSiblingElement( _next ) );
 }







 const TiXmlElement* FirstChildElement() const;
 TiXmlElement* FirstChildElement() {
  return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement() );
 }


 const TiXmlElement* FirstChildElement( const char * _value ) const;
 TiXmlElement* FirstChildElement( const char * _value ) {
  return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement( _value ) );
 }
# 684 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 int Type() const { return type; }




 const TiXmlDocument* GetDocument() const;
 TiXmlDocument* GetDocument() {
  return const_cast< TiXmlDocument* >( (const_cast< const TiXmlNode* >(this))->GetDocument() );
 }


 bool NoChildren() const { return !firstChild; }

 virtual const TiXmlDocument* ToDocument() const { return 0; }
 virtual const TiXmlElement* ToElement() const { return 0; }
 virtual const TiXmlComment* ToComment() const { return 0; }
 virtual const TiXmlUnknown* ToUnknown() const { return 0; }
 virtual const TiXmlText* ToText() const { return 0; }
 virtual const TiXmlDeclaration* ToDeclaration() const { return 0; }

 virtual TiXmlDocument* ToDocument() { return 0; }
 virtual TiXmlElement* ToElement() { return 0; }
 virtual TiXmlComment* ToComment() { return 0; }
 virtual TiXmlUnknown* ToUnknown() { return 0; }
 virtual TiXmlText* ToText() { return 0; }
 virtual TiXmlDeclaration* ToDeclaration() { return 0; }




 virtual TiXmlNode* Clone() const = 0;
# 738 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 virtual bool Accept( TiXmlVisitor* visitor ) const = 0;

protected:
 TiXmlNode( NodeType _type );



 void CopyTo( TiXmlNode* target ) const;







 TiXmlNode* Identify( const char* start, TiXmlEncoding encoding );

 TiXmlNode* parent;
 NodeType type;

 TiXmlNode* firstChild;
 TiXmlNode* lastChild;

 TiXmlString value;

 TiXmlNode* prev;
 TiXmlNode* next;

private:
 TiXmlNode( const TiXmlNode& );
 void operator=( const TiXmlNode& base );
};
# 779 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlAttribute : public TiXmlBase
{
 friend class TiXmlAttributeSet;

public:

 TiXmlAttribute() : TiXmlBase()
 {
  document = 0;
  prev = next = 0;
 }
# 803 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 TiXmlAttribute( const char * _name, const char * _value )
 {
  name = _name;
  value = _value;
  document = 0;
  prev = next = 0;
 }

 const char* Name() const { return name.c_str(); }
 const char* Value() const { return value.c_str(); }



 int IntValue() const;
 double DoubleValue() const;


 const TiXmlString& NameTStr() const { return name; }
# 831 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 int QueryIntValue( int* _value ) const;

 int QueryDoubleValue( double* _value ) const;

 void SetName( const char* _name ) { name = _name; }
 void SetValue( const char* _value ) { value = _value; }

 void SetIntValue( int _value );
 void SetDoubleValue( double _value );
# 849 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const TiXmlAttribute* Next() const;
 TiXmlAttribute* Next() {
  return const_cast< TiXmlAttribute* >( (const_cast< const TiXmlAttribute* >(this))->Next() );
 }


 const TiXmlAttribute* Previous() const;
 TiXmlAttribute* Previous() {
  return const_cast< TiXmlAttribute* >( (const_cast< const TiXmlAttribute* >(this))->Previous() );
 }

 bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }
 bool operator<( const TiXmlAttribute& rhs ) const { return name < rhs.name; }
 bool operator>( const TiXmlAttribute& rhs ) const { return name > rhs.name; }




 virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );


 virtual void Print( FILE* cfile, int depth ) const {
  Print( cfile, depth, 0 );
 }
 void Print( FILE* cfile, int depth, TiXmlString* str ) const;



 void SetDocument( TiXmlDocument* doc ) { document = doc; }

private:
 TiXmlAttribute( const TiXmlAttribute& );
 void operator=( const TiXmlAttribute& base );

 TiXmlDocument* document;
 TiXmlString name;
 TiXmlString value;
 TiXmlAttribute* prev;
 TiXmlAttribute* next;
};
# 903 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlAttributeSet
{
public:
 TiXmlAttributeSet();
 ~TiXmlAttributeSet();

 void Add( TiXmlAttribute* attribute );
 void Remove( TiXmlAttribute* attribute );

 const TiXmlAttribute* First() const { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }
 TiXmlAttribute* First() { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }
 const TiXmlAttribute* Last() const { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }
 TiXmlAttribute* Last() { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }

 TiXmlAttribute* Find( const char* _name ) const;
 TiXmlAttribute* FindOrCreate( const char* _name );







private:


 TiXmlAttributeSet( const TiXmlAttributeSet& );
 void operator=( const TiXmlAttributeSet& );

 TiXmlAttribute sentinel;
};






class TiXmlElement : public TiXmlNode
{
public:

 TiXmlElement (const char * in_value);






 TiXmlElement( const TiXmlElement& );

 TiXmlElement& operator=( const TiXmlElement& base );

 virtual ~TiXmlElement();




 const char* Attribute( const char* name ) const;







 const char* Attribute( const char* name, int* i ) const;







 const char* Attribute( const char* name, double* d ) const;
# 985 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 int QueryIntAttribute( const char* name, int* _value ) const;

 int QueryUnsignedAttribute( const char* name, unsigned* _value ) const;




 int QueryBoolAttribute( const char* name, bool* _value ) const;

 int QueryDoubleAttribute( const char* name, double* _value ) const;

 int QueryFloatAttribute( const char* name, float* _value ) const {
  double d;
  int result = QueryDoubleAttribute( name, &d );
  if ( result == TIXML_SUCCESS ) {
   *_value = (float)d;
  }
  return result;
 }
# 1050 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 void SetAttribute( const char* name, const char * _value );
# 1070 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 void SetAttribute( const char * name, int value );




 void SetDoubleAttribute( const char * name, double value );



 void RemoveAttribute( const char * name );




 const TiXmlAttribute* FirstAttribute() const { return attributeSet.First(); }
 TiXmlAttribute* FirstAttribute() { return attributeSet.First(); }
 const TiXmlAttribute* LastAttribute() const { return attributeSet.Last(); }
 TiXmlAttribute* LastAttribute() { return attributeSet.Last(); }
# 1121 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const char* GetText() const;


 virtual TiXmlNode* Clone() const;

 virtual void Print( FILE* cfile, int depth ) const;




 virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );

 virtual const TiXmlElement* ToElement() const { return this; }
 virtual TiXmlElement* ToElement() { return this; }



 virtual bool Accept( TiXmlVisitor* visitor ) const;

protected:

 void CopyTo( TiXmlElement* target ) const;
 void ClearThis();
# 1153 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 const char* ReadValue( const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding );

private:
 TiXmlAttributeSet attributeSet;
};




class TiXmlComment : public TiXmlNode
{
public:

 TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}

 TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {
  SetValue( _value );
 }
 TiXmlComment( const TiXmlComment& );
 TiXmlComment& operator=( const TiXmlComment& base );

 virtual ~TiXmlComment() {}


 virtual TiXmlNode* Clone() const;

 virtual void Print( FILE* cfile, int depth ) const;




 virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );

 virtual const TiXmlComment* ToComment() const { return this; }
 virtual TiXmlComment* ToComment() { return this; }



 virtual bool Accept( TiXmlVisitor* visitor ) const;

protected:
 void CopyTo( TiXmlComment* target ) const;







private:

};







class TiXmlText : public TiXmlNode
{
 friend class TiXmlElement;
public:




 TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)
 {
  SetValue( initValue );
  cdata = false;
 }
 virtual ~TiXmlText() {}
# 1236 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT ) { copy.CopyTo( this ); }
 TiXmlText& operator=( const TiXmlText& base ) { base.CopyTo( this ); return *this; }


 virtual void Print( FILE* cfile, int depth ) const;


 bool CDATA() const { return cdata; }

 void SetCDATA( bool _cdata ) { cdata = _cdata; }

 virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );

 virtual const TiXmlText* ToText() const { return this; }
 virtual TiXmlText* ToText() { return this; }



 virtual bool Accept( TiXmlVisitor* content ) const;

protected :

 virtual TiXmlNode* Clone() const;
 void CopyTo( TiXmlText* target ) const;

 bool Blank() const;





private:
 bool cdata;
};
# 1285 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlDeclaration : public TiXmlNode
{
public:

 TiXmlDeclaration() : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}
# 1299 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 TiXmlDeclaration( const char* _version,
      const char* _encoding,
      const char* _standalone );

 TiXmlDeclaration( const TiXmlDeclaration& copy );
 TiXmlDeclaration& operator=( const TiXmlDeclaration& copy );

 virtual ~TiXmlDeclaration() {}


 const char *Version() const { return version.c_str (); }

 const char *Encoding() const { return encoding.c_str (); }

 const char *Standalone() const { return standalone.c_str (); }


 virtual TiXmlNode* Clone() const;

 virtual void Print( FILE* cfile, int depth, TiXmlString* str ) const;
 virtual void Print( FILE* cfile, int depth ) const {
  Print( cfile, depth, 0 );
 }

 virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );

 virtual const TiXmlDeclaration* ToDeclaration() const { return this; }
 virtual TiXmlDeclaration* ToDeclaration() { return this; }



 virtual bool Accept( TiXmlVisitor* visitor ) const;

protected:
 void CopyTo( TiXmlDeclaration* target ) const;





private:

 TiXmlString version;
 TiXmlString encoding;
 TiXmlString standalone;
};
# 1354 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlUnknown : public TiXmlNode
{
public:
 TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN ) {}
 virtual ~TiXmlUnknown() {}

 TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN ) { copy.CopyTo( this ); }
 TiXmlUnknown& operator=( const TiXmlUnknown& copy ) { copy.CopyTo( this ); return *this; }


 virtual TiXmlNode* Clone() const;

 virtual void Print( FILE* cfile, int depth ) const;

 virtual const char* Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding );

 virtual const TiXmlUnknown* ToUnknown() const { return this; }
 virtual TiXmlUnknown* ToUnknown() { return this; }



 virtual bool Accept( TiXmlVisitor* content ) const;

protected:
 void CopyTo( TiXmlUnknown* target ) const;





private:

};






class TiXmlDocument : public TiXmlNode
{
public:

 TiXmlDocument();

 TiXmlDocument( const char * documentName );






 TiXmlDocument( const TiXmlDocument& copy );
 TiXmlDocument& operator=( const TiXmlDocument& copy );

 virtual ~TiXmlDocument() {}





 bool LoadFile( TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );

 bool SaveFile() const;

 bool LoadFile( const char * filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );

 bool SaveFile( const char * filename ) const;





 bool LoadFile( FILE*, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );

 bool SaveFile( FILE* ) const;
# 1446 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 virtual const char* Parse( const char* p, TiXmlParsingData* data = 0, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING );





 const TiXmlElement* RootElement() const { return FirstChildElement(); }
 TiXmlElement* RootElement() { return FirstChildElement(); }






 bool Error() const { return error; }


 const char * ErrorDesc() const { return errorDesc.c_str (); }




 int ErrorId() const { return errorId; }
# 1477 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 int ErrorRow() const { return errorLocation.row+1; }
 int ErrorCol() const { return errorLocation.col+1; }
# 1504 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 void SetTabSize( int _tabsize ) { tabsize = _tabsize; }

 int TabSize() const { return tabsize; }




 void ClearError() { error = false;
            errorId = 0;
            errorDesc = "";
            errorLocation.row = errorLocation.col = 0;

           }


 void Print() const { Print( (__acrt_iob_func(1)), 0 ); }
# 1528 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 virtual void Print( FILE* cfile, int depth = 0 ) const;

 void SetError( int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding );

 virtual const TiXmlDocument* ToDocument() const { return this; }
 virtual TiXmlDocument* ToDocument() { return this; }



 virtual bool Accept( TiXmlVisitor* content ) const;

protected :

 virtual TiXmlNode* Clone() const;




private:
 void CopyTo( TiXmlDocument* target ) const;

 bool error;
 int errorId;
 TiXmlString errorDesc;
 int tabsize;
 TiXmlCursor errorLocation;
 bool useMicrosoftBOM;
};
# 1638 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlHandle
{
public:

 TiXmlHandle( TiXmlNode* _node ) { this->node = _node; }

 TiXmlHandle( const TiXmlHandle& ref ) { this->node = ref.node; }
 TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }


 TiXmlHandle FirstChild() const;

 TiXmlHandle FirstChild( const char * value ) const;

 TiXmlHandle FirstChildElement() const;

 TiXmlHandle FirstChildElement( const char * value ) const;




 TiXmlHandle Child( const char* value, int index ) const;



 TiXmlHandle Child( int index ) const;




 TiXmlHandle ChildElement( const char* value, int index ) const;




 TiXmlHandle ChildElement( int index ) const;
# 1685 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
 TiXmlNode* ToNode() const { return node; }


 TiXmlElement* ToElement() const { return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }


 TiXmlText* ToText() const { return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }


 TiXmlUnknown* ToUnknown() const { return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }




 TiXmlNode* Node() const { return ToNode(); }



 TiXmlElement* Element() const { return ToElement(); }



 TiXmlText* Text() const { return ToText(); }



 TiXmlUnknown* Unknown() const { return ToUnknown(); }

private:
 TiXmlNode* node;
};
# 1737 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/TinyXML/tinyxml.h"
class TiXmlPrinter : public TiXmlVisitor
{
public:
 TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),
      buffer(), indent( "    " ), lineBreak( "\n" ) {}

 virtual bool VisitEnter( const TiXmlDocument& doc );
 virtual bool VisitExit( const TiXmlDocument& doc );

 virtual bool VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute );
 virtual bool VisitExit( const TiXmlElement& element );

 virtual bool Visit( const TiXmlDeclaration& declaration );
 virtual bool Visit( const TiXmlText& text );
 virtual bool Visit( const TiXmlComment& comment );
 virtual bool Visit( const TiXmlUnknown& unknown );




 void SetIndent( const char* _indent ) { indent = _indent ? _indent : "" ; }

 const char* Indent() { return indent.c_str(); }




 void SetLineBreak( const char* _lineBreak ) { lineBreak = _lineBreak ? _lineBreak : ""; }

 const char* LineBreak() { return lineBreak.c_str(); }




 void SetStreamPrinting() { indent = "";
               lineBreak = "";
             }

 const char* CStr() { return buffer.c_str(); }

 size_t Size() { return buffer.size(); }






private:
 void DoIndent() {
  for( int i=0; i<depth; ++i )
   buffer += indent;
 }
 void DoLineBreak() {
  buffer += lineBreak;
 }

 int depth;
 bool simpleTextPrint;
 TiXmlString buffer;
 TiXmlString indent;
 TiXmlString lineBreak;
};



#pragma warning(pop)
# 10 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/level.hpp" 2


struct Object
{
    int GetPropertyInt(std::string name);
    float GetPropertyFloat(std::string name);
    std::string GetPropertyString(std::string name);

    std::string name;
    std::string type;
    sf::Rect<float> rect;
    std::map<std::string, std::string> properties;

 sf::Sprite sprite;
};

struct Layer
{
    int opacity;
    std::vector<sf::Sprite> tiles;
};

class Level
{
public:
 int width;
 int height;
 int tileWidth;
 int tileHeight;

 bool LoadFromFile(std::string filename);
 std::vector<Object> Level::GetMatchObjects(int from, int to, std::string name);
    Object GetObject(std::string name);
    std::vector<Object> GetObjects(std::string name);
 std::vector<Object> GetAllObjects();
    void Draw(sf::RenderWindow &window);
 sf::Vector2i GetTileSize();

private:
  std::vector<Object> objects;
    int firstTileID;
    sf::Rect<float> drawingBounds;
    sf::Texture tilesetImage;

    std::vector<Layer> layers;
};
# 5 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/enemy.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/visual.h" 1


# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/animation.h" 1

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/consts_and_enums.h" 1



 const unsigned int WindowWidth = 800;
 const unsigned int WindowHeight = 600;

 const float FallingSpeedCoef = 1.6f;
 const float JumpingSpeedCoef = 1.3f;

 const float ForceOfGravity = 200.f;

 const int XEnemySize = 48;
 const int YEnemySize = 84;

 const sf::Time TimePerFrame = sf::seconds(1.f / 60.f);

 enum State {
  LEFT,
  RIGHT,
  NONE
 };

 enum Type {
  PLAYER,
  SPEARMAN,
  SWORDSMAN
 };
# 2 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/animation.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/frame.h" 1

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/frame_rect.h" 1


# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/using_json.h" 1

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit.h" 1
# 13 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit.h"
# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h" 1
# 16 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h"
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cassert" 1 3



# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1 3
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 3
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 3
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 3
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 3
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 3
#pragma pack(pop)
# 4 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\cassert" 2 3
# 16 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 1
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/user.hpp" 1
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/select_compiler_config.hpp" 1
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/compiler/gcc_xml.hpp" 1
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/select_stdlib_config.hpp" 1
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/stdlib/dinkumware.hpp" 1
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/select_platform_config.hpp" 1
# 53 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/platform/win32.hpp" 1
# 57 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/suffix.hpp" 1
# 482 "C:/Programing/Libs/boost_1_59_0\\boost/config/suffix.hpp"
namespace boost{




   typedef long long long_long_type;
   typedef unsigned long long ulong_long_type;

}
# 61 "C:/Programing/Libs/boost_1_59_0\\boost/config.hpp" 2
# 19 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp" 1
# 193 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/limits.hpp" 1
# 193 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp" 2




namespace boost
{
# 211 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
     typedef signed char int8_t;
     typedef signed char int_least8_t;
     typedef signed char int_fast8_t;
     typedef unsigned char uint8_t;
     typedef unsigned char uint_least8_t;
     typedef unsigned char uint_fast8_t;
# 234 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
     typedef short int16_t;
     typedef short int_least16_t;
     typedef short int_fast16_t;
     typedef unsigned short uint16_t;
     typedef unsigned short uint_least16_t;
     typedef unsigned short uint_fast16_t;
# 263 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
     typedef int int32_t;
     typedef int int_least32_t;
     typedef int int_fast32_t;
     typedef unsigned int uint32_t;
     typedef unsigned int uint_least32_t;
     typedef unsigned int uint_fast32_t;
# 309 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
     typedef ::boost::long_long_type intmax_t;
     typedef ::boost::ulong_long_type uintmax_t;
     typedef ::boost::long_long_type int64_t;
     typedef ::boost::long_long_type int_least64_t;
     typedef ::boost::long_long_type int_fast64_t;
     typedef ::boost::ulong_long_type uint64_t;
     typedef ::boost::ulong_long_type uint_least64_t;
     typedef ::boost::ulong_long_type uint_fast64_t;
# 359 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
}
# 379 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp"
namespace boost {
    using ::intptr_t;
    using ::uintptr_t;
}
# 20 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/shared_ptr.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/shared_ptr.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/config/no_tr1/memory.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/config/no_tr1/memory.hpp"
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\memory" 1 3
# 16 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\memory" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 28197)

namespace std {
template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty> >
 class unique_ptr;


class bad_weak_ptr
 : public ::std:: exception
 {
public:
 explicit bad_weak_ptr(const char * = 0) noexcept
  {
  }

 virtual const char * what() const throw()
  {
  return ("bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() noexcept = 0;
 virtual void _Delete_this() noexcept = 0;

private:
 _Atomic_counter_t _Uses;
 _Atomic_counter_t _Weaks;

protected:
 _Ref_count_base()
  {
  _Init_atomic_counter(_Uses, 1);
  _Init_atomic_counter(_Weaks, 1);
  }

public:
 virtual ~_Ref_count_base() noexcept
  {
  }

 bool _Incref_nz()
  {
  for (; ; )
   {

   _Atomic_integral_t _Count =
    static_cast<volatile _Atomic_counter_t&>(_Uses);

   if (_Count == 0)
    return (false);

   if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
     reinterpret_cast<volatile long *>(&_Uses),
     _Count + 1, _Count)) == _Count)
    return (true);
# 95 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\memory" 3
   }
  }

 void _Incref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
  }

 void _Incwref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
  }

 void _Decref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
   _Delete_this();
  }

 long _Use_count() const noexcept
  {
  return (_Get_atomic_count(_Uses));
  }

 bool _Expired() const noexcept
  {
  return (_Use_count() == 0);
  }

 virtual void *_Get_deleter(const type_info&) const noexcept
  {
  return (0);
  }
 };


template<class _Ty>
 class _Ref_count
 : public _Ref_count_base
 {
public:
 _Ref_count(_Ty *_Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy() noexcept
  {
  delete _Ptr;
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 _Ty * _Ptr;
 };


template<class _Ty,
 class _Dx>
 class _Ref_count_del
 : public _Ref_count_base
 {
public:
 _Ref_count_del(_Ty *_Px, _Dx _Dt)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt, _Px)
  {
  }

 virtual void *_Get_deleter(
  const type_info& _Typeid) const noexcept
  {
  return ((void *)(_Typeid == typeid(_Dx)
   ? ::std:: addressof(_Mypair._Get_first()) : 0));
  }

private:
 virtual void _Destroy() noexcept
  {
  _Mypair._Get_first()(_Mypair._Get_second());
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 _Compressed_pair<_Dx, _Ty *> _Mypair;
 };


template<class _Ty,
 class _Dx,
 class _Alloc>
 class _Ref_count_del_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myt;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;

 _Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, const _Alloc& _Ax)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt,
   _One_then_variadic_args_t(), _Ax, _Px)
  {
  }

 virtual void *_Get_deleter(
  const type_info& _Typeid) const noexcept
  {
  return ((void *)(_Typeid == typeid(_Dx)
   ? ::std:: addressof(_Mypair._Get_first()) : 0));
  }

private:
 virtual void _Destroy() noexcept
  {
  _Mypair._Get_first()(_Mypair._Get_second()._Get_second());
  }

 virtual void _Delete_this() noexcept
  {
  _Myalty _Al = _Mypair._Get_second()._Get_first();
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Ty *> > _Mypair;
 };


template<class _Ty>
 class weak_ptr;
template<class _Ty>
 class shared_ptr;
template<class _Ty>
 class enable_shared_from_this;

template<class _Ty1,
 class _Ty2>
 void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
  _Ref_count_base *);

template<class _Ty>
 inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
  typename _Ty::_EStype * = 0)
 {
 if (_Ptr)
  _Do_enable(_Ptr,
   (enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
 }

inline void _Enable_shared(const volatile void *, const volatile void *)
 {
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 typedef _Ptr_base<_Ty> _Myt;
 typedef _Ty element_type;

 constexpr _Ptr_base() noexcept
  : _Ptr(0), _Rep(0)
  {
  }

 _Ptr_base(_Myt&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 template<class _Ty2>
  _Ptr_base(_Ptr_base<_Ty2>&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: move(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Swap(_Right);
  }

 long use_count() const noexcept
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 void _Swap(_Ptr_base& _Right) noexcept
  {
  ::std:: swap(_Rep, _Right._Rep);
  ::std:: swap(_Ptr, _Right._Ptr);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const
  {
  return (_Rep < _Right._Rep);
  }

 void *_Get_deleter(const type_info& _Typeid) const noexcept
  {
  return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
  }

 _Ty *_Get() const noexcept
  {
  return (_Ptr);
  }

 bool _Expired() const noexcept
  {
  return (!_Rep || _Rep->_Expired());
  }

 void _Decref()
  {
  if (_Rep != 0)
   _Rep->_Decref();
  }

 void _Reset()
  {
  _Reset(0, 0);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
  {
  _Reset(_Other._Ptr, _Other._Rep, _Throw);
  }


 template<class _Ty2>
  void _Reset(auto_ptr<_Ty2>&& _Other)
  {
  _Ty2 *_Px = _Other.get();
  _Reset0(_Px, new _Ref_count<_Ty>(_Px));
  _Other.release();
  _Enable_shared(_Px, _Rep);
  }


 template<class _Ty2>
  void _Reset(_Ty *_Other_ptr, const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other_ptr, _Other._Rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incref();
  _Reset0(_Other_ptr, _Other_rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
  {


  if (_Other_rep && _Other_rep->_Incref_nz())
   _Reset0(_Other_ptr, _Other_rep);
  else if (_Throw)
   throw bad_weak_ptr(0);
  }

 void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Rep != 0)
   _Rep->_Decref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Decwref()
  {
  if (_Rep != 0)
   _Rep->_Decwref();
  }

 void _Resetw()
  {
  _Resetw((_Ty *)0, 0);
  }

 template<class _Ty2>
  void _Resetw(const _Ptr_base<_Ty2>& _Other)
  {
  _Resetw(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  _Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
  }

 template<class _Ty2>
  void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incwref();
  if (_Rep != 0)
   _Rep->_Decwref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

private:
 _Ty *_Ptr;
 _Ref_count_base *_Rep;
 template<class _Ty0>
  friend class _Ptr_base;
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef shared_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 constexpr shared_ptr() noexcept
  {
  }

 template<class _Ux>
  explicit shared_ptr(_Ux *_Px)
  {
  _Resetp(_Px);
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(_Ux *_Px, _Dx _Dt)
  {
  _Resetp(_Px, _Dt);
  }

 constexpr shared_ptr(nullptr_t) noexcept
  {
  }

 template<class _Dx>
  shared_ptr(nullptr_t, _Dx _Dt)
  {
  _Resetp((_Ty *)0, _Dt);
  }

 template<class _Dx,
  class _Alloc>
  shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp((_Ty *)0, _Dt, _Ax);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp(_Px, _Dt, _Ax);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) noexcept
  {
  this->_Reset(_Px, _Right);
  }

 shared_ptr(const _Myt& _Other) noexcept
  {
  this->_Reset(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
   bool _Throw = true)
  {
  this->_Reset(_Other, _Throw);
  }


 template<class _Ty2>
  shared_ptr(auto_ptr<_Ty2>&& _Other)
  {
  this->_Reset(::std:: move(_Other));
  }


 shared_ptr(_Myt&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
  : _Mybase(::std:: move(_Right))
  {
  }


 template<class _Ux,
  class _Dx,
  class = typename enable_if<is_convertible<
   typename unique_ptr<_Ux, _Dx>::pointer, _Ty *>::value,
   void>::type>
  shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
  {
  _Resetp(_Right.release(), _Right.get_deleter());
  }

 template<class _Ux,
  class _Dx>
  _Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(shared_ptr<_Ty2>&& _Right) noexcept
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 ~shared_ptr() noexcept
  {
  this->_Decref();
  }

 _Myt& operator=(const _Myt& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }


 template<class _Ty2>
  _Myt& operator=(auto_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }


 void reset() noexcept
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux *_Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux *_Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }

 void swap(_Myt& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 _Ty *get() const noexcept
  {
  return (this->_Get());
  }

 typename add_lvalue_reference<_Ty>::type operator*() const noexcept
  {
  return (*this->_Get());
  }

 _Ty *operator->() const noexcept
  {
  return (this->_Get());
  }

 bool unique() const noexcept
  {
  return (this->use_count() == 1);
  }

 explicit operator bool() const noexcept
  {
  return (this->_Get() != 0);
  }

private:
 template<class _Ux>
  void _Resetp(_Ux *_Px)
  {
  try {
  _Resetp0(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _Ux,
  class _Dx>
  void _Resetp(_Ux *_Px, _Dx _Dt)
  {
  try {
  _Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
  typedef _Wrap_alloc<_Alloc> _Alref0;
  typename _Alref0::template rebind<_Refd>::other _Alref(_Ax);

  try {
  _Refd *_Pref = _Alref.allocate(1);
  _Alref.construct(_Pref, _Px, _Dt, _Ax);
  _Resetp0(_Px, _Pref);
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

public:
 template<class _Ux>
  void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
  {
  this->_Reset0(_Px, _Rx);
  _Enable_shared(_Px, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (less<decltype(_Always_false<_Ty1>::value
  ? _Left.get() : _Right.get())>()(
   _Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator==(const shared_ptr<_Ty>& _Left,
  nullptr_t) noexcept
 {
 return (_Left.get() == (_Ty *)0);
 }

template<class _Ty>
 bool operator==(nullptr_t,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return ((_Ty *)0 == _Right.get());
 }

template<class _Ty>
 bool operator!=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator!=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator<(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (less<_Ty *>()(_Left.get(), (_Ty *)0));
 }

template<class _Ty>
 bool operator<(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (less<_Ty *>()((_Ty *)0, _Right.get()));
 }

template<class _Ty>
 bool operator>=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator>(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator<=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator<=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) noexcept
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
 operator<<(basic_ostream<_Elem, _Traits>& _Out,
  const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = static_cast<_Elem1 *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = const_cast<_Elem1 *>(_Other.get());
 return (shared_ptr<_Ty1>(_Other, _Ptr));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
 {
 typedef typename shared_ptr<_Ty1>::element_type _Elem1;
 _Elem1 *_Ptr = dynamic_cast<_Elem1 *>(_Other.get());
 if (_Ptr)
  return (shared_ptr<_Ty1>(_Other, _Ptr));
 else
  return (shared_ptr<_Ty1>());
 }

template<class _Dx,
 class _Ty>
 _Dx *get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
 {
 return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
 }


template<class _Ty>
 class _Ref_count_obj
 : public _Ref_count_base
 {
public:
 template<class... _Types>
  _Ref_count_obj(_Types&&... _Args)
  : _Ref_count_base()
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy() noexcept
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept
  {
  delete this;
  }

 typename aligned_union<1, _Ty>::type _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myt;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
 typedef typename aligned_union<1, _Ty>::type _Mystoragety;

 template<class... _Types>
  _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
  : _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
  {
  ::new ((void *)_Getptr()) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Mypair._Get_second());
  }

private:
 virtual void _Destroy() noexcept
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this() noexcept
  {
  _Myalty _Al = _Mypair._Get_first();
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Myalty, _Mystoragety> _Mypair;
 };


template<class _Ty,
 class... _Types> inline
  shared_ptr<_Ty> make_shared(_Types&&... _Args)
 {
 _Ref_count_obj<_Ty> *_Rx =
  new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc,
 class... _Types> inline
 shared_ptr<_Ty> allocate_shared(
  const _Alloc& _Al_arg, _Types&&... _Args)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typedef _Wrap_alloc<_Alloc> _Alref0;
 typename _Alref0::template rebind<_Refoa>::other _Alref(_Al_arg);

 _Refoa *_Rx = _Alref.allocate(1);

 try {
  _Alref.construct(_Rx, _Al_arg, ::std:: forward<_Types>(_Args)...);
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }



template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef weak_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 constexpr weak_ptr() noexcept
  {
  }

 weak_ptr(const weak_ptr& _Other) noexcept
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
  {
  this->_Resetw(_Other.lock());
  }

 weak_ptr(_Myt&& _Other) noexcept
  : _Mybase(::std:: move(_Other))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
  {
  this->_Resetw(_Other.lock());
  _Other.reset();
  }

 ~weak_ptr() noexcept
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right) noexcept
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
  {
  this->_Resetw(_Right.lock());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(weak_ptr<_Ty2>&& _Right) noexcept
  {
  weak_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
  {
  this->_Resetw(_Right);
  return (*this);
  }

 void reset() noexcept
  {
  this->_Resetw();
  }

 void swap(weak_ptr& _Other) noexcept
  {
  this->_Swap(_Other);
  }

 bool expired() const noexcept
  {
  return (this->_Expired());
  }

 shared_ptr<_Ty> lock() const noexcept
  {
  return (shared_ptr<_Ty>(*this, false));
  }
 };

template<class _Ty>
 void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) noexcept
 {
 _W1.swap(_W2);
 }


template<class _Ty>
 class enable_shared_from_this
 {
public:
 typedef _Ty _EStype;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

protected:
 constexpr enable_shared_from_this() noexcept
  {
  }

 enable_shared_from_this(const enable_shared_from_this&) noexcept
  {
  }

 enable_shared_from_this&
  operator=(const enable_shared_from_this&) noexcept
  {
  return (*this);
  }

 ~enable_shared_from_this() noexcept
  {
  }

private:
 template<class _Ty1,
  class _Ty2>
  friend void _Do_enable(
   _Ty1 *,
   enable_shared_from_this<_Ty2>*,
   _Ref_count_base *);

 weak_ptr<_Ty> _Wptr;
 };

template<class _Ty1,
 class _Ty2>
 inline void _Do_enable(
  _Ty1 *_Ptr,
  enable_shared_from_this<_Ty2> *_Es,
  _Ref_count_base *_Refptr)
 {
 _Es->_Wptr._Resetw(_Ptr, _Refptr);
 }
}

namespace std {



template<class _Ty>
 struct default_delete
 {
 constexpr default_delete() noexcept = default;

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  default_delete(const default_delete<_Ty2>&) noexcept
  {
  }

 void operator()(_Ty *_Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 constexpr default_delete() noexcept = default;

 template<class _Uty,
  class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
   void>::type>
  default_delete(const default_delete<_Uty[]>&) noexcept
  {
  }

 template<class _Uty,
  class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
   void>::type>
  void operator()(_Uty *_Ptr) const noexcept
  {
  static_assert(0 < sizeof (_Uty),
   "can't delete an incomplete type");
  delete[] _Ptr;
  }
 };


template<class _Val,
 class _Ty>
 struct _Get_deleter_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Dx>
 class _Unique_ptr_base
 {
public:
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
  : _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
  {
  }

 template<class _Ptr2>
  constexpr _Unique_ptr_base(_Ptr2 _Ptr)
  : _Mypair(_Zero_then_variadic_args_t(), _Ptr)
  {
  }

 _Dx& get_deleter() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Dx& get_deleter() const noexcept
  {
  return (_Mypair._Get_first());
  }

 pointer& _Myptr() noexcept
  {
  return (_Mypair._Get_second());
  }

 const pointer& _Myptr() const noexcept
  {
  return (_Mypair._Get_second());
  }

 _Compressed_pair<_Dx, pointer> _Mypair;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef unique_ptr<_Ty, _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 constexpr unique_ptr() noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 constexpr unique_ptr(nullptr_t) noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 explicit unique_ptr(pointer _Ptr) noexcept
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) noexcept
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2,
  class = typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value
   && (is_reference<_Dx>::value
    ? is_same<_Dx2, _Dx>::value
    : is_convertible<_Dx2, _Dx>::value),
   void>::type>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }


 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
   && is_same<_Dx, default_delete<_Ty> >::value,
   void>::type>
  unique_ptr(auto_ptr<_Ty2>&& _Right) noexcept
   : _Mybase(_Right.release())
  {
  }


 template<class _Ty2,
  class _Dx2>
  typename enable_if<!is_array<_Ty2>::value
   && is_assignable<_Dx&, _Dx2&&>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value,
   _Myt&>::type
  operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(),
   _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  if (get() != pointer())
   this->get_deleter()(get());
  }

 typename add_lvalue_reference<_Ty>::type operator*() const
  {
  return (*get());
  }

 pointer operator->() const noexcept
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : public _Unique_ptr_base<_Ty, _Dx>
 {
public:
 typedef unique_ptr<_Ty[], _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 constexpr unique_ptr() noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 template<class _Uty>
  using _Enable_ctor_reset = enable_if_t<
   is_same<_Uty, pointer>::value
   || (is_same<pointer, element_type *>::value
   && is_pointer<_Uty>::value
   && is_convertible<
    remove_pointer_t<_Uty>(*)[],
    element_type(*)[]
   >::value)>;

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 explicit unique_ptr(_Uty _Ptr) noexcept
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 unique_ptr(_Uty _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
  : _Mybase(_Ptr, _Dt)
  {
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 unique_ptr(_Uty _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) noexcept
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) noexcept
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 _Myt& operator=(_Myt&& _Right) noexcept
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 template<class _Uty,
  class _Ex,
  bool _More,
  class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
  class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
  using _Enable_conversion = enable_if_t<
   is_array<_Uty>::value
   && is_same<pointer, element_type *>::value
   && is_same<_UP_pointer, _UP_element_type *>::value
   && is_convertible<_UP_element_type(*)[], element_type(*)[]>::value
   && _More>;

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_reference<_Dx>::value
   ? is_same<_Ex, _Dx>::value
   : is_convertible<_Ex, _Dx>::value> >
  unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
   : _Mybase(_Right.release(),
    ::std:: forward<_Ex>(_Right.get_deleter()))
  {
  }

 template<class _Uty,
  class _Ex,
  class = _Enable_conversion<_Uty, _Ex,
   is_assignable<_Dx&, _Ex&&>::value> >
  _Myt& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
  return (*this);
  }

 constexpr unique_ptr(nullptr_t) noexcept
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  reset();
  return (*this);
  }

 void reset(nullptr_t = nullptr_t()) noexcept
  {
  reset(pointer());
  }

 void swap(_Myt& _Right) noexcept
  {
  _Swap_adl(this->_Myptr(), _Right._Myptr());
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() noexcept
  {
  _Delete();
  }

 _Ty& operator[](size_t _Idx) const
  {
  return (get()[_Idx]);
  }

 pointer get() const noexcept
  {
  return (this->_Myptr());
  }

 explicit operator bool() const noexcept
  {
  return (get() != pointer());
  }

 pointer release() noexcept
  {
  pointer _Ans = get();
  this->_Myptr() = pointer();
  return (_Ans);
  }

 template<class _Uty,
  class = _Enable_ctor_reset<_Uty> >
 void reset(_Uty _Ptr) noexcept
  {
  pointer _Old = get();
  this->_Myptr() = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;

 _Myt& operator=(const _Myt&) = delete;

private:
 void _Delete()
  {
  if (get() != pointer())
   this->get_deleter()(get());
  }
 };



template<class _Ty,
 class... _Types> inline
 typename enable_if<!is_array<_Ty>::value,
  unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
 {
 return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
 }

template<class _Ty> inline
 typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
  unique_ptr<_Ty> >::type make_unique(size_t _Size)
 {
 typedef typename remove_extent<_Ty>::type _Elem;
 return (unique_ptr<_Ty>(new _Elem[_Size]()));
 }

template<class _Ty,
 class... _Types>
 typename enable_if<extent<_Ty>::value != 0,
  void>::type make_unique(_Types&&...) = delete;


template<class _Ty,
 class _Dx>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
 typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
 typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
 return (less<_Common>()(_Left.get(), _Right.get()));

 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t) noexcept
 {
 return (!_Left);
 }

template<class _Ty,
 class _Dx>
 bool operator==(nullptr_t,
  const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!_Right);
 }

template<class _Ty,
 class _Dx>
 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator!=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right) noexcept
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left.get(), _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left, _Right.get()));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator>(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator<=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Right < _Left));
 }



enum class pointer_safety {
 relaxed,
 preferred,
 strict
 };

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty *undeclare_reachable(_Ty *_Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline _Pointer_safety get_pointer_safety() noexcept
 {
 return (pointer_safety::relaxed);
 }

namespace tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}


template<class _Ty>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty> >
 {
 typedef shared_ptr<_Ty> first_argument_type;
 typedef shared_ptr<_Ty> second_argument_type;
 typedef bool result_type;

 bool operator()(const shared_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty> >
 {
 typedef weak_ptr<_Ty> first_argument_type;
 typedef weak_ptr<_Ty> second_argument_type;
 typedef bool result_type;

 bool operator()(const weak_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };


template<class _Ty,
 class _Dx>
 struct hash<unique_ptr<_Ty, _Dx> >
 {
 typedef unique_ptr<_Ty, _Dx> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  typedef typename argument_type::pointer _Ptrtype;
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };

template<class _Ty>
 struct hash<shared_ptr<_Ty> >
 {
 typedef shared_ptr<_Ty> argument_type;
 typedef size_t result_type;

 size_t operator()(const argument_type& _Keyval) const
  {
  return (hash<_Ty *>()(_Keyval.get()));
  }
 };


inline void *align(size_t _Bound, size_t _Size,
 void *& _Ptr, size_t& _Space) noexcept
 {
 size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
 if (0 < _Off)
  _Off = _Bound - _Off;
 if (_Space < _Off || _Space - _Off < _Size)
  return (0);
 else
  {
  _Ptr = (char *)_Ptr + _Off;
  _Space -= _Off;
  return (_Ptr);
  }
 }


struct _Shared_ptr_spin_lock
 {
 _Shared_ptr_spin_lock()
  {
  _Lock_shared_ptr_spin_lock();
  }

 ~_Shared_ptr_spin_lock() noexcept
  {
  _Unlock_shared_ptr_spin_lock();
  }
 };

template<class _Ty> inline
 bool atomic_is_lock_free(const shared_ptr<_Ty> *)
 {
 return (false);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 return (_Result);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
 {
 return (atomic_load_explicit(_Ptr, memory_order_seq_cst));
 }

template<class _Ty> inline
 void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 }

template<class _Ty> inline
 void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 atomic_store_explicit(_Ptr, _Other, memory_order_seq_cst);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 return (_Other);
 }

template<class _Ty> inline
 shared_ptr<_Ty> atomic_exchange(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 return (atomic_exchange_explicit(_Ptr, _Other, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 shared_ptr<_Ty> _Old_exp;
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr->get() == _Exp->get()
  && !_Ptr->owner_before(*_Exp)
  && !_Exp->owner_before(*_Ptr);
 if (_Success)
  _Ptr->swap(_Value);
 else
  {
  _Exp->swap(_Old_exp);
  *_Exp = *_Ptr;
  }
 return (_Success);
 }

template<class _Ty> inline
 bool atomic_compare_exchange_weak(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
   shared_ptr<_Ty> _Value)
 {
 return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }

template<class _Ty> inline
 bool atomic_compare_exchange_strong(
 shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
  shared_ptr<_Ty> _Value)
 {
 return (atomic_compare_exchange_strong_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }
}

#pragma warning(pop)
#pragma pack(pop)
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/config/no_tr1/memory.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 1
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp"
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/checked_delete.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/checked_delete.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/core/checked_delete.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/core/checked_delete.hpp"
namespace boost
{



template<class T> inline void checked_delete(T * x)
{

    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
}

template<class T> inline void checked_array_delete(T * x)
{
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete [] x;
}

template<class T> struct checked_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {

        boost::checked_delete(x);
    }
};

template<class T> struct checked_array_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {
        boost::checked_array_delete(x);
    }
};

}
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/checked_delete.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/throw_exception.hpp" 1






#pragma warning(push, 1)
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/throw_exception.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/detail/workaround.hpp" 1
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/throw_exception.hpp" 2
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/throw_exception.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/exception/exception.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/exception/exception.hpp"
#pragma warning(push, 1)


namespace
boost
    {
    namespace
    exception_detail
        {
        template <class T>
        class
        refcount_ptr
            {
            public:

            refcount_ptr():
                px_(0)
                {
                }

            ~refcount_ptr()
                {
                release();
                }

            refcount_ptr( refcount_ptr const & x ):
                px_(x.px_)
                {
                add_ref();
                }

            refcount_ptr &
            operator=( refcount_ptr const & x )
                {
                adopt(x.px_);
                return *this;
                }

            void
            adopt( T * px )
                {
                release();
                px_=px;
                add_ref();
                }

            T *
            get() const
                {
                return px_;
                }

            private:

            T * px_;

            void
            add_ref()
                {
                if( px_ )
                    px_->add_ref();
                }

            void
            release()
                {
                if( px_ && px_->release() )
                    px_=0;
                }
            };
        }



    template <class Tag,class T>
    class error_info;

    typedef error_info<struct throw_function_,char const *> throw_function;
    typedef error_info<struct throw_file_,char const *> throw_file;
    typedef error_info<struct throw_line_,int> throw_line;

    template <>
    class
    error_info<throw_function_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_file_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_line_,int>
        {
        public:
        typedef int value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };






    class exception;






    template <class T>
    class shared_ptr;

    namespace
    exception_detail
        {
        class error_info_base;
        struct type_info_;

        struct
        error_info_container
            {
            virtual char const * diagnostic_information( char const * ) const = 0;
            virtual shared_ptr<error_info_base> get( type_info_ const & ) const = 0;
            virtual void set( shared_ptr<error_info_base> const &, type_info_ const & ) = 0;
            virtual void add_ref() const = 0;
            virtual bool release() const = 0;
            virtual refcount_ptr<exception_detail::error_info_container> clone() const = 0;

            protected:

            ~error_info_container() throw()
                {
                }
            };

        template <class>
        struct get_info;

        template <>
        struct get_info<throw_function>;

        template <>
        struct get_info<throw_file>;

        template <>
        struct get_info<throw_line>;

        char const * get_diagnostic_information( exception const &, char const * );

        void copy_boost_exception( exception *, exception const * );

        template <class E,class Tag,class T>
        E const & set_info( E const &, error_info<Tag,T> const & );

        template <class E>
        E const & set_info( E const &, throw_function const & );

        template <class E>
        E const & set_info( E const &, throw_file const & );

        template <class E>
        E const & set_info( E const &, throw_line const & );
        }






    class
    exception
        {

        public:
        template <class Tag> void set( typename Tag::type const & );
        template <class Tag> typename Tag::type const * get() const;


        protected:

        exception():
            throw_function_(0),
            throw_file_(0),
            throw_line_(-1)
            {
            }
# 237 "C:/Programing/Libs/boost_1_59_0\\boost/exception/exception.hpp"
        virtual ~exception() throw()

            = 0

            ;




        private:

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_function const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_file const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_line const & );

        template <class E,class Tag,class T>
        friend E const & exception_detail::set_info( E const &, error_info<Tag,T> const & );

        friend char const * exception_detail::get_diagnostic_information( exception const &, char const * );

        template <class>
        friend struct exception_detail::get_info;
        friend struct exception_detail::get_info<throw_function>;
        friend struct exception_detail::get_info<throw_file>;
        friend struct exception_detail::get_info<throw_line>;
        friend void exception_detail::copy_boost_exception( exception *, exception const * );

        mutable exception_detail::refcount_ptr<exception_detail::error_info_container> data_;
        mutable char const * throw_function_;
        mutable char const * throw_file_;
        mutable int throw_line_;
        };






    inline
    exception::
    ~exception() throw()
        {
        }

    namespace
    exception_detail
        {
        template <class E>
        E const &
        set_info( E const & x, throw_function const & y )
            {
            x.throw_function_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_file const & y )
            {
            x.throw_file_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_line const & y )
            {
            x.throw_line_=y.v_;
            return x;
            }
        }



    namespace
    exception_detail
        {





        template <class T>
        struct
        error_info_injector:
            public T,
            public exception
            {
            explicit
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
                {
                }
            };






        struct large_size { char c[256]; };
        large_size dispatch_boost_exception( exception const * );

        struct small_size { };
        small_size dispatch_boost_exception( void const * );

        template <class,int>
        struct enable_error_info_helper;

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(large_size)>
            {
            typedef T type;
            };

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(small_size)>
            {
            typedef error_info_injector<T> type;
            };

        template <class T>
        struct
        enable_error_info_return_type
            {
            typedef typename enable_error_info_helper<T,sizeof(exception_detail::dispatch_boost_exception(static_cast<T *>(0)))>::type type;
            };
        }

    template <class T>
    inline
    typename
    exception_detail::enable_error_info_return_type<T>::type
    enable_error_info( T const & x )
        {
        typedef typename exception_detail::enable_error_info_return_type<T>::type rt;
        return rt(x);
        }



    namespace
    exception_detail
        {





        class
        clone_base
            {
            public:

            virtual clone_base const * clone() const = 0;
            virtual void rethrow() const = 0;

            virtual
            ~clone_base() throw()
                {
                }
            };






        inline
        void
        copy_boost_exception( exception * a, exception const * b )
            {
            refcount_ptr<error_info_container> data;
            if( error_info_container * d=b->data_.get() )
                data = d->clone();
            a->throw_file_ = b->throw_file_;
            a->throw_line_ = b->throw_line_;
            a->throw_function_ = b->throw_function_;
            a->data_ = data;
            }

        inline
        void
        copy_boost_exception( void *, void const * )
            {
            }

        template <class T>
        class
        clone_impl:
            public T,
            public virtual clone_base
            {
            struct clone_tag { };
            clone_impl( clone_impl const & x, clone_tag ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            public:

            explicit
            clone_impl( T const & x ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            ~clone_impl() throw()
                {
                }

            private:

            clone_base const *
            clone() const
                {
                return new clone_impl(*this,clone_tag());
                }

            void
            rethrow() const
                {
                throw*this;
                }
            };
        }

    template <class T>
    inline
    exception_detail::clone_impl<T>
    enable_current_exception( T const & x )
        {
        return exception_detail::clone_impl<T>(x);
        }
    }


#pragma warning(pop)
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/throw_exception.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/current_function.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/current_function.hpp"
namespace boost
{

namespace detail
{

inline void current_function_helper()
{
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/current_function.hpp"
}

}

}
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/throw_exception.hpp" 2








namespace boost
{






inline void throw_exception_assert_compatibility( std::exception const & ) { }

template<class E> __declspec(noreturn) inline void throw_exception( E const & e )
{


    throw_exception_assert_compatibility(e);


    throw enable_current_exception(enable_error_info(e));



}




    namespace
    exception_detail
    {
        template <class E>
        __declspec(noreturn)
        void
        throw_exception_( E const & x, char const * current_function, char const * file, int line )
        {
            boost::throw_exception(
                set_info(
                    set_info(
                        set_info(
                            enable_error_info(x),
                            throw_function(current_function)),
                        throw_file(file)),
                    throw_line(line)));
        }
    }

}


#pragma warning(pop)
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/bad_weak_ptr.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/bad_weak_ptr.hpp"
namespace boost
{
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/bad_weak_ptr.hpp"
class bad_weak_ptr: public std::exception
{
public:

    virtual char const * what() const throw()
    {
        return "tr1::bad_weak_ptr";
    }
};





}
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_has_sync.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base.hpp" 2
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base_sync.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base_sync.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/detail/sp_typeinfo.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/detail/sp_typeinfo.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/core/typeinfo.hpp" 1
# 119 "C:/Programing/Libs/boost_1_59_0\\boost/core/typeinfo.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/core/demangle.hpp" 1
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/core/demangle.hpp"
namespace boost
{

namespace core
{

inline char const * demangle_alloc( char const * name ) ;
inline void demangle_free( char const * name ) ;

class scoped_demangled_name
{
private:
    char const * m_p;

public:
    explicit scoped_demangled_name( char const * name ) :
        m_p( demangle_alloc( name ) )
    {
    }

    ~scoped_demangled_name()
    {
        demangle_free( m_p );
    }

    char const * get() const
    {
        return m_p;
    }

    private: scoped_demangled_name( scoped_demangled_name const& );
    private: scoped_demangled_name& operator= ( scoped_demangled_name const& );
};
# 99 "C:/Programing/Libs/boost_1_59_0\\boost/core/demangle.hpp"
inline char const * demangle_alloc( char const * name )
{
    return name;
}

inline void demangle_free( char const * )
{
}

inline std::string demangle( char const * name )
{
    return name;
}



}

}
# 119 "C:/Programing/Libs/boost_1_59_0\\boost/core/typeinfo.hpp" 2



namespace boost
{

namespace core
{







typedef std::type_info typeinfo;



inline std::string demangled_name( core::typeinfo const & ti )
{
    return core::demangle( ti.name() );
}

}

}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/detail/sp_typeinfo.hpp" 2


namespace boost
{

namespace detail
{

typedef boost::core::typeinfo sp_typeinfo;

}

}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base_sync.hpp" 2







namespace boost
{

namespace detail
{



typedef int sp_int32_t;







inline void atomic_increment( sp_int32_t * pw )
{
    __sync_fetch_and_add( pw, 1 );
}

inline sp_int32_t atomic_decrement( sp_int32_t * pw )
{
    return __sync_fetch_and_add( pw, -1 );
}

inline sp_int32_t atomic_conditional_increment( sp_int32_t * pw )
{




    sp_int32_t r = *pw;

    for( ;; )
    {
        if( r == 0 )
        {
            return r;
        }

        sp_int32_t r2 = __sync_val_compare_and_swap( pw, r, r + 1 );

        if( r2 == r )
        {
            return r;
        }
        else
        {
            r = r2;
        }
    }
}

class sp_counted_base
{
private:

    sp_counted_base( sp_counted_base const & );
    sp_counted_base & operator= ( sp_counted_base const & );

    sp_int32_t use_count_;
    sp_int32_t weak_count_;

public:

    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
    {
    }

    virtual ~sp_counted_base()
    {
    }




    virtual void dispose() = 0;



    virtual void destroy()
    {
        delete this;
    }

    virtual void * get_deleter( sp_typeinfo const & ti ) = 0;
    virtual void * get_untyped_deleter() = 0;

    void add_ref_copy()
    {
        atomic_increment( &use_count_ );
    }

    bool add_ref_lock()
    {
        return atomic_conditional_increment( &use_count_ ) != 0;
    }

    void release()
    {
        if( atomic_decrement( &use_count_ ) == 1 )
        {
            dispose();
            weak_release();
        }
    }

    void weak_add_ref()
    {
        atomic_increment( &weak_count_ );
    }

    void weak_release()
    {
        if( atomic_decrement( &weak_count_ ) == 1 )
        {
            destroy();
        }
    }

    long use_count() const
    {
        return const_cast< sp_int32_t const volatile & >( use_count_ );
    }
};

}

}
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_base.hpp" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_impl.hpp" 1
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_impl.hpp"
namespace boost
{
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_impl.hpp"
namespace detail
{

template<class X> class sp_counted_impl_p: public sp_counted_base
{
private:

    X * px_;

    sp_counted_impl_p( sp_counted_impl_p const & );
    sp_counted_impl_p & operator= ( sp_counted_impl_p const & );

    typedef sp_counted_impl_p<X> this_type;

public:

    explicit sp_counted_impl_p( X * px ): px_( px )
    {



    }

    virtual void dispose()
    {



        boost::checked_delete( px_ );
    }

    virtual void * get_deleter( sp_typeinfo const & )
    {
        return 0;
    }

    virtual void * get_untyped_deleter()
    {
        return 0;
    }
# 118 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_impl.hpp"
};
# 127 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_impl.hpp"
template<class P, class D> class sp_counted_impl_pd: public sp_counted_base
{
private:

    P ptr;
    D del;

    sp_counted_impl_pd( sp_counted_impl_pd const & );
    sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );

    typedef sp_counted_impl_pd<P, D> this_type;

public:



    sp_counted_impl_pd( P p, D & d ): ptr( p ), del( d )
    {
    }

    sp_counted_impl_pd( P p ): ptr( p ), del()
    {
    }

    virtual void dispose()
    {
        del( ptr );
    }

    virtual void * get_deleter( sp_typeinfo const & ti )
    {
        return ti == typeid(D)? &reinterpret_cast<char&>( del ): 0;
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( del );
    }
# 193 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_counted_impl.hpp"
};

template<class P, class D, class A> class sp_counted_impl_pda: public sp_counted_base
{
private:

    P p_;
    D d_;
    A a_;

    sp_counted_impl_pda( sp_counted_impl_pda const & );
    sp_counted_impl_pda & operator= ( sp_counted_impl_pda const & );

    typedef sp_counted_impl_pda<P, D, A> this_type;

public:



    sp_counted_impl_pda( P p, D & d, A a ): p_( p ), d_( d ), a_( a )
    {
    }

    sp_counted_impl_pda( P p, A a ): p_( p ), d_( a ), a_( a )
    {
    }

    virtual void dispose()
    {
        d_( p_ );
    }

    virtual void destroy()
    {


        typedef typename std::allocator_traits<A>::template rebind_alloc< this_type > A2;







        A2 a2( a_ );



        std::allocator_traits<A2>::destroy( a2, this );







        a2.deallocate( this, 1 );
    }

    virtual void * get_deleter( sp_typeinfo const & ti )
    {
        return ti == typeid(D)? &reinterpret_cast<char&>( d_ ): 0;
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( d_ );
    }
};





}

}
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp" 2







# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 1 3





# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 1 3
# 10 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4180 4244)





namespace std {
# 32 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<class _Ty = void>
 struct divides
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left / _Right);
  }
 };


template<class _Ty = void>
 struct modulus
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left % _Right);
  }
 };


template<class _Ty = void>
 struct negate
 {
 typedef _Ty argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left) const
  {
  return (-_Left);
  }
 };





template<class _Ty = void>
 struct not_equal_to
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left != _Right);
  }
 };


template<class _Ty = void>
 struct greater
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left > _Right);
  }
 };





template<class _Ty = void>
 struct greater_equal
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left >= _Right);
  }
 };


template<class _Ty = void>
 struct less_equal
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left <= _Right);
  }
 };


template<class _Ty = void>
 struct logical_and
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left && _Right);
  }
 };


template<class _Ty = void>
 struct logical_or
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left || _Right);
  }
 };


template<class _Ty = void>
 struct logical_not
 {
 typedef _Ty argument_type;
 typedef bool result_type;

 constexpr bool operator()(const _Ty& _Left) const
  {
  return (!_Left);
  }
 };


template<class _Ty = void>
 struct bit_and
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left & _Right);
  }
 };


template<class _Ty = void>
 struct bit_or
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left | _Right);
  }
 };


template<class _Ty = void>
 struct bit_xor
 {
 typedef _Ty first_argument_type;
 typedef _Ty second_argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left ^ _Right);
  }
 };


template<class _Ty = void>
 struct bit_not
 {
 typedef _Ty argument_type;
 typedef _Ty result_type;

 constexpr _Ty operator()(const _Ty& _Left) const
  {
  return (~_Left);
  }
 };
# 240 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<>
 struct divides<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct modulus<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct negate<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(-::std:: forward<_Ty>(_Left))
  {
  return (-::std:: forward<_Ty>(_Left));
  }
 };





template<>
 struct not_equal_to<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct greater<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right));
  }
 };





template<>
 struct greater_equal<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct less_equal<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_and<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_or<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct logical_not<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(!::std:: forward<_Ty>(_Left))
  {
  return (!::std:: forward<_Ty>(_Left));
  }
 };


template<>
 struct bit_and<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_or<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_xor<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty1,
  class _Ty2>
  constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right))
  {
  return (::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right));
  }
 };


template<>
 struct bit_not<void>
 {
 typedef _Is_trans is_transparent;

 template<class _Ty>
  constexpr auto operator()(_Ty&& _Left) const
  -> decltype(~::std:: forward<_Ty>(_Left))
  {
  return (~::std:: forward<_Ty>(_Left));
  }
 };


template<class _Fn1>
 class unary_negate
 {
public:
 typedef typename _Fn1::argument_type argument_type;
 typedef bool result_type;

 constexpr explicit unary_negate(const _Fn1& _Func)
  : _Functor(_Func)
  {
  }

 constexpr bool operator()(const argument_type& _Left) const
  {
  return (!_Functor(_Left));
  }

private:
 _Fn1 _Functor;
 };


template<class _Fn1> inline
 constexpr unary_negate<_Fn1> not1(const _Fn1& _Func)
 {
 return (unary_negate<_Fn1>(_Func));
 }


template<class _Fn2>
 class binary_negate
 {
public:
 typedef typename _Fn2::first_argument_type first_argument_type;
 typedef typename _Fn2::second_argument_type second_argument_type;
 typedef bool result_type;

 constexpr explicit binary_negate(const _Fn2& _Func)
  : _Functor(_Func)
  {
  }

 constexpr bool operator()(const first_argument_type& _Left,
  const second_argument_type& _Right) const
  {
  return (!_Functor(_Left, _Right));
  }

private:
 _Fn2 _Functor;
 };


template<class _Fn2> inline
 constexpr binary_negate<_Fn2> not2(const _Fn2& _Func)
 {
 return (binary_negate<_Fn2>(_Func));
 }



template<class _Fn2>
 class binder1st
  : public unary_function<typename _Fn2::second_argument_type,
   typename _Fn2::result_type>
 {
public:
 typedef unary_function<typename _Fn2::second_argument_type,
  typename _Fn2::result_type> _Base;
 typedef typename _Base::argument_type argument_type;
 typedef typename _Base::result_type result_type;

 binder1st(const _Fn2& _Func,
  const typename _Fn2::first_argument_type& _Left)
  : op(_Func), value(_Left)
  {
  }

 result_type operator()(const argument_type& _Right) const
  {
  return (op(value, _Right));
  }

 result_type operator()(argument_type& _Right) const
  {
  return (op(value, _Right));
  }

protected:
 _Fn2 op;
 typename _Fn2::first_argument_type value;
 };


template<class _Fn2,
 class _Ty> inline
 binder1st<_Fn2> bind1st(const _Fn2& _Func, const _Ty& _Left)
 {
 typename _Fn2::first_argument_type _Val(_Left);
 return (binder1st<_Fn2>(_Func, _Val));
 }


template<class _Fn2>
 class binder2nd
  : public unary_function<typename _Fn2::first_argument_type,
   typename _Fn2::result_type>
 {
public:
 typedef unary_function<typename _Fn2::first_argument_type,
  typename _Fn2::result_type> _Base;
 typedef typename _Base::argument_type argument_type;
 typedef typename _Base::result_type result_type;

 binder2nd(const _Fn2& _Func,
  const typename _Fn2::second_argument_type& _Right)
  : op(_Func), value(_Right)
  {
  }

 result_type operator()(const argument_type& _Left) const
  {
  return (op(_Left, value));
  }

 result_type operator()(argument_type& _Left) const
  {
  return (op(_Left, value));
  }

protected:
 _Fn2 op;
 typename _Fn2::second_argument_type value;
 };


template<class _Fn2,
 class _Ty> inline
 binder2nd<_Fn2> bind2nd(const _Fn2& _Func, const _Ty& _Right)
 {
 typename _Fn2::second_argument_type _Val(_Right);
 return (binder2nd<_Fn2>(_Func, _Val));
 }


template<class _Arg,
 class _Result,
 class _Fn = _Result (*)(_Arg)>
 class pointer_to_unary_function
  : public unary_function<_Arg, _Result>
 {
public:
 explicit pointer_to_unary_function(_Fn _Left)
  : _Pfun(_Left)
  {
  }

 _Result operator()(_Arg _Left) const
  {
  return (_Pfun(_Left));
  }

protected:
 _Fn _Pfun;
 };


template<class _Arg1,
 class _Arg2,
 class _Result,
 class _Fn = _Result (*)(_Arg1, _Arg2)>
 class pointer_to_binary_function
  : public binary_function<_Arg1, _Arg2, _Result>
 {
public:
 explicit pointer_to_binary_function(_Fn _Left)
  : _Pfun(_Left)
  {
  }

 _Result operator()(_Arg1 _Left, _Arg2 _Right) const
  {
  return (_Pfun(_Left, _Right));
  }

protected:
 _Fn _Pfun;
 };


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__cdecl *)(_Arg)>
  ptr_fun(_Result (__cdecl *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__cdecl *)(_Arg)>(_Left));
 }


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__stdcall *)(_Arg)>
   ptr_fun(_Result (__stdcall *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__stdcall *)(_Arg)>(_Left));
 }


template<class _Arg,
 class _Result> inline
 pointer_to_unary_function<_Arg, _Result,
  _Result (__fastcall *)(_Arg)>
   ptr_fun(_Result (__fastcall *_Left)(_Arg))
 {
 return (pointer_to_unary_function<_Arg, _Result,
  _Result (__fastcall *)(_Arg)>(_Left));
 }
# 689 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__cdecl *)(_Arg1, _Arg2)>
  ptr_fun(_Result (__cdecl *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__cdecl *)(_Arg1, _Arg2)>(_Left));
 }


template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result(__stdcall *)(_Arg1, _Arg2)>
   ptr_fun(_Result (__stdcall *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__stdcall *)(_Arg1, _Arg2)>(_Left));
 }


template<class _Arg1,
 class _Arg2,
 class _Result> inline
 pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result(__fastcall *)(_Arg1, _Arg2)>
   ptr_fun(_Result (__fastcall *_Left)(_Arg1, _Arg2))
 {
 return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
  _Result (__fastcall *)(_Arg1, _Arg2)>(_Left));
 }
# 740 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\xfunctional" 3
template<class _Result,
 class _Ty>
 class mem_fun_t
  : public unary_function<_Ty *, _Result>
 {
public:
 explicit mem_fun_t(_Result (_Ty::*_Pm)())
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty *_Pleft) const
  {
  return ((_Pleft->*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)();
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class mem_fun1_t
  : public binary_function<_Ty *, _Arg, _Result>
 {
public:
 explicit mem_fun1_t(_Result (_Ty::*_Pm)(_Arg))
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty *_Pleft, _Arg _Right) const
  {
  return ((_Pleft->*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg);
 };


template<class _Result,
 class _Ty>
 class const_mem_fun_t
  : public unary_function<const _Ty *, _Result>
 {
public:
 explicit const_mem_fun_t(_Result (_Ty::*_Pm)() const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty *_Pleft) const
  {
  return ((_Pleft->*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)() const;
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class const_mem_fun1_t
  : public binary_function<const _Ty *, _Arg, _Result>
 {
public:
 explicit const_mem_fun1_t(_Result (_Ty::*_Pm)(_Arg) const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty *_Pleft, _Arg _Right) const
  {
  return ((_Pleft->*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg) const;
 };


template<class _Result,
 class _Ty> inline
 mem_fun_t<_Result, _Ty> mem_fun(_Result (_Ty::*_Pm)())
 {
 return (mem_fun_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 mem_fun1_t<_Result, _Ty, _Arg> mem_fun(_Result (_Ty::*_Pm)(_Arg))
 {
 return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
 }

template<class _Result,
 class _Ty> inline
 const_mem_fun_t<_Result, _Ty>
  mem_fun(_Result (_Ty::*_Pm)() const)
 {
 return (const_mem_fun_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 const_mem_fun1_t<_Result, _Ty, _Arg>
  mem_fun(_Result (_Ty::*_Pm)(_Arg) const)
 {
 return (const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
 }


template<class _Result,
 class _Ty>
 class mem_fun_ref_t
  : public unary_function<_Ty, _Result>
 {
public:
 explicit mem_fun_ref_t(_Result (_Ty::*_Pm)())
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty& _Left) const
  {
  return ((_Left.*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)();
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class mem_fun1_ref_t
  : public binary_function<_Ty, _Arg, _Result>
 {
public:
 explicit mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg))
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(_Ty& _Left, _Arg _Right) const
  {
  return ((_Left.*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg);
 };


template<class _Result,
 class _Ty>
 class const_mem_fun_ref_t
  : public unary_function<_Ty, _Result>
 {
public:
 explicit const_mem_fun_ref_t(_Result (_Ty::*_Pm)() const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty& _Left) const
  {
  return ((_Left.*_Pmemfun)());
  }

private:
 _Result (_Ty::*_Pmemfun)() const;
 };


template<class _Result,
 class _Ty,
 class _Arg>
 class const_mem_fun1_ref_t
  : public binary_function<_Ty, _Arg, _Result>
 {
public:
 explicit const_mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg) const)
  : _Pmemfun(_Pm)
  {
  }

 _Result operator()(const _Ty& _Left, _Arg _Right) const
  {
  return ((_Left.*_Pmemfun)(_Right));
  }

private:
 _Result (_Ty::*_Pmemfun)(_Arg) const;
 };


template<class _Result,
 class _Ty> inline
 mem_fun_ref_t<_Result, _Ty> mem_fun_ref(_Result (_Ty::*_Pm)())
 {
 return (mem_fun_ref_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 mem_fun1_ref_t<_Result, _Ty, _Arg>
  mem_fun_ref(_Result (_Ty::*_Pm)(_Arg))
 {
 return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
 }

template<class _Result,
 class _Ty> inline
 const_mem_fun_ref_t<_Result, _Ty>
  mem_fun_ref(_Result (_Ty::*_Pm)() const)
 {
 return (const_mem_fun_ref_t<_Result, _Ty>(_Pm));
 }

template<class _Result,
 class _Ty,
 class _Arg> inline
 const_mem_fun1_ref_t<_Result, _Ty, _Arg>
  mem_fun_ref(_Result (_Ty::*_Pm)(_Arg) const)
 {
 return (const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
 }

}


#pragma warning(pop)
#pragma pack(pop)
# 6 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 2 3





#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Memptr>
 class _Mem_fn
  : public _Weak_types<_Memptr>::type
 {
private:
 _Memptr _Pm;

public:
 explicit _Mem_fn(_Memptr _Val) noexcept
  : _Pm(_Val)
  {
  }

 template<class... _Types>
  auto operator()(_Types&&... _Args) const
  -> decltype(::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...))
  {
  return (::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...));
  }
 };

template<class _Memptr> inline
 typename enable_if<is_member_pointer<_Memptr>::value,
  _Mem_fn<_Memptr> >::type mem_fn(_Memptr _Pm) noexcept
 {


 return (_Mem_fn<_Memptr>(_Pm));
 }




class bad_function_call
 : public ::std:: exception
 {
public:
 bad_function_call() noexcept
  {
  }

 virtual const char * what() const noexcept
  {
  return ("bad function call");
  }
 };

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xbad_function_call();


template<class _Fty>
 class function;

template<class _Ty> inline
 bool _Test_callable(const _Ty& _Arg, true_type) noexcept
 {
 return (!!_Arg);
 }

template<class _Ty> inline
 bool _Test_callable(const _Ty&, false_type) noexcept
 {
 return (true);
 }

template<class _Ty> inline
 bool _Test_callable(const _Ty& _Arg) noexcept
 {
 _Cat_base<is_member_pointer<_Ty>::value || (is_pointer<_Ty>::value
  && is_function<typename remove_pointer<_Ty>::type>::value)> _Testable;
 return (_Test_callable(_Arg, _Testable));
 }

template<class _Fty> inline
 bool _Test_callable(const function<_Fty>& _Arg) noexcept
 {
 return (!!_Arg);
 }


template<class _Rx,
 class... _Types>
 class _Func_base
 {
public:
 typedef _Func_base<_Rx, _Types...> _Myt;

 virtual _Myt *_Copy(void *) const = 0;
 virtual _Myt *_Move(void *) = 0;
 virtual _Rx _Do_call(_Types&&...) = 0;
 virtual const type_info& _Target_type() const noexcept = 0;
 virtual void _Delete_this(bool) noexcept = 0;

 const void *_Target(const type_info& _Info) const noexcept
  {
  return (_Target_type() == _Info ? _Get() : 0);
  }

 _Func_base(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 _Func_base() = default;

 ~_Func_base() noexcept
  {
  }

private:
 virtual const void *_Get() const noexcept = 0;
 };


const int _Num_ptrs = 6 + 16 / sizeof (void *);

const size_t _Space_size = (_Num_ptrs - 1) * sizeof (void *);

template<class _Impl>
 struct _Is_large
  : bool_constant<_Space_size < sizeof (_Impl)
   || !_Impl::_Nothrow_move::value>
 {
 };


template<class _Callable,
 class _Alloc,
 class _Rx,
 class... _Types>
 class _Func_impl
  : public _Func_base<_Rx, _Types...>
 {
public:
 typedef _Func_impl<_Callable, _Alloc, _Rx, _Types...> _Myt;
 typedef _Func_base<_Rx, _Types...> _Mybase;
 typedef _Wrap_alloc<_Alloc> _Myalty0;
 typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
 typedef is_nothrow_move_constructible<_Callable> _Nothrow_move;

 template<class _Other1,
  class _Other2>
  _Func_impl(_Other1&& _Val, _Other2&& _Ax)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Other2>(_Ax), ::std:: forward<_Other1>(_Val))
  {
  }

 ~_Func_impl() noexcept
  {
  }

private:
 virtual _Mybase *_Copy(void *_Where) const
  {
  return (_Clone(_Where, _Is_large<_Myt>()));
  }

 template<class _Void>
  _Mybase *_Clone(_Void *, true_type) const
  {
  _Myalty _Al(_Myax());
  _Myt * _Ptr = _Al.allocate(1);

  try {
   _Al.construct(_Ptr, _Callee(), _Myax());
  } catch (...) {
   _Al.deallocate(_Ptr, 1);
  throw;
  }

  return (_Ptr);
  }

 template<class _Void>
  _Mybase *_Clone(_Void *_Where, false_type) const
  {
  _Myalty _Al(_Myax());
  _Myt * _Ptr = static_cast<_Myt *>(_Where);
  _Al.construct(_Ptr, _Callee(), _Myax());
  return (_Ptr);
  }

 virtual _Mybase *_Move(void *_Where)
  {
  _Myalty _Al(_Myax());
  _Myt *_Ptr = static_cast<_Myt *>(_Where);
  _Al.construct(_Ptr, ::std:: move(_Callee()), ::std:: move(_Myax()));
  return (_Ptr);
  }

 virtual _Rx _Do_call(_Types&&... _Args)
  {
  return (_Invoke_ret(_Forced<_Rx>(), _Callee(),
   ::std:: forward<_Types>(_Args)...));
  }

 virtual const type_info& _Target_type() const noexcept
  {
  return (typeid(_Callable));
  }

 virtual const void *_Get() const noexcept
  {
  return (::std:: addressof(_Callee()));
  }

 virtual void _Delete_this(bool _Deallocate) noexcept
  {
  _Myalty _Al(_Myax());
  _Al.destroy(this);
  if (_Deallocate)
   _Al.deallocate(this, 1);
  }

 _Compressed_pair<_Alloc, _Callable> _Mypair;

 _Alloc& _Myax() noexcept
  {
  return (_Mypair._Get_first());
  }

 const _Alloc& _Myax() const noexcept
  {
  return (_Mypair._Get_first());
  }

 _Callable& _Callee() noexcept
  {
  return (_Mypair._Get_second());
  }

 const _Callable& _Callee() const noexcept
  {
  return (_Mypair._Get_second());
  }
 };


template<class _Ret,
 class... _Types>
 class _Func_class
  : public _Arg_types<_Types...>
 {
public:
 typedef _Ret result_type;

 typedef _Func_class<_Ret, _Types...> _Myt;
 typedef _Func_base<_Ret, _Types...> _Ptrt;

 _Func_class() noexcept
  {
  _Set(0);
  }

 _Ret operator()(_Types... _Args) const
  {
  if (_Empty())
   _Xbad_function_call();
  return (_Getimpl()->_Do_call(::std:: forward<_Types>(_Args)...));
  }

 ~_Func_class() noexcept
  {
  _Tidy();
  }

protected:
 bool _Empty() const noexcept
  {
  return (_Getimpl() == 0);
  }

 void _Reset_copy(const _Myt& _Right)
  {
  if (_Right._Empty())
   ;
  else if (_Right._Local())
   _Set(_Right._Getimpl()->_Copy(_Getspace()));
  else
   _Set(_Right._Getimpl()->_Copy(0));
  }

 void _Reset_move(_Myt&& _Right)
  {
  if (_Right._Empty())
   ;
  else if (_Right._Local())
   {
   _Set(_Right._Getimpl()->_Move(_Getspace()));
   _Right._Tidy();
   }
  else
   {
   _Set(_Right._Getimpl());
   _Right._Set(0);
   }
  }

 template<class _Fx>
  void _Reset(_Fx&& _Val)
  {
  _Reset_alloc(::std:: forward<_Fx>(_Val), allocator<int>());
  }

 template<class _Fx,
  class _Alloc>
  void _Reset_alloc(_Fx&& _Val, const _Alloc& _Ax)
  {
  if (!_Test_callable(_Val))
   {
   return;
   }

  typedef typename decay<_Fx>::type _Decayed;
  typedef _Func_impl<_Decayed, _Alloc, _Ret, _Types...> _Myimpl;
  _Myimpl *_Ptr = 0;

  typedef _Wrap_alloc<_Alloc> _Alimpl0;
  typedef typename _Alimpl0::template rebind<_Myimpl>::other _Alimpl;
  _Alimpl _Al(_Ax);

  _Reset_impl(::std:: forward<_Fx>(_Val), _Ax,
   _Ptr, _Al, _Is_large<_Myimpl>());
  }

 template<class _Fx,
  class _Alloc,
  class _Myimpl,
  class _Alimpl>
  void _Reset_impl(_Fx&& _Val, const _Alloc& _Ax,
   _Myimpl *, _Alimpl& _Al, true_type)
  {
  _Myimpl *_Ptr = _Al.allocate(1);

  try {
   _Al.construct(_Ptr, ::std:: forward<_Fx>(_Val), _Ax);
  } catch (...) {
   _Al.deallocate(_Ptr, 1);
  throw;
  }

  _Set(_Ptr);
  }

 template<class _Fx,
  class _Alloc,
  class _Myimpl,
  class _Alimpl>
  void _Reset_impl(_Fx&& _Val, const _Alloc& _Ax,
   _Myimpl *, _Alimpl& _Al, false_type)
  {
  _Myimpl *_Ptr = static_cast<_Myimpl *>(_Getspace());
  _Al.construct(_Ptr, ::std:: forward<_Fx>(_Val), _Ax);
  _Set(_Ptr);
  }

 void _Tidy() noexcept
  {
  if (!_Empty())
   {
   _Getimpl()->_Delete_this(!_Local());
   _Set(0);
   }
  }

 void _Swap(_Myt& _Right) noexcept
  {
  if (!_Local() && !_Right._Local())
   {
   _Ptrt *_Temp = _Getimpl();
   _Set(_Right._Getimpl());
   _Right._Set(_Temp);
   }
  else
   {
   _Myt _Temp;
   _Temp._Reset_move(::std:: move(*this));
   _Reset_move(::std:: move(_Right));
   _Right._Reset_move(::std:: move(_Temp));
   }
  }

 const type_info& _Target_type() const noexcept
  {
  return (_Getimpl() ? _Getimpl()->_Target_type() : typeid(void));
  }

 const void *_Target(const type_info& _Info) const noexcept
  {
  return (_Getimpl() ? _Getimpl()->_Target(_Info) : 0);
  }

private:
 bool _Local() const noexcept
  {
  return (_Getimpl() == _Getspace());
  }

 union _Storage
  {
  max_align_t _Dummy1;
  char _Dummy2[_Space_size];
  _Ptrt *_Ptrs[_Num_ptrs];
  };

 _Storage _Mystorage;
 enum {_EEN_IMPL = _Num_ptrs - 1};
 _Ptrt *_Getimpl() const noexcept
  {
  return (_Mystorage._Ptrs[_Num_ptrs - 1]);
  }

 void _Set(_Ptrt *_Ptr) noexcept
  {
  _Mystorage._Ptrs[_Num_ptrs - 1] = _Ptr;
  }

 void *_Getspace() noexcept
  {
  return (&_Mystorage);
  }

 const void *_Getspace() const noexcept
  {
  return (&_Mystorage);
  }
 };


template<class _Tx>
 struct _Get_function_impl;
# 457 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 3
template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __cdecl (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __fastcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __stdcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __vectorcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; };



template<class _Fty>
 class function
  : public _Get_function_impl<_Fty>::type
 {
public:
 typedef function<_Fty> _Myt;

 function() noexcept
  {
  }

 function(nullptr_t) noexcept
  {
  }

 function(const _Myt& _Right)
  {
  this->_Reset_copy(_Right);
  }

 template<class _Fx>
  function(_Fx _Func)
  {
  this->_Reset(::std:: move(_Func));
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc&) noexcept
  {
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc&, nullptr_t) noexcept
  {
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc& _Ax, const _Myt& _Right)
  {
  this->_Reset_alloc(_Right, _Ax);
  }

 template<class _Fx,
  class _Alloc>
  function(allocator_arg_t, const _Alloc& _Ax, _Fx _Func)
  {
  this->_Reset_alloc(::std:: move(_Func), _Ax);
  }

 ~function() noexcept
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myt(_Right).swap(*this);
  return (*this);
  }

 function(_Myt&& _Right)
  {
  this->_Reset_move(::std:: move(_Right));
  }

 template<class _Alloc>
  function(allocator_arg_t, const _Alloc& _Al, _Myt&& _Right)
  {
  this->_Reset_alloc(::std:: move(_Right), _Al);
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   this->_Tidy();
   this->_Reset_move(::std:: move(_Right));
   }
  return (*this);
  }

 template<class _Fx>
  _Myt& operator=(_Fx&& _Func)
  {
  _Myt(::std:: forward<_Fx>(_Func)).swap(*this);
  return (*this);
  }

 template<class _Fx,
  class _Alloc>
  void assign(_Fx&& _Func, const _Alloc& _Ax)
  {
  _Myt(allocator_arg, _Ax, ::std:: forward<_Fx>(_Func)).swap(*this);
  }

 _Myt& operator=(nullptr_t) noexcept
  {
  this->_Tidy();
  return (*this);
  }

 template<class _Fx>
  _Myt& operator=(reference_wrapper<_Fx> _Func) noexcept
  {
  this->_Tidy();
  this->_Reset(_Func);
  return (*this);
  }

 void swap(_Myt& _Right) noexcept
  {
  this->_Swap(_Right);
  }

 explicit operator bool() const noexcept
  {
  return (!this->_Empty());
  }

 const type_info& target_type() const noexcept
  {
  return (this->_Target_type());
  }

 template<class _Fx>
  _Fx *target() noexcept
  {
  return (static_cast<_Fx *>(const_cast<void *>(
   this->_Target(typeid(_Fx)))));
  }

 template<class _Fx>
  const _Fx *target() const noexcept
  {
  return (static_cast<const _Fx *>(this->_Target(typeid(_Fx))));
  }
 };


template<class _Fty> inline
 void swap(function<_Fty>& _Left, function<_Fty>& _Right) noexcept
 {
 _Left.swap(_Right);
 }


template<class _Fty> inline
 bool operator==(const function<_Fty>& _Other,
  nullptr_t) noexcept
 {
 return (!_Other);
 }

template<class _Fty> inline
 bool operator==(nullptr_t,
  const function<_Fty>& _Other) noexcept
 {
 return (!_Other);
 }

template<class _Fty> inline
 bool operator!=(const function<_Fty>& _Other,
  nullptr_t) noexcept
 {
 return (static_cast<bool>(_Other));
 }

template<class _Fty> inline
 bool operator!=(nullptr_t,
  const function<_Fty>& _Other) noexcept
 {
 return (static_cast<bool>(_Other));
 }



template<int _Nx>
 struct _Ph
 {
 };

template<class _Tx>
 struct is_placeholder
  : integral_constant<int, 0>
 {
 };

template<int _Nx>
 struct is_placeholder<_Ph<_Nx> >
  : integral_constant<int, _Nx>
 {
 };

template<class _Tx>
 struct is_placeholder<const _Tx>
  : is_placeholder<_Tx>
 {
 };

template<class _Tx>
 struct is_placeholder<volatile _Tx>
  : is_placeholder<_Tx>
 {
 };

template<class _Tx>
 struct is_placeholder<const volatile _Tx>
  : is_placeholder<_Tx>
 {
 };


template<class _Ret,
 class _Fx,
 class... _Types>
 class _Binder;


template<class _Tx>
 struct is_bind_expression
  : false_type
 {
 };

template<class _Ret,
 class _Fx,
 class... _Types>
 struct is_bind_expression<_Binder<_Ret, _Fx, _Types...> >
  : true_type
 {
 };

template<class _Tx>
 struct is_bind_expression<const _Tx>
  : is_bind_expression<_Tx>
 {
 };

template<class _Tx>
 struct is_bind_expression<volatile _Tx>
  : is_bind_expression<_Tx>
 {
 };

template<class _Tx>
 struct is_bind_expression<const volatile _Tx>
  : is_bind_expression<_Tx>
 {
 };


template<class _Cv_TiD,
 bool = _Unrefwrap<_Cv_TiD>::_Is_refwrap,
 bool = is_bind_expression<_Cv_TiD>::value,
 int = is_placeholder<_Cv_TiD>::value>
 struct _Select_fixer;

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, true, false, 0>
 {
 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&&)
  -> typename _Cv_TiD::type&
  {
  return (_Tid.get());
  }
 };

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, false, true, 0>
 {
 template<class _Untuple,
  size_t... _Jx>
  static auto _Apply(_Cv_TiD& _Tid, _Untuple&& _Ut,
   integer_sequence<size_t, _Jx...>)
  -> decltype(_Tid(::std:: get<_Jx>(::std:: move(_Ut))...))
  {
  return (_Tid(::std:: get<_Jx>(::std:: move(_Ut))...));
  }

 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&& _Ut)
  -> decltype(_Apply(_Tid, ::std:: move(_Ut),
   make_integer_sequence<size_t, tuple_size<_Untuple>::value>()))
  {
  return (_Apply(_Tid, ::std:: move(_Ut),
   make_integer_sequence<size_t, tuple_size<_Untuple>::value>()));
  }
 };

template<class _Cv_TiD>
 struct _Select_fixer<_Cv_TiD, false, false, 0>
 {
 template<class _Untuple>
  static _Cv_TiD& _Fix(_Cv_TiD& _Tid, _Untuple&&)
  {
  return (_Tid);
  }
 };

template<class _Cv_TiD,
 int _Jx>
 struct _Select_fixer<_Cv_TiD, false, false, _Jx>
 {
 static_assert(_Jx > 0, "invalid is_placeholder value");

 template<class _Untuple>
  static auto _Fix(_Cv_TiD& _Tid, _Untuple&& _Ut)
  -> decltype(::std:: get<_Jx - 1>(::std:: move(_Ut)))
  {
  return (::std:: get<_Jx - 1>(::std:: move(_Ut)));
  }
 };

template<class _Cv_TiD,
 class _Untuple> inline
 auto _Fix_arg(_Cv_TiD& _Tid, _Untuple&& _Ut)
 -> decltype(_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)))
 {
 return (_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)));
 }


template<class _Ret,
 size_t... _Ix,
 class _Cv_FD,
 class _Cv_tuple_TiD,
 class _Untuple> inline
 auto _Call_binder(_Forced<_Ret> _Fr, integer_sequence<size_t, _Ix...>,
  _Cv_FD& _Obj, _Cv_tuple_TiD& _Tpl, _Untuple&& _Ut)
 -> decltype(_Invoke_ret(_Fr, _Obj, _Fix_arg(
  ::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...))
 {
 return (_Invoke_ret(_Fr, _Obj, _Fix_arg(
  ::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...));
 }


template<class _Ret>
 struct _Forced_result_type
 {
 typedef _Ret result_type;
 };

template<class _Ret,
 class _Fx>
 struct _Binder_result_type
 {
 typedef typename decay<_Fx>::type _Decayed;

 typedef typename _Weak_types<_Decayed>::type _All_weak_types;

 typedef typename _If<is_same<_Ret, _Unforced>::value,
  _Weak_result_type<_All_weak_types>,
  _Forced_result_type<_Ret> >::type type;
 };

template<class _Ret,
 class _Fx,
 class... _Types>
 class _Binder
  : public _Binder_result_type<_Ret, _Fx>::type
 {
private:
 typedef make_integer_sequence<size_t, sizeof...(_Types)> _Seq;
 typedef typename decay<_Fx>::type _First;
 typedef tuple<typename decay<_Types>::type...> _Second;

 _Compressed_pair<_First, _Second> _Mypair;

public:
 explicit _Binder(_Fx&& _Func, _Types&&... _Args)
  : _Mypair(_One_then_variadic_args_t(),
   ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...)
  {
  }
# 849 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\functional" 3
template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) -> decltype(_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); } template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) const -> decltype(_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Forced<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); }

 };


template<class _Fx,
 class... _Types> inline
 _Binder<_Unforced, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
 {
 return (_Binder<_Unforced, _Fx, _Types...>(
  ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
 }


template<class _Ret,
 class _Fx,
 class... _Types> inline
 _Binder<_Ret, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
 {
 return (_Binder<_Ret, _Fx, _Types...>(
  ::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
 }


  namespace placeholders {
constexpr _Ph<1> _1{};
constexpr _Ph<2> _2{};
constexpr _Ph<3> _3{};
constexpr _Ph<4> _4{};
constexpr _Ph<5> _5{};
constexpr _Ph<6> _6{};
constexpr _Ph<7> _7{};
constexpr _Ph<8> _8{};
constexpr _Ph<9> _9{};
constexpr _Ph<10> _10{};
constexpr _Ph<11> _11{};
constexpr _Ph<12> _12{};
constexpr _Ph<13> _13{};
constexpr _Ph<14> _14{};
constexpr _Ph<15> _15{};
constexpr _Ph<16> _16{};
constexpr _Ph<17> _17{};
constexpr _Ph<18> _18{};
constexpr _Ph<19> _19{};
constexpr _Ph<20> _20{};
  }

namespace tr1 {
using ::std:: bad_function_call;
using ::std:: bind;
using ::std:: function;
using ::std:: is_bind_expression;
using ::std:: is_placeholder;
using ::std:: mem_fn;
using ::std:: swap;

namespace placeholders {
 using namespace ::std:: placeholders;
 }
}
}

namespace std {

template<class _Fty,
 class _Alloc>
 struct uses_allocator<function<_Fty>, _Alloc>
  : true_type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/core/addressof.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/core/addressof.hpp"
namespace boost
{

namespace detail
{

template<class T> struct addr_impl_ref
{
    T & v_;

    __forceinline addr_impl_ref( T & v ): v_( v ) {}
    __forceinline operator T& () const { return v_; }

private:
    addr_impl_ref & operator=(const addr_impl_ref &);
};

template<class T> struct addressof_impl
{
    static __forceinline T * f( T & v, long )
    {
        return reinterpret_cast<T*>(
            &const_cast<char&>(reinterpret_cast<const volatile char &>(v)));
    }

    static __forceinline T * f( T * v, int )
    {
        return v;
    }
};
# 104 "C:/Programing/Libs/boost_1_59_0\\boost/core/addressof.hpp"
}

template<class T>
__forceinline
T * addressof( T & v )
{






    return boost::detail::addressof_impl<T>::f( boost::detail::addr_impl_ref<T>( v ), 0 );


}
# 160 "C:/Programing/Libs/boost_1_59_0\\boost/core/addressof.hpp"
}
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp" 2


namespace boost
{

namespace movelib
{

    template< class T, class D > class unique_ptr;

}

namespace detail
{
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
struct sp_nothrow_tag {};

template< class D > struct sp_inplace_tag
{
};

template< class T > class sp_reference_wrapper
{
public:

    explicit sp_reference_wrapper( T & t): t_( boost::addressof( t ) )
    {
    }

    template< class Y > void operator()( Y * p ) const
    {
        (*t_)( p );
    }

private:

    T * t_;
};

template< class D > struct sp_convert_reference
{
    typedef D type;
};

template< class D > struct sp_convert_reference< D& >
{
    typedef sp_reference_wrapper< D > type;
};

class weak_count;

class shared_count
{
private:

    sp_counted_base * pi_;





    friend class weak_count;

public:

    shared_count(): pi_(0)



    {
    }

    template<class Y> explicit shared_count( Y * p ): pi_( 0 )



    {


        try
        {
            pi_ = new sp_counted_impl_p<Y>( p );
        }
        catch(...)
        {
            boost::checked_delete( p );
            throw;
        }
# 150 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    }




    template<class P, class D> shared_count( P p, D d ): pi_(0)




    {





        try
        {
            pi_ = new sp_counted_impl_pd<P, D>(p, d);
        }
        catch(...)
        {
            d(p);
            throw;
        }
# 187 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template< class P, class D > shared_count( P p, sp_inplace_tag<D> ): pi_( 0 )



    {


        try
        {
            pi_ = new sp_counted_impl_pd< P, D >( p );
        }
        catch( ... )
        {
            D::operator_fn( p );
            throw;
        }
# 219 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template<class P, class D, class A> shared_count( P p, D d, A a ): pi_( 0 )



    {
        typedef sp_counted_impl_pda<P, D, A> impl_type;



        typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;







        A2 a2( a );



        try
        {


            impl_type * pi = std::allocator_traits<A2>::allocate( a2, 1 );
            pi_ = pi;
            std::allocator_traits<A2>::construct( a2, pi, p, d, a );







        }
        catch(...)
        {
            d( p );

            if( pi_ != 0 )
            {
                a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );
            }

            throw;
        }
# 303 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template< class P, class D, class A > shared_count( P p, sp_inplace_tag< D >, A a ): pi_( 0 )



    {
        typedef sp_counted_impl_pda< P, D, A > impl_type;



        typedef typename std::allocator_traits<A>::template rebind_alloc< impl_type > A2;







        A2 a2( a );



        try
        {


            impl_type * pi = std::allocator_traits<A2>::allocate( a2, 1 );
            pi_ = pi;
            std::allocator_traits<A2>::construct( a2, pi, p, a );







        }
        catch(...)
        {
            D::operator_fn( p );

            if( pi_ != 0 )
            {
                a2.deallocate( static_cast< impl_type* >( pi_ ), 1 );
            }

            throw;
        }
# 387 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    }







    template<class Y>
    explicit shared_count( std::auto_ptr<Y> & r ): pi_( new sp_counted_impl_p<Y>( r.get() ) )



    {
# 410 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
        r.release();
    }





    template<class Y, class D>
    explicit shared_count( std::unique_ptr<Y, D> & r ): pi_( 0 )



    {
        typedef typename sp_convert_reference<D>::type D2;

        D2 d2( r.get_deleter() );
        pi_ = new sp_counted_impl_pd< typename std::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );
# 437 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
        r.release();
    }



    template<class Y, class D>
    explicit shared_count( boost::movelib::unique_ptr<Y, D> & r ): pi_( 0 )



    {
        typedef typename sp_convert_reference<D>::type D2;

        D2 d2( r.get_deleter() );
        pi_ = new sp_counted_impl_pd< typename boost::movelib::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );
# 462 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
        r.release();
    }

    ~shared_count()
    {
        if( pi_ != 0 ) pi_->release();



    }

    shared_count(shared_count const & r): pi_(r.pi_)



    {
        if( pi_ != 0 ) pi_->add_ref_copy();
    }
# 493 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    explicit shared_count(weak_count const & r);
    shared_count( weak_count const & r, sp_nothrow_tag );

    shared_count & operator= (shared_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if( tmp != 0 ) tmp->add_ref_copy();
            if( pi_ != 0 ) pi_->release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(shared_count & r)
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool unique() const
    {
        return use_count() == 1;
    }

    bool empty() const
    {
        return pi_ == 0;
    }

    friend inline bool operator==(shared_count const & a, shared_count const & b)
    {
        return a.pi_ == b.pi_;
    }

    friend inline bool operator<(shared_count const & a, shared_count const & b)
    {
        return std::less<sp_counted_base *>()( a.pi_, b.pi_ );
    }

    void * get_deleter( sp_typeinfo const & ti ) const
    {
        return pi_? pi_->get_deleter( ti ): 0;
    }

    void * get_untyped_deleter() const
    {
        return pi_? pi_->get_untyped_deleter(): 0;
    }
};


class weak_count
{
private:

    sp_counted_base * pi_;





    friend class shared_count;

public:

    weak_count(): pi_(0)



    {
    }

    weak_count(shared_count const & r): pi_(r.pi_)



    {
        if(pi_ != 0) pi_->weak_add_ref();
    }

    weak_count(weak_count const & r): pi_(r.pi_)



    {
        if(pi_ != 0) pi_->weak_add_ref();
    }
# 605 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/shared_count.hpp"
    ~weak_count()
    {
        if(pi_ != 0) pi_->weak_release();



    }

    weak_count & operator= (shared_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    weak_count & operator= (weak_count const & r)
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(weak_count & r)
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool empty() const
    {
        return pi_ == 0;
    }

    friend inline bool operator==(weak_count const & a, weak_count const & b)
    {
        return a.pi_ == b.pi_;
    }

    friend inline bool operator<(weak_count const & a, weak_count const & b)
    {
        return std::less<sp_counted_base *>()(a.pi_, b.pi_);
    }
};

inline shared_count::shared_count( weak_count const & r ): pi_( r.pi_ )



{
    if( pi_ == 0 || !pi_->add_ref_lock() )
    {
        boost::throw_exception( boost::bad_weak_ptr() );
    }
}

inline shared_count::shared_count( weak_count const & r, sp_nothrow_tag ): pi_( r.pi_ )



{
    if( pi_ != 0 && !pi_->add_ref_lock() )
    {
        pi_ = 0;
    }
}

}

}
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_convertible.hpp" 1
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_convertible.hpp"
namespace boost
{

namespace detail
{

template< class Y, class T > struct sp_convertible
{
    typedef char (&yes) [1];
    typedef char (&no) [2];

    static yes f( T* );
    static no f( ... );

    enum _vt { value = sizeof( (f)( static_cast<Y*>(0) ) ) == sizeof(yes) };
};

template< class Y, class T > struct sp_convertible< Y, T[] >
{
    enum _vt { value = false };
};

template< class Y, class T > struct sp_convertible< Y[], T[] >
{
    enum _vt { value = sp_convertible< Y[1], T[1] >::value };
};

template< class Y, std::size_t N, class T > struct sp_convertible< Y[N], T[] >
{
    enum _vt { value = sp_convertible< Y[1], T[1] >::value };
};

struct sp_empty
{
};

template< bool > struct sp_enable_if_convertible_impl;

template<> struct sp_enable_if_convertible_impl<true>
{
    typedef sp_empty type;
};

template<> struct sp_enable_if_convertible_impl<false>
{
};

template< class Y, class T > struct sp_enable_if_convertible: public sp_enable_if_convertible_impl< sp_convertible< Y, T >::value >
{
};

}

}
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/sp_nullptr_t.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock_pool.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock_pool.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock.hpp" 1
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock_sync.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock_sync.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/yield_k.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/yield_k.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdc.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/version_number.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdc.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/test.h" 1
# 7 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdc.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdcpp.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdcpp.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/stdcpp.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/objc.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/objc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language/objc.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/language.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/alpha.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/alpha.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/alpha.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/arm.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/arm.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/arm.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/blackfin.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/blackfin.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/blackfin.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/convex.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/convex.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/convex.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/ia64.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/ia64.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/ia64.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/m68k.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/m68k.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/m68k.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/mips.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/mips.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/mips.h" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/parisc.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/parisc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/parisc.h" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/ppc.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/ppc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/ppc.h" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/pyramid.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/pyramid.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/pyramid.h" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/rs6k.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/rs6k.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/rs6k.h" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sparc.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sparc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sparc.h" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/superh.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/superh.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/superh.h" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sys370.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sys370.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sys370.h" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sys390.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sys390.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/sys390.h" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 1







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h" 2
# 82 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 1







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h" 1
# 8 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h" 2
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 1







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h" 1
# 8 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h" 1
# 9 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 2
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h" 2
# 9 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 2
# 82 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/32.h" 2
# 8 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86/64.h" 1
# 9 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/x86.h" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/z.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/z.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture/z.h" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/predef/architecture.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/borland.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/borland.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/borland.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/clang.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/clang.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/clang.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/comeau.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/comeau.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/comeau.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/compaq.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/compaq.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/compaq.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/diab.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/diab.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/diab.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/digitalmars.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/digitalmars.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/digitalmars.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/dignus.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/dignus.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/dignus.h" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/edg.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/edg.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/edg.h" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/ekopath.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/ekopath.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/ekopath.h" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc_xml.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc_xml.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc_xml.h" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc_xml.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/comp_detected.h" 1
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc_xml.h" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/clang.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc.h" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/gcc.h" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/greenhills.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/greenhills.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/greenhills.h" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/hp_acc.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/hp_acc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/hp_acc.h" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/iar.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/iar.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/iar.h" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/ibm.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/ibm.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/ibm.h" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/intel.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/intel.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/intel.h" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/kai.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/kai.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/kai.h" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/llvm.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/llvm.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/clang.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/llvm.h" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/llvm.h" 2
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/metaware.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/metaware.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/metaware.h" 2
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/metrowerks.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/metrowerks.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/metrowerks.h" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/microtec.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/microtec.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/microtec.h" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/mpw.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/mpw.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/mpw.h" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/palm.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/palm.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/palm.h" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/pgi.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/pgi.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/pgi.h" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/sgi_mipspro.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/sgi_mipspro.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/sgi_mipspro.h" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/sunpro.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/sunpro.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/sunpro.h" 2
# 38 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/tendra.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/tendra.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/tendra.h" 2
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/visualc.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/visualc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/clang.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/visualc.h" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/visualc.h" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/watcom.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/watcom.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler/watcom.h" 2
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/predef/compiler.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/_prefix.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/_prefix.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/_cassert.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/_cassert.h"
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/_cassert.h" 2
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/_prefix.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/gnu.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/gnu.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/gnu.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/uc.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/uc.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/uc.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/vms.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/vms.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/vms.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/zos.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/zos.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/zos.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/_prefix.h" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/_prefix.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/_exception.h" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/_prefix.h" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/cxx.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/cxx.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/cxx.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/dinkumware.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/dinkumware.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/dinkumware.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/libcomo.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/libcomo.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/libcomo.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/modena.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/modena.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/modena.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/msl.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/msl.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/msl.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/roguewave.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/roguewave.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/roguewave.h" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/sgi.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/sgi.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/sgi.h" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/stdcpp3.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/stdcpp3.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/stdcpp3.h" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/stlport.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/stlport.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/stlport.h" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/vacpp.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/vacpp.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std/vacpp.h" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/std.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/aix.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/aix.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/aix.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/amigaos.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/amigaos.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/amigaos.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/android.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/android.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/android.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/beos.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/beos.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/beos.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/macos.h" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/macos.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/ios.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/ios.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/ios.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/macos.h" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/macos.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 52 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 2
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 2
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 2
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 2
# 95 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 2
# 52 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 53 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 56 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/cygwin.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/cygwin.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/cygwin.h" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/haiku.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/haiku.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/haiku.h" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/hpux.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/hpux.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/hpux.h" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/irix.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/irix.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/irix.h" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/ios.h" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/linux.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/linux.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/linux.h" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/macos.h" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/os400.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/os400.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/os400.h" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/qnxnto.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/qnxnto.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/qnxnto.h" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/solaris.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/solaris.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/solaris.h" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/unix.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/unix.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/unix.h" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/vms.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/vms.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/vms.h" 2
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 2
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/os_detected.h" 1
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 2
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/library/c/gnu.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/macos.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/bsdi.h" 1
# 94 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/dragonfly.h" 1
# 95 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/free.h" 1
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/open.h" 1
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd/net.h" 1
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/bsd.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/android.h" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other/endian.h" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/other.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/mingw.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/mingw.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/mingw.h" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_desktop.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_desktop.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_desktop.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_desktop.h" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_desktop.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/detail/platform_detected.h" 1
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_desktop.h" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_store.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_store.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_store.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_store.h" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_phone.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_phone.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_phone.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_phone.h" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_runtime.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_runtime.h"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/make.h" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_runtime.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/os/windows.h" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform/windows_runtime.h" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/predef/platform.h" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/predef/version.h" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/predef.h" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/yield_k.hpp" 2
# 38 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/yield_k.hpp"
extern "C" void _mm_pause();
# 56 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/yield_k.hpp"
namespace boost
{

namespace detail
{


  extern "C" void __stdcall Sleep( unsigned long ms );


inline void yield( unsigned k )
{
    if( k < 4 )
    {
    }

    else if( k < 16 )
    {
        _mm_pause();
    }


    else if( k < 32 )
    {
        Sleep( 0 );
    }
    else
    {
        Sleep( 1 );
    }







}

}

}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock_sync.hpp" 2






namespace boost
{

namespace detail
{

class spinlock
{
public:

    int v_;

public:

    bool try_lock()
    {
        int r = __sync_lock_test_and_set( &v_, 1 );
        return r == 0;
    }

    void lock()
    {
        for( unsigned k = 0; !try_lock(); ++k )
        {
            boost::detail::yield( k );
        }
    }

    void unlock()
    {
        __sync_lock_release( &v_ );
    }

public:

    class scoped_lock
    {
    private:

        spinlock & sp_;

        scoped_lock( scoped_lock const & );
        scoped_lock & operator=( scoped_lock const & );

    public:

        explicit scoped_lock( spinlock & sp ): sp_( sp )
        {
            sp.lock();
        }

        ~scoped_lock()
        {
            sp_.unlock();
        }
    };
};

}
}
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/spinlock_pool.hpp" 2



namespace boost
{

namespace detail
{

template< int M > class spinlock_pool
{
private:

    static spinlock pool_[ 41 ];

public:

    static spinlock & spinlock_for( void const * pv )
    {



        std::size_t i = reinterpret_cast< std::size_t >( pv ) % 41;

        return pool_[ i ];
    }

    class scoped_lock
    {
    private:

        spinlock & sp_;

        scoped_lock( scoped_lock const & );
        scoped_lock & operator=( scoped_lock const & );

    public:

        explicit scoped_lock( void const * pv ): sp_( spinlock_for( pv ) )
        {
            sp_.lock();
        }

        ~scoped_lock()
        {
            sp_.unlock();
        }
    };
};

template< int M > spinlock spinlock_pool< M >::pool_[ 41 ] =
{
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}, {0}, {0}, {0}, {0},
    {0}
};

}
}
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
namespace boost
{

template<class T> class shared_ptr;
template<class T> class weak_ptr;
template<class T> class enable_shared_from_this;
class enable_shared_from_raw;

namespace movelib
{

    template< class T, class D > class unique_ptr;

}

namespace detail
{



template< class T > struct sp_element
{
    typedef T type;
};



template< class T > struct sp_element< T[] >
{
    typedef T type;
};



template< class T, std::size_t N > struct sp_element< T[N] >
{
    typedef T type;
};







template< class T > struct sp_dereference
{
    typedef T & type;
};

template<> struct sp_dereference< void >
{
    typedef void type;
};



template<> struct sp_dereference< void const >
{
    typedef void type;
};

template<> struct sp_dereference< void volatile >
{
    typedef void type;
};

template<> struct sp_dereference< void const volatile >
{
    typedef void type;
};





template< class T > struct sp_dereference< T[] >
{
    typedef void type;
};



template< class T, std::size_t N > struct sp_dereference< T[N] >
{
    typedef void type;
};







template< class T > struct sp_member_access
{
    typedef T * type;
};



template< class T > struct sp_member_access< T[] >
{
    typedef void type;
};



template< class T, std::size_t N > struct sp_member_access< T[N] >
{
    typedef void type;
};







template< class T > struct sp_array_access
{
    typedef void type;
};



template< class T > struct sp_array_access< T[] >
{
    typedef T & type;
};



template< class T, std::size_t N > struct sp_array_access< T[N] >
{
    typedef T & type;
};







template< class T > struct sp_extent
{
    enum _vt { value = 0 };
};



template< class T, std::size_t N > struct sp_extent< T[N] >
{
    enum _vt { value = N };
};





template< class X, class Y, class T > inline void sp_enable_shared_from_this( boost::shared_ptr<X> const * ppx, Y const * py, boost::enable_shared_from_this< T > const * pe )
{
    if( pe != 0 )
    {
        pe->_internal_accept_owner( ppx, const_cast< Y* >( py ) );
    }
}

template< class X, class Y > inline void sp_enable_shared_from_this( boost::shared_ptr<X> * ppx, Y const * py, boost::enable_shared_from_raw const * pe );
# 235 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
inline void sp_enable_shared_from_this( ... )
{
}







template< class T, class R > struct sp_enable_if_auto_ptr
{
};

template< class T, class R > struct sp_enable_if_auto_ptr< std::auto_ptr< T >, R >
{
    typedef R type;
};





template< class Y, class T > inline void sp_assert_convertible()
{



    typedef char tmp[ sp_convertible< Y, T >::value? 1: -1 ];
    (void)sizeof( tmp );







}



template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T > * ppx, Y * p, boost::detail::shared_count & pn )
{
    boost::detail::shared_count( p ).swap( pn );
    boost::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[] > * , Y * p, boost::detail::shared_count & pn )
{
    sp_assert_convertible< Y[], T[] >();
    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
}

template< class T, std::size_t N, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[N] > * , Y * p, boost::detail::shared_count & pn )
{
    sp_assert_convertible< Y[N], T[N] >();
    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
}





template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T > * ppx, Y * p )
{
    boost::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[] > * , Y * )
{
    sp_assert_convertible< Y[], T[] >();
}

template< class T, std::size_t N, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[N] > * , Y * )
{
    sp_assert_convertible< Y[N], T[N] >();
}



}
# 330 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
template<class T> class shared_ptr
{
private:


    typedef shared_ptr<T> this_type;

public:

    typedef typename boost::detail::sp_element< T >::type element_type;

    shared_ptr() : px( 0 ), pn()
    {
    }
# 353 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y>
    explicit shared_ptr( Y * p ): px( p ), pn()
    {
        boost::detail::sp_pointer_construct( this, p, pn );
    }







    template<class Y, class D> shared_ptr( Y * p, D d ): px( p ), pn( p, d )
    {
        boost::detail::sp_deleter_construct( this, p );
    }
# 380 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y, class D, class A> shared_ptr( Y * p, D d, A a ): px( p ), pn( p, d, a )
    {
        boost::detail::sp_deleter_construct( this, p );
    }
# 405 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y>
    explicit shared_ptr( weak_ptr<Y> const & r ): pn( r.pn )
    {
        boost::detail::sp_assert_convertible< Y, T >();


        px = r.px;
    }

    template<class Y>
    shared_ptr( weak_ptr<Y> const & r, boost::detail::sp_nothrow_tag )
                   : px( 0 ), pn( r.pn, boost::detail::sp_nothrow_tag() )
    {
        if( !pn.empty() )
        {
            px = r.px;
        }
    }

    template<class Y>


    shared_ptr( shared_ptr<Y> const & r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = boost::detail::sp_empty() )






                   : px( r.px ), pn( r.pn )
    {
        boost::detail::sp_assert_convertible< Y, T >();
    }


    template< class Y >
    shared_ptr( shared_ptr<Y> const & r, element_type * p ) : px( p ), pn( r.pn )
    {
    }



    template<class Y>
    explicit shared_ptr( std::auto_ptr<Y> & r ): px(r.get()), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        Y * tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }
# 473 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template<class Ap>
    explicit shared_ptr( Ap r, typename boost::detail::sp_enable_if_auto_ptr<Ap, int>::type = 0 ): px( r.get() ), pn()
    {
        typedef typename Ap::element_type Y;

        boost::detail::sp_assert_convertible< Y, T >();

        Y * tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }
# 505 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template< class Y, class D >
    shared_ptr( boost::movelib::unique_ptr< Y, D > r ): px( r.get() ), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        typename boost::movelib::unique_ptr< Y, D >::pointer tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }



    shared_ptr & operator=( shared_ptr const & r )
    {
        this_type(r).swap(*this);
        return *this;
    }



    template<class Y>
    shared_ptr & operator=(shared_ptr<Y> const & r)
    {
        this_type(r).swap(*this);
        return *this;
    }





    template<class Y>
    shared_ptr & operator=( std::auto_ptr<Y> & r )
    {
        this_type( r ).swap( *this );
        return *this;
    }
# 555 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template<class Ap>
    typename boost::detail::sp_enable_if_auto_ptr< Ap, shared_ptr & >::type operator=( Ap r )
    {
        this_type( r ).swap( *this );
        return *this;
    }
# 577 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    template<class Y, class D>
    shared_ptr & operator=( boost::movelib::unique_ptr<Y, D> r )
    {


        boost::detail::sp_assert_convertible< Y, T >();

        typename boost::movelib::unique_ptr< Y, D >::pointer p = r.get();

        shared_ptr tmp;

        tmp.px = p;
        tmp.pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( &tmp, p );

        tmp.swap( *this );

        return *this;
    }
# 651 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
    void reset()
    {
        this_type().swap(*this);
    }

    template<class Y> void reset( Y * p )
    {
        (void)( (!!(p == 0 || p != px)) || (_wassert(L"p == 0 || p != px", L"C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(658)), 0) );
        this_type( p ).swap( *this );
    }

    template<class Y, class D> void reset( Y * p, D d )
    {
        this_type( p, d ).swap( *this );
    }

    template<class Y, class D, class A> void reset( Y * p, D d, A a )
    {
        this_type( p, d, a ).swap( *this );
    }

    template<class Y> void reset( shared_ptr<Y> const & r, element_type * p )
    {
        this_type( r, p ).swap( *this );
    }


    typename boost::detail::sp_dereference< T >::type operator* () const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(680)), 0) );
        return *px;
    }


    typename boost::detail::sp_member_access< T >::type operator-> () const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(687)), 0) );
        return px;
    }


    typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(694)), 0) );
        (void)( (!!(i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 ))) || (_wassert(L"i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 )", L"C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(695)), 0) );

        return static_cast< typename boost::detail::sp_array_access< T >::type >( px[ i ] );
    }

    element_type * get() const
    {
        return px;
    }



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/operator_bool.hpp" 1
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/detail/operator_bool.hpp"
    typedef element_type * this_type::*unspecified_bool_type;

    operator unspecified_bool_type() const
    {
        return px == 0? 0: &this_type::px;
    }




    bool operator! () const
    {
        return px == 0;
    }
# 706 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp" 2


    bool unique() const
    {
        return pn.unique();
    }

    long use_count() const
    {
        return pn.use_count();
    }

    void swap( shared_ptr & other )
    {
        std::swap(px, other.px);
        pn.swap(other.pn);
    }

    template<class Y> bool owner_before( shared_ptr<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }

    template<class Y> bool owner_before( weak_ptr<Y> const & rhs ) const
    {
        return pn < rhs.pn;
    }

    void * _internal_get_deleter( boost::detail::sp_typeinfo const & ti ) const
    {
        return pn.get_deleter( ti );
    }

    void * _internal_get_untyped_deleter() const
    {
        return pn.get_untyped_deleter();
    }

    bool _internal_equiv( shared_ptr const & r ) const
    {
        return px == r.px && pn == r.pn;
    }






private:

    template<class Y> friend class shared_ptr;
    template<class Y> friend class weak_ptr;




    element_type * px;
    boost::detail::shared_count pn;

};

template<class T, class U> inline bool operator==(shared_ptr<T> const & a, shared_ptr<U> const & b)
{
    return a.get() == b.get();
}

template<class T, class U> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<U> const & b)
{
    return a.get() != b.get();
}
# 812 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
template<class T, class U> inline bool operator<(shared_ptr<T> const & a, shared_ptr<U> const & b)
{
    return a.owner_before( b );
}

template<class T> inline void swap(shared_ptr<T> & a, shared_ptr<T> & b)
{
    a.swap(b);
}

template<class T, class U> shared_ptr<T> static_pointer_cast( shared_ptr<U> const & r )
{
    (void) static_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = static_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}

template<class T, class U> shared_ptr<T> const_pointer_cast( shared_ptr<U> const & r )
{
    (void) const_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = const_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}

template<class T, class U> shared_ptr<T> dynamic_pointer_cast( shared_ptr<U> const & r )
{
    (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = dynamic_cast< E* >( r.get() );
    return p? shared_ptr<T>( r, p ): shared_ptr<T>();
}

template<class T, class U> shared_ptr<T> reinterpret_pointer_cast( shared_ptr<U> const & r )
{
    (void) reinterpret_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = reinterpret_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}



template<class T> inline typename shared_ptr<T>::element_type * get_pointer(shared_ptr<T> const & p)
{
    return p.get();
}
# 891 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
template<class E, class T, class Y> std::basic_ostream<E, T> & operator<< (std::basic_ostream<E, T> & os, shared_ptr<Y> const & p)

{
    os << p.get();
    return os;
}
# 906 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
namespace detail
{
# 924 "C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp"
template<class D, class T> D * basic_get_deleter( shared_ptr<T> const & p )
{
    return static_cast<D *>( p._internal_get_deleter(typeid(D)) );
}



class esft2_deleter_wrapper
{
private:

    shared_ptr<void const volatile> deleter_;

public:

    esft2_deleter_wrapper()
    {
    }

    template< class T > void set_deleter( shared_ptr<T> const & deleter )
    {
        deleter_ = deleter;
    }

    template<typename D> D* get_deleter() const
    {
        return boost::detail::basic_get_deleter<D>( deleter_ );
    }

    template< class T> void operator()( T* )
    {
        (void)( (!!(deleter_.use_count() <= 1)) || (_wassert(L"deleter_.use_count() <= 1", L"C:/Programing/Libs/boost_1_59_0\\boost/smart_ptr/shared_ptr.hpp", (unsigned)(955)), 0) );
        deleter_.reset();
    }
};

}

template<class D, class T> D * get_deleter( shared_ptr<T> const & p )
{
    D *del = boost::detail::basic_get_deleter<D>(p);

    if(del == 0)
    {
        boost::detail::esft2_deleter_wrapper *del_wrapper = boost::detail::basic_get_deleter<boost::detail::esft2_deleter_wrapper>(p);


        if(del_wrapper) del = del_wrapper->::boost::detail::esft2_deleter_wrapper::get_deleter<D>();
    }

    return del;
}





template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const * )
{
    return false;
}

template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p )
{
    boost::detail::spinlock_pool<2>::scoped_lock lock( p );
    return *p;
}

template<class T> inline shared_ptr<T> atomic_load_explicit( shared_ptr<T> const * p, int )
{
    return atomic_load( p );
}

template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r )
{
    boost::detail::spinlock_pool<2>::scoped_lock lock( p );
    p->swap( r );
}

template<class T> inline void atomic_store_explicit( shared_ptr<T> * p, shared_ptr<T> r, int )
{
    atomic_store( p, r );
}

template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r )
{
    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );

    sp.lock();
    p->swap( r );
    sp.unlock();

    return r;
}

template<class T> shared_ptr<T> atomic_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> r, int )
{
    return atomic_exchange( p, r );
}

template<class T> bool atomic_compare_exchange( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w )
{
    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );

    sp.lock();

    if( p->_internal_equiv( *v ) )
    {
        p->swap( w );

        sp.unlock();

        return true;
    }
    else
    {
        shared_ptr<T> tmp( *p );

        sp.unlock();

        tmp.swap( *v );
        return false;
    }
}

template<class T> inline bool atomic_compare_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w, int, int )
{
    return atomic_compare_exchange( p, v, w );
}





template< class T > struct hash;

template< class T > std::size_t hash_value( boost::shared_ptr<T> const & p )
{
    return boost::hash< T* >()( p.get() );
}

}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/shared_ptr.hpp" 2
# 21 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp" 1
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/type_index_facade.hpp" 1
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/type_index_facade.hpp"
namespace boost {
    template <class It> std::size_t hash_range(It, It);
}

namespace boost { namespace typeindex {
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/type_index_facade.hpp"
template <class Derived, class TypeInfo>
class type_index_facade {
private:

    const Derived & derived() const {
      return *static_cast<Derived const*>(this);
    }

public:
    typedef TypeInfo type_info_t;



    inline const char* name() const {
        return derived().raw_name();
    }



    inline std::string pretty_name() const {
        return derived().name();
    }



    inline bool equal(const Derived& rhs) const {
        const char* const left = derived().raw_name();
        const char* const right = rhs.raw_name();
        return left == right || !std::strcmp(left, right);
    }



    inline bool before(const Derived& rhs) const {
        const char* const left = derived().raw_name();
        const char* const right = rhs.raw_name();
        return left != right && std::strcmp(left, right) < 0;
    }




    inline std::size_t hash_code() const {
        const char* const name_raw = derived().raw_name();
        return boost::hash_range(name_raw, name_raw + std::strlen(name_raw));
    }
# 153 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/type_index_facade.hpp"
};


template <class Derived, class TypeInfo>
inline bool operator == (const type_index_facade<Derived, TypeInfo>& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return static_cast<Derived const&>(lhs).equal(static_cast<Derived const&>(rhs));
}

template <class Derived, class TypeInfo>
inline bool operator < (const type_index_facade<Derived, TypeInfo>& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return static_cast<Derived const&>(lhs).before(static_cast<Derived const&>(rhs));;
}



template <class Derived, class TypeInfo>
inline bool operator > (const type_index_facade<Derived, TypeInfo>& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return rhs < lhs;
}

template <class Derived, class TypeInfo>
inline bool operator <= (const type_index_facade<Derived, TypeInfo>& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return !(lhs > rhs);
}

template <class Derived, class TypeInfo>
inline bool operator >= (const type_index_facade<Derived, TypeInfo>& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return !(lhs < rhs);
}

template <class Derived, class TypeInfo>
inline bool operator != (const type_index_facade<Derived, TypeInfo>& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return !(lhs == rhs);
}


template <class Derived, class TypeInfo>
inline bool operator == (const TypeInfo& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return Derived(lhs) == rhs;
}

template <class Derived, class TypeInfo>
inline bool operator < (const TypeInfo& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return Derived(lhs) < rhs;
}

template <class Derived, class TypeInfo>
inline bool operator > (const TypeInfo& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return rhs < Derived(lhs);
}

template <class Derived, class TypeInfo>
inline bool operator <= (const TypeInfo& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return !(Derived(lhs) > rhs);
}

template <class Derived, class TypeInfo>
inline bool operator >= (const TypeInfo& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return !(Derived(lhs) < rhs);
}

template <class Derived, class TypeInfo>
inline bool operator != (const TypeInfo& lhs, const type_index_facade<Derived, TypeInfo>& rhs) {
    return !(Derived(lhs) == rhs);
}


template <class Derived, class TypeInfo>
inline bool operator == (const type_index_facade<Derived, TypeInfo>& lhs, const TypeInfo& rhs) {
    return lhs == Derived(rhs);
}

template <class Derived, class TypeInfo>
inline bool operator < (const type_index_facade<Derived, TypeInfo>& lhs, const TypeInfo& rhs) {
    return lhs < Derived(rhs);
}

template <class Derived, class TypeInfo>
inline bool operator > (const type_index_facade<Derived, TypeInfo>& lhs, const TypeInfo& rhs) {
    return Derived(rhs) < lhs;
}

template <class Derived, class TypeInfo>
inline bool operator <= (const type_index_facade<Derived, TypeInfo>& lhs, const TypeInfo& rhs) {
    return !(lhs > Derived(rhs));
}

template <class Derived, class TypeInfo>
inline bool operator >= (const type_index_facade<Derived, TypeInfo>& lhs, const TypeInfo& rhs) {
    return !(lhs < Derived(rhs));
}

template <class Derived, class TypeInfo>
inline bool operator != (const type_index_facade<Derived, TypeInfo>& lhs, const TypeInfo& rhs) {
    return !(lhs == Derived(rhs));
}
# 279 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/type_index_facade.hpp"
template <class CharT, class TriatT, class Derived, class TypeInfo>
inline std::basic_ostream<CharT, TriatT>& operator<<(
    std::basic_ostream<CharT, TriatT>& ostr,
    const type_index_facade<Derived, TypeInfo>& ind)
{
    ostr << static_cast<Derived const&>(ind).pretty_name();
    return ostr;
}





template <class Derived, class TypeInfo>
inline std::size_t hash_value(const type_index_facade<Derived, TypeInfo>& lhs) {
    return static_cast<Derived const&>(lhs).hash_code();
}

}}
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/static_assert.hpp" 1
# 84 "C:/Programing/Libs/boost_1_59_0\\boost/static_assert.hpp"
namespace boost{


template <bool x> struct STATIC_ASSERTION_FAILURE;

template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };


template<int x> struct static_assert_test{};

}
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/cv_traits_impl.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/cv_traits_impl.hpp"
namespace boost {
namespace detail {
# 101 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/cv_traits_impl.hpp"
template <typename T> struct cv_traits_imp {};

template <typename T>
struct cv_traits_imp<T*>
{
    static const bool is_const = false;
    static const bool is_volatile = false;
    typedef T unqualified_type;
};


template <typename T>
struct cv_traits_imp<const T *>
{
    static const bool is_const = true;
    static const bool is_volatile = false;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<volatile T *>
{
    static const bool is_const = false;
    static const bool is_volatile = true;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<const volatile T *>
{
    static const bool is_const = true;
    static const bool is_volatile = true;
    typedef T unqualified_type;
};

}
}
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 10 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/adl_barrier.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/adl_barrier.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/adl.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/adl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/msvc.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/adl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/intel.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/adl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/gcc.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/adl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/workaround.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/adl.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/adl_barrier.hpp" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/adl_barrier.hpp"
namespace mpl_ { namespace aux {} }
namespace boost { namespace mpl { using namespace mpl_;
namespace aux { using namespace mpl_::aux; }
}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/nttp_decl.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/nttp_decl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/nttp.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/nttp_decl.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int_fwd.hpp" 2


namespace mpl_ {

template< int N > struct int_;

}
namespace boost { namespace mpl { using ::mpl_::int_; } }
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c_tag.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c_tag.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/static_constant.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c_tag.hpp" 2


namespace mpl_ {
struct integral_c_tag { static const int value = 0; };
}
namespace boost { namespace mpl { using ::mpl_::integral_c_tag; } }
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/static_cast.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {

template< int N >
struct int_
{
    static const int value = N;





    typedef int_ type;

    typedef int value_type;
    typedef integral_c_tag tag;
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef mpl_::int_< static_cast<int>((value + 1)) > next;
    typedef mpl_::int_< static_cast<int>((value - 1)) > prior;






                    operator int() const { return static_cast<int>(this->value); }
};


template< int N >
int const mpl_::int_< N >::value;


}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/int.hpp" 2
# 10 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/template_arity_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/template_arity_fwd.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename F > struct template_arity;

}}}
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/preprocessor.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp" 2
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/comma_if.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/comma_if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/if.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/if.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/empty.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/empty.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/empty.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/comma_if.hpp" 2
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 2
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp" 2
# 47 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/params.hpp" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/lambda.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/lambda.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/ttp.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/lambda.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/ctps.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/lambda.hpp" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/overload_resolution.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/integral_constant.hpp" 1
# 10 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/integral_constant.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bool.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bool.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bool_fwd.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bool_fwd.hpp"
namespace mpl_ {

template< bool C_ > struct bool_;


typedef bool_<true> true_;
typedef bool_<false> false_;

}

namespace boost { namespace mpl { using ::mpl_::bool_; } }
namespace boost { namespace mpl { using ::mpl_::true_; } }
namespace boost { namespace mpl { using ::mpl_::false_; } }
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bool.hpp" 2




namespace mpl_ {

template< bool C_ > struct bool_
{
    static const bool value = C_;
    typedef integral_c_tag tag;
    typedef bool_ type;
    typedef bool value_type;
                    operator bool() const { return this->value; }
};


template< bool C_ >
bool const bool_<C_>::value;


}
# 10 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/integral_constant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c_fwd.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c_fwd.hpp"
namespace mpl_ {





template< typename T, T N > struct integral_c;


}
namespace boost { namespace mpl { using ::mpl_::integral_c; } }
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {

template< typename T, T N >
struct integral_c
{
    static const T value = N;





    typedef integral_c type;

    typedef T value_type;
    typedef integral_c_tag tag;
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef integral_c< T, static_cast<T>((value + 1)) > next;
    typedef integral_c< T, static_cast<T>((value - 1)) > prior;






                    operator T() const { return static_cast<T>(this->value); }
};


template< typename T, T N >
T const integral_c< T, N >::value;


}
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/integral_c.hpp" 2





namespace mpl_ {

template< bool C >
struct integral_c<bool, C>
{
    static const bool value = C;
    typedef integral_c_tag tag;
    typedef integral_c type;
    typedef bool value_type;
    operator bool() const { return this->value; }
};
}
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/integral_constant.hpp" 2


namespace boost{




template <class T, T val>

struct integral_constant : public mpl::integral_c<T, val>
{
   typedef integral_constant<T,val> type;
};

template<> struct integral_constant<bool,true> : public mpl::true_
{
   typedef integral_constant<bool,true> type;
};
template<> struct integral_constant<bool,false> : public mpl::false_
{
   typedef integral_constant<bool,false> type;
};

typedef integral_constant<bool,true> true_type;
typedef integral_constant<bool,false> false_type;

}
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/lambda_support.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp" 2


namespace boost {







namespace detail{




template <class T>
struct is_const_rvalue_filter
{



   static const bool value = ::boost::detail::cv_traits_imp<T *>::is_const;

};







}


template< typename T > struct is_const : public ::boost::integral_constant<bool,::boost::detail::is_const_rvalue_filter<T>::value> { public: };
template< typename T > struct is_const< T& > : public ::boost::integral_constant<bool,false> { public: };
# 85 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 87 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_const.hpp" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_lvalue_reference.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_lvalue_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_lvalue_reference.hpp" 2


namespace boost {





template< typename T > struct is_lvalue_reference : public ::boost::integral_constant<bool,false> { public: };
template< typename T > struct is_lvalue_reference< T& > : public ::boost::integral_constant<bool,true> { public: };
# 51 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_lvalue_reference.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 53 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_lvalue_reference.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_rvalue_reference.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_rvalue_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_rvalue_reference.hpp" 2


namespace boost {

template< typename T > struct is_rvalue_reference : public ::boost::integral_constant<bool,false> { public: };




}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_rvalue_reference.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/yes_no_type.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/yes_no_type.hpp"
namespace boost {
namespace type_traits {

typedef char yes_type;
struct no_type
{
   char padding[8];
};

}
}
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_or.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_or.hpp"
namespace boost {
namespace type_traits {

template <bool b1, bool b2, bool b3 = false, bool b4 = false, bool b5 = false, bool b6 = false, bool b7 = false>
struct ice_or;

template <bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
struct ice_or
{
    static const bool value = true;
};

template <>
struct ice_or<false, false, false, false, false, false, false>
{
    static const bool value = false;
};

}
}
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_and.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_and.hpp"
namespace boost {
namespace type_traits {

template <bool b1, bool b2, bool b3 = true, bool b4 = true, bool b5 = true, bool b6 = true, bool b7 = true>
struct ice_and;

template <bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
struct ice_and
{
    static const bool value = false;
};

template <>
struct ice_and<true, true, true, true, true, true, true>
{
    static const bool value = true;
};

}
}
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_not.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_not.hpp"
namespace boost {
namespace type_traits {

template <bool b>
struct ice_not
{
    static const bool value = true;
};

template <>
struct ice_not<true>
{
    static const bool value = false;
};

}
}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_eq.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/ice_eq.hpp"
namespace boost {
namespace type_traits {

template <int b1, int b2>
struct ice_eq
{
    static const bool value = (b1 == b2);
};

template <int b1, int b2>
struct ice_ne
{
    static const bool value = (b1 != b2);
};


template <int b1, int b2> bool const ice_eq<b1,b2>::value;
template <int b1, int b2> bool const ice_ne<b1,b2>::value;


}
}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/ice.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct is_reference_impl
{
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_lvalue_reference<T>::value, ::boost::is_rvalue_reference<T>::value >::value);



};

}

template< typename T > struct is_reference : public ::boost::integral_constant<bool,::boost::detail::is_reference_impl<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_reference.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_volatile.hpp" 1
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_volatile.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_volatile.hpp" 2


namespace boost {

namespace detail{
template <class T>
struct is_volatile_rval_filter
{



   static const bool value = ::boost::detail::cv_traits_imp<T *>::is_volatile;

};
# 58 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_volatile.hpp"
}






template< typename T > struct is_volatile : public ::boost::integral_constant<bool,::boost::detail::is_volatile_rval_filter<T>::value> { public: };
template< typename T > struct is_volatile< T& > : public ::boost::integral_constant<bool,false> { public: };
# 80 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_volatile.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 82 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_volatile.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_cv.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_cv.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_cv.hpp" 2


namespace boost {


namespace detail{

template <class T>
struct rvalue_ref_filter_rem_cv
{
   typedef typename boost::detail::cv_traits_imp<T *>::unqualified_type type;
};
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_cv.hpp"
}



template< typename T > struct remove_cv { public: typedef typename boost::detail::rvalue_ref_filter_rem_cv<T>::type type; };
template< typename T > struct remove_cv<T&> { public: typedef T& type; };

template< typename T, std::size_t N > struct remove_cv<T const[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_cv<T volatile[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_cv<T const volatile[N]> { public: typedef T type[N]; };



}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 61 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_cv.hpp" 2
# 38 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_reference.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_reference.hpp" 2


namespace boost {


namespace detail{




template <class T>
struct remove_rvalue_ref
{
   typedef T type;
};
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_reference.hpp"
}

template< typename T > struct remove_reference { public: typedef typename boost::detail::remove_rvalue_ref<T>::type type; };
template< typename T > struct remove_reference<T&> { public: typedef T type; };
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_reference.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 57 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/remove_reference.hpp" 2
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/if.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/value_wknd.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/value_wknd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/integral.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/value_wknd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/eti.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/value_wknd.hpp" 2
# 73 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/value_wknd.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename T > struct value_type_wknd
{
    typedef typename T::value_type type;
};
# 87 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/value_wknd.hpp"
}}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/if.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_spec.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_spec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/void_fwd.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/void_fwd.hpp"
namespace mpl_ {

struct void_;

}
namespace boost { namespace mpl { using ::mpl_::void_; } }
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_fwd.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_fwd.hpp"
namespace mpl_ {


struct na
{
    typedef na type;
    enum { value = 0 };
};

}
namespace boost { namespace mpl { using ::mpl_::na; } }
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na.hpp" 2




namespace boost { namespace mpl {

template< typename T >
struct is_na
    : false_
{



};

template<>
struct is_na<na>
    : true_
{



};

template< typename T >
struct is_not_na
    : true_
{



};

template<>
struct is_not_na<na>
    : false_
{



};


template< typename T, typename U > struct if_na
{
    typedef T type;
};

template< typename U > struct if_na<na,U>
{
    typedef U type;
};
# 93 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na.hpp"
}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda_fwd.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/lambda_arity_param.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda_fwd.hpp" 2



namespace boost { namespace mpl {

template<
      typename T = na
    , typename Tag = void_



    >
struct lambda;

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_spec.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/arity.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/arity.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/dtp.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/arity.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_spec.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/enum.hpp" 1
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/enum.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/comma_if.hpp" 1
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/enum.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_spec.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/limits/arity.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/comma_if.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/and.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/and.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/and.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/and.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bitand.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bitand.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bitand.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/and.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/identity.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/identity.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/identity.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/identity.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/empty.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/identity.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/identity.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/empty.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/empty.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/empty.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/empty.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2
# 66 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 2
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_left.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_left.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/expr_iif.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/expr_iif.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/expr_iif.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_left.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_left.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/is_binary.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/is_binary.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/is_binary.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/check.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/check.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/check.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/check.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/is_binary.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/compl.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/compl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/compl.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_left.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_left.hpp" 2
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_right.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_right.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_right.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/reverse.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/reverse.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/reverse.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_left.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/reverse.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/detail/fold_right.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bitand.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/detail/while.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/detail/while.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/detail/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/detail/while.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/detail/while.hpp" 2
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/expand.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/expand.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/expand.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/overload.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/overload.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/overload.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/size.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/size.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/size.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/size.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/overload.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/expand.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/overload.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/detail/is_single_return.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/detail/is_single_return.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/detail/is_single_return.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/elem.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/elem.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/elem.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/detail/is_single_return.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/add.hpp" 2
# 66 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/sub.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/sub.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/sub.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/sub.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/while.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/sub.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/sub.hpp" 2
# 67 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp" 1
# 68 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 69 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 70 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 71 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/def_params_tail.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_spec.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/if.hpp" 2






namespace boost { namespace mpl {



template<
      bool C
    , typename T1
    , typename T2
    >
struct if_c
{
    typedef T1 type;
};

template<
      typename T1
    , typename T2
    >
struct if_c<false,T1,T2>
{
    typedef T2 type;
};



template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = na
    >
struct if_
{
 private:

    typedef if_c<



          static_cast<bool>(T1::value)

        , T2
        , T3
        > almost_type_;

 public:
    typedef typename almost_type_::type type;


};
# 131 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/if.hpp"
template<> struct if_< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : if_< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< if_< na , na , na > , Tag > { typedef false_ is_le; typedef if_< na , na , na > result_; typedef if_< na , na , na > type; };

}}
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/or.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/or.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/use_preprocessed.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/or.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/nested_type_wknd.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/or.hpp" 2
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/or.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/compiler.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/or.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/or.hpp"
namespace boost { namespace mpl {

namespace aux {

template< bool C_, typename T1, typename T2, typename T3, typename T4 >
struct or_impl
    : true_
{
};

template< typename T1, typename T2, typename T3, typename T4 >
struct or_impl< false,T1,T2,T3,T4 >
    : or_impl<
          T1::type::value
        , T2, T3, T4
        , false_
        >
{
};

template<>
struct or_impl<
          false
        , false_, false_, false_, false_
        >
    : false_
{
};

}

template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = false_, typename T4 = false_, typename T5 = false_
    >
struct or_

    : aux::or_impl<
          T1::type::value
        , T2, T3, T4, T5
        >

{
};

template<> struct or_< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : or_< T1 , T2 > { }; }; template< typename Tag > struct lambda< or_< na , na > , Tag > { typedef false_ is_le; typedef or_< na , na > result_; typedef or_< na , na > type; };





}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/or.hpp" 2
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp" 2
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp"
namespace boost { namespace typeindex {






class stl_type_index
    : public type_index_facade<
        stl_type_index,



            std::type_info

    >
{
public:



    typedef std::type_info type_info_t;


private:
    const type_info_t* data_;

public:
    inline stl_type_index()
        : data_(&typeid(void))
    {}

    inline stl_type_index(const type_info_t& data)
        : data_(&data)
    {}

    inline const type_info_t& type_info() const ;

    inline const char* raw_name() const ;
    inline const char* name() const ;
    inline std::string pretty_name() const;

    inline std::size_t hash_code() const ;
    inline bool equal(const stl_type_index& rhs) const ;
    inline bool before(const stl_type_index& rhs) const ;

    template <class T>
    inline static stl_type_index type_id() ;

    template <class T>
    inline static stl_type_index type_id_with_cvr() ;

    template <class T>
    inline static stl_type_index type_id_runtime(const T& value) ;
};

inline const stl_type_index::type_info_t& stl_type_index::type_info() const {
    return *data_;
}


inline const char* stl_type_index::raw_name() const {

    return data_->raw_name();



}

inline const char* stl_type_index::name() const {
    return data_->name();
}

inline std::string stl_type_index::pretty_name() const {
    static const char cvr_saver_name[] = "boost::typeindex::detail::cvr_saver<";
    static const std::string::size_type cvr_saver_name_len = sizeof(cvr_saver_name) - 1;



    const boost::core::scoped_demangled_name demangled_name(data_->name());

    const char* begin = demangled_name.get();
    if (!begin) {
        boost::throw_exception(std::runtime_error("Type name demangling failed"));
    }

    const std::string::size_type len = std::strlen(begin);
    const char* end = begin + len;

    if (len > cvr_saver_name_len) {
        const char* b = std::strstr(begin, cvr_saver_name);
        if (b) {
            b += cvr_saver_name_len;


            while (*b == ' ') {
                ++ b;
            }


            const char* e = end - 1;
            while (e > b && *e != '>') {
                -- e;
            }


            while (e > b && *(e - 1) == ' ') {
                -- e;
            }

            if (b < e) {

                begin = b;
                end = e;
            }
        }
    }

    return std::string(begin, end);
}


inline std::size_t stl_type_index::hash_code() const {

    return data_->hash_code();



}
# 199 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp"
inline bool stl_type_index::equal(const stl_type_index& rhs) const {



    return *data_ == *rhs.data_;

}

inline bool stl_type_index::before(const stl_type_index& rhs) const {



    return !!data_->before(*rhs.data_);

}







template <class T>
inline stl_type_index stl_type_index::type_id() {
    typedef typename boost::remove_reference<T>::type no_ref_t;
    typedef typename boost::remove_cv<no_ref_t>::type no_cvr_prefinal_t;
# 239 "C:/Programing/Libs/boost_1_59_0\\boost/type_index/stl_type_index.hpp"
        typedef no_cvr_prefinal_t no_cvr_t;


    return typeid(no_cvr_t);
}

namespace detail {
    template <class T> class cvr_saver{};
}

template <class T>
inline stl_type_index stl_type_index::type_id_with_cvr() {
    typedef typename boost::mpl::if_<
        boost::mpl::or_<boost::is_reference<T>, boost::is_const<T>, boost::is_volatile<T> >,
        detail::cvr_saver<T>,
        T
    >::type type;

    return typeid(type);
}


template <class T>
inline stl_type_index stl_type_index::type_id_runtime(const T& value) {



    return typeid(value);

}

}}
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp" 2
# 52 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
namespace boost { namespace typeindex {
# 132 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
    typedef boost::typeindex::stl_type_index type_index;
# 144 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
typedef type_index::type_info_t type_info;
# 210 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
template <class T>
inline type_index type_id() {
    return type_index::type_id<T>();
}
# 230 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
template <class T>
inline type_index type_id_with_cvr() {
    return type_index::type_id_with_cvr<T>();
}
# 255 "C:/Programing/Libs/boost_1_59_0\\boost/type_index.hpp"
template <class T>
inline type_index type_id_runtime(const T& runtime_val) {
    return type_index::type_id_runtime(runtime_val);
}

}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/config.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/blank_fwd.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/blank_fwd.hpp"
namespace boost {

struct blank;

}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg_fwd.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg_fwd.hpp"
namespace mpl_ {

template< int N > struct arg;

}
namespace boost { namespace mpl { using ::mpl_::arg; } }
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_assert.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_assert.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/not.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/not.hpp"
namespace boost { namespace mpl {

namespace aux {

template< long C_ >
struct not_impl
    : bool_<!C_>
{
};

}


template<
      typename T = na
    >
struct not_
    : aux::not_impl<
          T::type::value
        >
{

};

template<> struct not_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : not_< T1 > { }; }; template< typename Tag > struct lambda< not_< na > , Tag > { typedef false_ is_le; typedef not_< na > result_; typedef not_< na > type; };

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/yes_no.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/yes_no.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/arrays.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/yes_no.hpp" 2





namespace boost { namespace mpl { namespace aux {

typedef char (&no_tag)[1];
typedef char (&yes_tag)[2];

template< bool C_ > struct yes_no_tag
{
    typedef no_tag type;
};

template<> struct yes_no_tag<true>
{
    typedef yes_tag type;
};


template< long n > struct weighted_tag
{

    typedef char (&type)[n];




};
# 56 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/yes_no.hpp"
}}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp" 2








# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/gpu.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/pp_counter.hpp" 1
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp" 2
# 66 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp"
namespace mpl_ {

struct failed {};
# 79 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp"
template< bool C > struct assert { typedef void* type; };
template<> struct assert<false> { typedef assert type; };

template< bool C >
int assertion_failed( typename assert<C>::type );

template< bool C >
struct assertion
{
    static int failed( assert<false> );
};

template<>
struct assertion<true>
{
    static int failed( void* );
};

struct assert_
{

    template< typename T1, typename T2 = na, typename T3 = na, typename T4 = na > struct types {};

    static assert_ const arg;
    enum relations { equal = 1, not_equal, greater, greater_equal, less, less_equal };
};




bool operator==( failed, failed );
bool operator!=( failed, failed );
bool operator>( failed, failed );
bool operator>=( failed, failed );
bool operator<( failed, failed );
bool operator<=( failed, failed );





template< long x, long y, bool (*)(failed, failed) >
struct assert_relation {};
# 171 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp"
template< bool > struct assert_arg_pred_impl { typedef int type; };
template<> struct assert_arg_pred_impl<true> { typedef void* type; };

template< typename P > struct assert_arg_pred
{
    typedef typename P::type p_type;
    typedef typename assert_arg_pred_impl< p_type::value >::type type;
};

template< typename P > struct assert_arg_pred_not
{
    typedef typename P::type p_type;
    static const bool p = !p_type::value;
    typedef typename assert_arg_pred_impl<p>::type type;
};

template< typename Pred >
failed ************ (Pred::************
      assert_arg( void (*)(Pred), typename assert_arg_pred<Pred>::type )
    );

template< typename Pred >
failed ************ (boost::mpl::not_<Pred>::************
      assert_not_arg( void (*)(Pred), typename assert_arg_pred_not<Pred>::type )
    );

template< typename Pred >
assert<false>
assert_arg( void (*)(Pred), typename assert_arg_pred_not<Pred>::type );

template< typename Pred >
assert<false>
assert_not_arg( void (*)(Pred), typename assert_arg_pred<Pred>::type );
# 246 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/assert.hpp"
}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/na_assert.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/arity_spec.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/arg_typedef.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/arg.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/arg.hpp"
namespace mpl_ {
template<> struct arg< -1 >
{
    static const int value = -1;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_27 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<1>
{
    static const int value = 1;
    typedef arg<2> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_45 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<2>
{
    static const int value = 2;
    typedef arg<3> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U2 type;
        static const std::size_t mpl_assertion_in_line_63 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<3>
{
    static const int value = 3;
    typedef arg<4> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U3 type;
        static const std::size_t mpl_assertion_in_line_81 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<4>
{
    static const int value = 4;
    typedef arg<5> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U4 type;
        static const std::size_t mpl_assertion_in_line_99 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};

template<> struct arg<5>
{
    static const int value = 5;
    typedef arg<6> next;



    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U5 type;
        static const std::size_t mpl_assertion_in_line_117 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::assert_not_arg( (void (*) (boost::mpl::is_na<type>))0, 1 ) ) );
    };
};



}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum_params.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum_params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_params.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_params.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum_params.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum_shifted_params.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum_shifted_params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/punctuation/comma_if.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_shifted_params.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum_shifted_params.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2
# 57 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/template_arity.hpp" 1
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/template_arity.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/template_arity.hpp" 1
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/template_arity.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute_fwd.hpp" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute_fwd.hpp"
namespace boost {
namespace detail { namespace variant {
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute_fwd.hpp"
template <
      typename T, typename Dest, typename Source



    >
struct substitute;



}}
}
# 57 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2
# 143 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/limits/list.hpp" 1
# 143 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp" 2
# 179 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
namespace boost {

namespace detail { namespace variant {
# 195 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
struct void_;

template <typename T>
struct convert_void
{
    typedef T type;
};

template <>
struct convert_void< void_ >
{
    typedef mpl::na type;
};
# 243 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
}}
# 293 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
template < typename T0 = detail::variant::void_ , typename T1 = detail::variant::void_ , typename T2 = detail::variant::void_ , typename T3 = detail::variant::void_ , typename T4 = detail::variant::void_ , typename T5 = detail::variant::void_ , typename T6 = detail::variant::void_ , typename T7 = detail::variant::void_ , typename T8 = detail::variant::void_ , typename T9 = detail::variant::void_ , typename T10 = detail::variant::void_ , typename T11 = detail::variant::void_ , typename T12 = detail::variant::void_ , typename T13 = detail::variant::void_ , typename T14 = detail::variant::void_ , typename T15 = detail::variant::void_ , typename T16 = detail::variant::void_ , typename T17 = detail::variant::void_ , typename T18 = detail::variant::void_ , typename T19 = detail::variant::void_ > class variant;







template < typename T0 = detail::variant::void_ , typename T1 = detail::variant::void_ , typename T2 = detail::variant::void_ , typename T3 = detail::variant::void_ , typename T4 = detail::variant::void_ , typename T5 = detail::variant::void_ , typename T6 = detail::variant::void_ , typename T7 = detail::variant::void_ , typename T8 = detail::variant::void_ , typename T9 = detail::variant::void_ , typename T10 = detail::variant::void_ , typename T11 = detail::variant::void_ , typename T12 = detail::variant::void_ , typename T13 = detail::variant::void_ , typename T14 = detail::variant::void_ , typename T15 = detail::variant::void_ , typename T16 = detail::variant::void_ , typename T17 = detail::variant::void_ , typename T18 = detail::variant::void_ , typename T19 = detail::variant::void_ > struct make_recursive_variant;
# 312 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
    struct recursive_variant_ {};
# 322 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant_fwd.hpp"
template <typename Types> struct make_variant_over;






template <typename Types> struct make_recursive_variant_over;

}
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/backup_holder.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/backup_holder.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 1
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp"
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/backup_holder.hpp" 2


namespace boost {
namespace detail { namespace variant {

template <typename T>
class backup_holder
{
private:

    T* backup_;

public:

    ~backup_holder()
    {
        delete backup_;
    }

    explicit backup_holder(T* backup)
        : backup_(backup)
    {
    }

    backup_holder(const backup_holder&);

public:

    backup_holder& operator=(const backup_holder& rhs)
    {
        *backup_ = rhs.get();
        return *this;
    }

    backup_holder& operator=(const T& rhs)
    {
        *backup_ = rhs;
        return *this;
    }

    void swap(backup_holder& rhs)
    {
        T* tmp = rhs.backup_;
        rhs.backup_ = this->backup_;
        this->backup_ = tmp;
    }

public:

    T& get()
    {
        return *backup_;
    }

    const T& get() const
    {
        return *backup_;
    }

};

template <typename T>
backup_holder<T>::backup_holder(const backup_holder&)
    : backup_(0)
{

    (void)( (!!(false)) || (_wassert(L"false", L"C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/backup_holder.hpp", (unsigned)(83)), 0) );
}

template <typename T>
void swap(backup_holder<T>& lhs, backup_holder<T>& rhs)
{
    lhs.swap(rhs);
}

}}
}
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive_fwd.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive_fwd.hpp"
namespace boost {
namespace detail { namespace variant {
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive_fwd.hpp"
template <typename T>
struct recursive_flag
{
    typedef T type;
};
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive_fwd.hpp"
template <typename T>
struct is_recursive_flag
    : mpl::false_
{
};

template <typename T>
struct is_recursive_flag< recursive_flag<T> >
    : mpl::true_
{
};
# 66 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive_fwd.hpp"
template <
      typename T
    , typename RecursiveVariant
    , typename NoWrapper = mpl::false_
    >
struct enable_recursive;






template <
      typename RecursiveVariant
    , typename NoWrapper = mpl::false_
    >
struct quoted_enable_recursive;

}}
}
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/generic_result_type.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 1
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp"
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp" 2


namespace boost {
namespace detail { namespace variant {
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp"
template <typename T>
inline T forced_return()
{

    (void)( (!!(false)) || (_wassert(L"false", L"C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp", (unsigned)(39)), 0) );

    T (*dummy_function_ptr)() = 0;
    return dummy_function_ptr();
}

template <>
inline void forced_return<void>()
{

    (void)( (!!(false)) || (_wassert(L"false", L"C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp", (unsigned)(49)), 0) );
}
# 99 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/forced_return.hpp"
}}
}
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/call_traits.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/call_traits.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/detail/call_traits.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/detail/call_traits.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_arithmetic.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_arithmetic.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_integral.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_integral.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_integral.hpp" 2


namespace boost {







template< typename T > struct is_integral : public ::boost::integral_constant<bool,false> { public: };

template<> struct is_integral< unsigned char > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned char const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned char volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned char const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< unsigned short > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned short const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned short volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned short const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< unsigned int > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned int const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned int volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned int const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< unsigned long > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned long const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned long volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< unsigned long const volatile > : public ::boost::integral_constant<bool,true> { public: };

template<> struct is_integral< signed char > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed char const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed char volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed char const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< signed short > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed short const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed short volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed short const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< signed int > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed int const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed int volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed int const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< signed long > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed long const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed long volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< signed long const volatile > : public ::boost::integral_constant<bool,true> { public: };

template<> struct is_integral< bool > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< bool const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< bool volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< bool const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< char > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< char const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< char volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< char const volatile > : public ::boost::integral_constant<bool,true> { public: };





template<> struct is_integral< wchar_t > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< wchar_t const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< wchar_t volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< wchar_t const volatile > : public ::boost::integral_constant<bool,true> { public: };
# 64 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_integral.hpp"
template<> struct is_integral< ::boost::ulong_long_type > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< ::boost::ulong_long_type const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< ::boost::ulong_long_type volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< ::boost::ulong_long_type const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_integral< ::boost::long_long_type > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< ::boost::long_long_type const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< ::boost::long_long_type volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_integral< ::boost::long_long_type const volatile > : public ::boost::integral_constant<bool,true> { public: };
# 84 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_integral.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 86 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_integral.hpp" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_arithmetic.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_float.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_float.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_float.hpp" 2


namespace boost {


template< typename T > struct is_float : public ::boost::integral_constant<bool,false> { public: };
template<> struct is_float< float > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< float const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< float volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< float const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_float< double > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< double const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< double volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< double const volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_float< long double > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< long double const > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< long double volatile > : public ::boost::integral_constant<bool,true> { public: }; template<> struct is_float< long double const volatile > : public ::boost::integral_constant<bool,true> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_float.hpp" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_arithmetic.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_arithmetic.hpp" 2


namespace boost {


namespace detail {

template< typename T >
struct is_arithmetic_impl
{
    static const bool value = (::boost::type_traits::ice_or< ::boost::is_integral<T>::value, ::boost::is_float<T>::value >::value);




};

}






template< typename T > struct is_arithmetic : public ::boost::integral_constant<bool,::boost::detail::is_arithmetic_impl<T>::value> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 49 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_arithmetic.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/detail/call_traits.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/intrinsics.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_reference.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_reference.hpp" 2


namespace boost {

namespace detail {






template <typename T>
struct add_reference_rvalue_layer
{
    typedef T& type;
};
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_reference.hpp"
template <typename T>
struct add_reference_impl
{
    typedef typename add_reference_rvalue_layer<T>::type type;
};

template< typename T > struct add_reference_impl<T&> { public: typedef T& type; };


template<> struct add_reference_impl<void> { public: typedef void type; };

template<> struct add_reference_impl<void const> { public: typedef void const type; };
template<> struct add_reference_impl<void volatile> { public: typedef void volatile type; };
template<> struct add_reference_impl<void const volatile> { public: typedef void const volatile type; };


}

template< typename T > struct add_reference { public: typedef typename boost::detail::add_reference_impl<T>::type type; };







}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 70 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_reference.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_array.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_array.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_array.hpp" 2


namespace boost {




template< typename T > struct is_array : public ::boost::integral_constant<bool,false> { public: };

template< typename T, std::size_t N > struct is_array< T[N] > : public ::boost::integral_constant<bool,true> { public: };
template< typename T, std::size_t N > struct is_array< T const[N] > : public ::boost::integral_constant<bool,true> { public: };
template< typename T, std::size_t N > struct is_array< T volatile[N] > : public ::boost::integral_constant<bool,true> { public: };
template< typename T, std::size_t N > struct is_array< T const volatile[N] > : public ::boost::integral_constant<bool,true> { public: };

template< typename T > struct is_array< T[] > : public ::boost::integral_constant<bool,true> { public: };
template< typename T > struct is_array< T const[] > : public ::boost::integral_constant<bool,true> { public: };
template< typename T > struct is_array< T volatile[] > : public ::boost::integral_constant<bool,true> { public: };
template< typename T > struct is_array< T const volatile[] > : public ::boost::integral_constant<bool,true> { public: };





}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_array.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_void.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_void.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_void.hpp" 2


namespace boost {





template< typename T > struct is_void : public ::boost::integral_constant<bool,false> { public: };
template<> struct is_void< void > : public ::boost::integral_constant<bool,true> { public: };


template<> struct is_void< void const > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_void< void volatile > : public ::boost::integral_constant<bool,true> { public: };
template<> struct is_void< void const volatile > : public ::boost::integral_constant<bool,true> { public: };




}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_void.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_lvalue_reference.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_lvalue_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_lvalue_reference.hpp" 2


namespace boost{

template< typename T > struct add_lvalue_reference { public: typedef typename boost::add_reference<T>::type type; };





}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_lvalue_reference.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_rvalue_reference.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_rvalue_reference.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_rvalue_reference.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_rvalue_reference.hpp"
namespace boost {

namespace type_traits_detail {

    template <typename T, bool b>
    struct add_rvalue_reference_helper
    { typedef T type; };
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_rvalue_reference.hpp"
    template <typename T>
    struct add_rvalue_reference_imp
    {
       typedef typename boost::type_traits_detail::add_rvalue_reference_helper
                  <T, (is_void<T>::value == false && is_reference<T>::value == false) >::type type;
    };

}

template< typename T > struct add_rvalue_reference { public: typedef typename boost::type_traits_detail::add_rvalue_reference_imp<T>::type type; };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 63 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_rvalue_reference.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/false_result.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/false_result.hpp"
namespace boost {
namespace type_traits {


struct false_result
{
    template <typename T> struct result_
    {
        static const bool value = false;
    };
};

}}
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/is_function_ptr_tester.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/is_function_ptr_tester.hpp"
namespace boost {
namespace type_traits {



no_type is_function_ptr_tester(...);





template <class R >
yes_type is_function_ptr_tester(R (*)());
template <class R >
yes_type is_function_ptr_tester(R (*)( ...));

template <class R >
yes_type is_function_ptr_tester(R (__stdcall*)());

template <class R >
yes_type is_function_ptr_tester(R (__fastcall*)());

template <class R >
yes_type is_function_ptr_tester(R (__cdecl*)());

template <class R , class T0 >
yes_type is_function_ptr_tester(R (*)( T0));
template <class R , class T0 >
yes_type is_function_ptr_tester(R (*)( T0 ...));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (*)( T0 , T1));
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 ...));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2));
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 ...));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3));
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 ...));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
# 409 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/is_function_ptr_tester.hpp"
}
}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp" 2








namespace boost {



namespace detail {
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp"
template <typename T>
struct is_function_impl
{




    static T* t;
    static const bool value = sizeof(::boost::type_traits::is_function_ptr_tester(t)) == sizeof(::boost::type_traits::yes_type);






};

template <typename T>
struct is_function_impl<T&> : public false_type
{};
# 93 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp"
}






template< typename T > struct is_function : public ::boost::integral_constant<bool,::boost::detail::is_function_impl<T>::value> { public: };




}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 107 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_function.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2


namespace boost {
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
namespace detail {
# 303 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
template <typename From, typename To>
struct is_convertible_basic_impl
{
    static ::boost::type_traits::no_type _m_check(...);
    static ::boost::type_traits::yes_type _m_check(To);
    typedef typename add_lvalue_reference<From>::type lvalue_type;
    typedef typename add_rvalue_reference<From>::type rvalue_type;
    static lvalue_type _m_from;
# 323 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
    static const bool value = sizeof( _m_check(_m_from) ) == sizeof(::boost::type_traits::yes_type);






};
# 354 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
template <typename From, typename To>
struct is_convertible_impl
{
    static const bool value = (::boost::type_traits::ice_and< ::boost::type_traits::ice_or< ::boost::detail::is_convertible_basic_impl<From,To>::value, ::boost::is_void<To>::value >::value, ::boost::type_traits::ice_not< ::boost::is_array<To>::value >::value, ::boost::type_traits::ice_not< ::boost::is_function<To>::value >::value >::value);
# 371 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
};


template <bool trivial1, bool trivial2, bool abstract_target>
struct is_convertible_impl_select
{
   template <class From, class To>
   struct rebind
   {
      typedef is_convertible_impl<From, To> type;
   };
};

template <>
struct is_convertible_impl_select<true, true, false>
{
   template <class From, class To>
   struct rebind
   {
      typedef true_type type;
   };
};

template <>
struct is_convertible_impl_select<false, false, true>
{
   template <class From, class To>
   struct rebind
   {
      typedef false_type type;
   };
};

template <>
struct is_convertible_impl_select<true, false, true>
{
   template <class From, class To>
   struct rebind
   {
      typedef false_type type;
   };
};

template <typename From, typename To>
struct is_convertible_impl_dispatch_base
{

   typedef is_convertible_impl_select<
      ::boost::is_arithmetic<From>::value,
      ::boost::is_arithmetic<To>::value,




      false

   > selector;



   typedef typename selector::template rebind<From, To> isc_binder;
   typedef typename isc_binder::type type;
};

template <typename From, typename To>
struct is_convertible_impl_dispatch
   : public is_convertible_impl_dispatch_base<From, To>::type
{};
# 460 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
    template<> struct is_convertible_impl< void,void > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void,void const > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void,void volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void,void const volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const,void > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const,void const > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const,void volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const,void const volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void volatile,void > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void volatile,void const > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void volatile,void volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void volatile,void const volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const volatile,void > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const volatile,void const > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const volatile,void volatile > { public: static const bool value = (true); }; template<> struct is_convertible_impl< void const volatile,void const volatile > { public: static const bool value = (true); };
# 469 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp"
template< typename To > struct is_convertible_impl< void,To > { public: static const bool value = (false); };
template< typename From > struct is_convertible_impl< From,void > { public: static const bool value = (false); };

template< typename To > struct is_convertible_impl< void const,To > { public: static const bool value = (false); };
template< typename To > struct is_convertible_impl< void volatile,To > { public: static const bool value = (false); };
template< typename To > struct is_convertible_impl< void const volatile,To > { public: static const bool value = (false); };
template< typename From > struct is_convertible_impl< From,void const > { public: static const bool value = (false); };
template< typename From > struct is_convertible_impl< From,void volatile > { public: static const bool value = (false); };
template< typename From > struct is_convertible_impl< From,void const volatile > { public: static const bool value = (false); };


}

template< typename From, typename To > struct is_convertible : public ::boost::integral_constant<bool,(::boost::detail::is_convertible_impl_dispatch<From,To>::value)> { public: };







}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 492 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_convertible.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_union.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_union.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_union.hpp" 2


namespace boost {

namespace detail {

template <typename T> struct is_union_impl
{
   typedef typename remove_cv<T>::type cvt;



   static const bool value = false;

};
# 49 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_union.hpp"
}

template< typename T > struct is_union : public ::boost::integral_constant<bool,::boost::detail::is_union_impl<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_union.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp" 2


namespace boost {

namespace detail {
# 75 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp"
template <typename T>
struct is_class_impl
{
    template <class U> static ::boost::type_traits::yes_type is_class_tester(void(U::*)(void));
    template <class U> static ::boost::type_traits::no_type is_class_tester(...);

    static const bool value = (::boost::type_traits::ice_and< sizeof(is_class_tester<T>(0)) == sizeof(::boost::type_traits::yes_type), ::boost::type_traits::ice_not< ::boost::is_union<T>::value >::value >::value);





};
# 116 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp"
}





template< typename T > struct is_class : public ::boost::integral_constant<bool,::boost::detail::is_class_impl<T>::value> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 127 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_class.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 2


namespace boost {




namespace detail {



template <typename T>
struct is_class_or_union
{
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_class<T>::value , ::boost::is_union<T>::value >::value);




};
# 77 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp"
struct int_convertible
{
    int_convertible(int);
};



template <bool is_typename_arithmetic_or_reference = true>
struct is_enum_helper
{
    template <typename T> struct type
    {
        static const bool value = false;
    };
};

template <>
struct is_enum_helper<false>
{
    template <typename T> struct type
       : public ::boost::is_convertible<typename boost::add_reference<T>::type,::boost::detail::int_convertible>
    {
    };
};

template <typename T> struct is_enum_impl
{
# 136 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp"
   static const bool selector = (::boost::type_traits::ice_or< ::boost::is_arithmetic<T>::value , ::boost::is_reference<T>::value , is_class_or_union<T>::value , is_array<T>::value >::value);
# 151 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp"
    typedef ::boost::detail::is_enum_helper<selector> se_t;


    typedef typename se_t::template type<T> helper;
    static const bool value = helper::value;
};


template<> struct is_enum_impl< void > { public: static const bool value = (false); };

template<> struct is_enum_impl< void const > { public: static const bool value = (false); };
template<> struct is_enum_impl< void volatile > { public: static const bool value = (false); };
template<> struct is_enum_impl< void const volatile > { public: static const bool value = (false); };


}

template< typename T > struct is_enum : public ::boost::integral_constant<bool,::boost::detail::is_enum_impl<T>::value> { public: };
# 184 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 186 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_enum.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/detail/call_traits.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
namespace boost {
namespace type_traits {

no_type is_mem_fun_pointer_tester(...);





template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const volatile);


template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const volatile);



template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const volatile);



template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const volatile);



template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const volatile);



template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);



template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);
# 1709 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
}
}
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp" 2


namespace boost {
# 51 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp"
namespace detail {



template <bool>
struct is_mem_fun_pointer_select
    : public ::boost::type_traits::false_result
{
};

template <>
struct is_mem_fun_pointer_select<false>
{
    template <typename T> struct result_
    {




        static T* make_t;
        typedef result_<T> self_type;

        static const bool value = ( 1 == sizeof(::boost::type_traits::is_mem_fun_pointer_tester(self_type::make_t)) );






    };
};

template <typename T>
struct is_member_function_pointer_impl
    : public is_mem_fun_pointer_select<
          ::boost::type_traits::ice_or<
              ::boost::is_reference<T>::value
            , ::boost::is_array<T>::value
            >::value
        >::template result_<T>
{
};

template <typename T>
struct is_member_function_pointer_impl<T&> : public false_type{};
# 116 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp"
template<> struct is_member_function_pointer_impl< void > { public: static const bool value = (false); };

template<> struct is_member_function_pointer_impl< void const > { public: static const bool value = (false); };
template<> struct is_member_function_pointer_impl< void volatile > { public: static const bool value = (false); };
template<> struct is_member_function_pointer_impl< void const volatile > { public: static const bool value = (false); };


}

template< typename T > struct is_member_function_pointer : public ::boost::integral_constant<bool,::boost::detail::is_member_function_pointer_impl<T>::value> { public: };



}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 131 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_function_pointer.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp" 2
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 39 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp" 2


namespace boost {
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp"
template< typename T > struct is_member_pointer : public ::boost::integral_constant<bool,::boost::is_member_function_pointer<T>::value> { public: };
template< typename T, typename U > struct is_member_pointer< U T::* > : public ::boost::integral_constant<bool,true> { public: };


template< typename T, typename U > struct is_member_pointer< U T::*const > : public ::boost::integral_constant<bool,true> { public: };
template< typename T, typename U > struct is_member_pointer< U T::*volatile > : public ::boost::integral_constant<bool,true> { public: };
template< typename T, typename U > struct is_member_pointer< U T::*const volatile > : public ::boost::integral_constant<bool,true> { public: };




}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 63 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_member_pointer.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp" 2








# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp" 2


namespace boost {





namespace detail {

template< typename T > struct is_pointer_helper
{
    static const bool value = false;
};
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp"
template< typename T > struct is_pointer_helper<T*> { static const bool value = true; };



template< typename T >
struct is_pointer_impl
{
    static const bool value = (::boost::type_traits::ice_and< ::boost::detail::is_pointer_helper<typename remove_cv<T>::type>::value , ::boost::type_traits::ice_not< ::boost::is_member_pointer<T>::value >::value >::value);







};

}

template< typename T > struct is_pointer : public ::boost::integral_constant<bool,::boost::detail::is_pointer_impl<T>::value> { public: };
# 84 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp"
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 86 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pointer.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/detail/call_traits.hpp" 2



namespace boost{

namespace detail{

template <typename T, bool small_>
struct ct_imp2
{
   typedef const T& param_type;
};

template <typename T>
struct ct_imp2<T, true>
{
   typedef const T param_type;
};

template <typename T, bool isp, bool b1, bool b2>
struct ct_imp
{
   typedef const T& param_type;
};

template <typename T, bool isp, bool b2>
struct ct_imp<T, isp, true, b2>
{
   typedef typename ct_imp2<T, sizeof(T) <= sizeof(void*)>::param_type param_type;
};

template <typename T, bool isp, bool b1>
struct ct_imp<T, isp, b1, true>
{
   typedef typename ct_imp2<T, sizeof(T) <= sizeof(void*)>::param_type param_type;
};

template <typename T, bool b1, bool b2>
struct ct_imp<T, true, b1, b2>
{
   typedef const T param_type;
};

}

template <typename T>
struct call_traits
{
public:
   typedef T value_type;
   typedef T& reference;
   typedef const T& const_reference;






   typedef typename boost::detail::ct_imp<
      T,
      ::boost::is_pointer<T>::value,
      ::boost::is_arithmetic<T>::value,
      ::boost::is_enum<T>::value
   >::param_type param_type;
};

template <typename T>
struct call_traits<T&>
{
   typedef T& value_type;
   typedef T& reference;
   typedef const T& const_reference;
   typedef T& param_type;
};
# 143 "C:/Programing/Libs/boost_1_59_0\\boost/detail/call_traits.hpp"
template <typename T, std::size_t N>
struct call_traits<T [N]>
{
private:
   typedef T array_type[N];
public:

   typedef const T* value_type;
   typedef array_type& reference;
   typedef const array_type& const_reference;
   typedef const T* const param_type;
};

template <typename T, std::size_t N>
struct call_traits<const T [N]>
{
private:
   typedef const T array_type[N];
public:

   typedef const T* value_type;
   typedef array_type& reference;
   typedef const array_type& const_reference;
   typedef const T* const param_type;
};


}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/call_traits.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/detail/reference_content.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/detail/reference_content.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_copy.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_copy.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pod.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pod.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_scalar.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_scalar.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_scalar.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct is_scalar_impl
{
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_arithmetic<T>::value, ::boost::is_enum<T>::value, ::boost::is_pointer<T>::value, ::boost::is_member_pointer<T>::value >::value);






};



template <> struct is_scalar_impl<void>{ static const bool value = false; };

template <> struct is_scalar_impl<void const>{ static const bool value = false; };
template <> struct is_scalar_impl<void volatile>{ static const bool value = false; };
template <> struct is_scalar_impl<void const volatile>{ static const bool value = false; };


}

template< typename T > struct is_scalar : public ::boost::integral_constant<bool,::boost::detail::is_scalar_impl<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 53 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_scalar.hpp" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pod.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pod.hpp" 2








namespace boost {


template< typename T > struct is_POD;

namespace detail {


template <typename T> struct is_pod_impl
{
    static const bool value = (::boost::type_traits::ice_or< ::boost::is_scalar<T>::value, ::boost::is_void<T>::value, false >::value);






};


template <typename T, std::size_t sz>
struct is_pod_impl<T[sz]>
    : public is_pod_impl<T>
{
};




template<> struct is_pod_impl< void > { public: static const bool value = (true); };


template<> struct is_pod_impl< void const > { public: static const bool value = (true); };
template<> struct is_pod_impl< void volatile > { public: static const bool value = (true); };
template<> struct is_pod_impl< void const volatile > { public: static const bool value = (true); };


}

template< typename T > struct is_pod : public ::boost::integral_constant<bool,::boost::detail::is_pod_impl<T>::value> { public: };


template< typename T > struct is_POD : public ::boost::integral_constant<bool,::boost::is_pod<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 75 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_pod.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct has_trivial_copy_impl
{







   static const bool value = (::boost::type_traits::ice_and< ::boost::is_pod<T>::value, ::boost::type_traits::ice_not< ::boost::is_volatile<T>::value >::value >::value);





};
# 59 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp"
}

template< typename T > struct has_trivial_copy : public ::boost::integral_constant<bool,::boost::detail::has_trivial_copy_impl<T>::value> { public: };
template< typename T > struct has_trivial_copy_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_copy_impl<T>::value> { public: };

template<> struct has_trivial_copy< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_trivial_copy< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_copy< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_copy< void volatile > : public ::boost::integral_constant<bool,false> { public: };


template<> struct has_trivial_copy_constructor< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_trivial_copy_constructor< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_copy_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_copy_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 80 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_copy.hpp" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_copy.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_copy.hpp" 2


namespace boost {

namespace detail{

template <class T>
struct has_nothrow_copy_imp{



   static const bool value = ::boost::has_trivial_copy<T>::value;

};

}

template< typename T > struct has_nothrow_copy : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_copy_imp<T>::value> { public: };
template< typename T > struct has_nothrow_copy_constructor : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_copy_imp<T>::value> { public: };

template<> struct has_nothrow_copy< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_nothrow_copy< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_copy< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_copy< void volatile > : public ::boost::integral_constant<bool,false> { public: };


template<> struct has_nothrow_copy_constructor< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_nothrow_copy_constructor< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_copy_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_copy_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 51 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_copy.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/detail/reference_content.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/void.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/void.hpp"
namespace mpl_ {





struct void_ { typedef void_ type; };

}

namespace boost { namespace mpl {

template< typename T >
struct is_void_
    : false_
{



};

template<>
struct is_void_<void_>
    : true_
{



};

template< typename T >
struct is_not_void_
    : true_
{



};

template<>
struct is_not_void_<void_>
    : false_
{



};

template<> struct is_void_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : is_void_< T1 > { }; }; template< typename Tag > struct lambda< is_void_< na > , Tag > { typedef false_ is_le; typedef is_void_< na > result_; typedef is_void_< na > type; };
template<> struct is_not_void_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : is_not_void_< T1 > { }; }; template< typename Tag > struct lambda< is_not_void_< na > , Tag > { typedef false_ is_le; typedef is_not_void_< na > result_; typedef is_not_void_< na > type; };

}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/detail/reference_content.hpp" 2


namespace boost {

namespace detail {






template <typename RefT>
class reference_content
{
private:

    RefT content_;

public:

    ~reference_content()
    {
    }

    reference_content(RefT r)
        : content_( r )
    {
    }

    reference_content(const reference_content& operand)
        : content_( operand.content_ )
    {
    }

private:

    reference_content& operator=(const reference_content&);

public:

    RefT get() const
    {
        return content_;
    }

};







template <typename T = mpl::void_> struct make_reference_content;


template <typename T>
struct make_reference_content
{
    typedef T type;
};

template <typename T>
struct make_reference_content< T& >
{
    typedef reference_content<T&> type;
};


template <>
struct make_reference_content< mpl::void_ >
{
    template <typename T>
    struct apply
        : make_reference_content<T>
    {
    };

    typedef mpl::void_ type;
};

}






template <typename T>
struct has_nothrow_copy<
      ::boost::detail::reference_content< T& >
    >
    : mpl::true_
{
};


}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper_fwd.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper_fwd.hpp"
namespace boost {
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper_fwd.hpp"
template <typename T> class recursive_wrapper;







namespace detail {


template <typename T>
struct is_recursive_wrapper_impl
    : mpl::false_
{
};

template <typename T>
struct is_recursive_wrapper_impl< recursive_wrapper<T> >
    : mpl::true_
{
};


}

template< typename T > struct is_recursive_wrapper
    : public ::boost::integral_constant<bool,(::boost::detail::is_recursive_wrapper_impl<T>::value)>
{
public:

};
# 80 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper_fwd.hpp"
template <typename T>
struct unwrap_recursive
{
    typedef T type;


};

template <typename T>
struct unwrap_recursive< recursive_wrapper<T> >
{
    typedef T type;


};


}
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/move.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/move.hpp"
# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator" 1 3








#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Container>
 class back_insert_iterator
  : public _Outit
 {
public:
 typedef back_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit back_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_back(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_back(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<back_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 back_insert_iterator<_Container> back_inserter(_Container& _Cont)
 {
 return (back_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class front_insert_iterator
  : public _Outit
 {
public:
 typedef front_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit front_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_front(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_front(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<front_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 front_insert_iterator<_Container> front_inserter(_Container& _Cont)
 {
 return (front_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class insert_iterator
  : public _Outit
 {
public:
 typedef insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
  : container(::std:: addressof(_Cont)), iter(_Where)
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  iter = container->insert(iter, _Val);
  ++iter;
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
  ++iter;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 typename _Container::iterator iter;
 };

template<class _Container>
 struct _Is_checked_helper<insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 insert_iterator<_Container> inserter(_Container& _Cont,
  typename _Container::iterator _Where)
 {
 return (insert_iterator<_Container>(_Cont, _Where));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem>,
 class _Diff = ptrdiff_t>
 class istream_iterator
  : public iterator<input_iterator_tag, _Ty, _Diff,
   const _Ty *, const _Ty&>
 {
 typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef const _Ty *pointer;

 constexpr istream_iterator()
  : _Myistr(0), _Myval()
  {
  }

 istream_iterator(istream_type& _Istr)
  : _Myistr(&_Istr)
  {
  _Getval();
  }

 const _Ty& operator*() const
  {
  return (_Myval);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  _Getval();
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool _Equal(const _Myt& _Right) const
  {
  return (_Myistr == _Right._Myistr);
  }

protected:
 void _Getval()
  {
  if (_Myistr != 0 && !(*_Myistr >> _Myval))
   _Myistr = 0;
  }

 istream_type *_Myistr;
 _Ty _Myval;
 };

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff>
 struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
  : public true_type
 {
 };


template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator==(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator!=(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (!(_Left == _Right));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem> >
 class ostream_iterator
  : public _Outit
 {
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostream_iterator(ostream_type& _Ostr,
  const _Elem *_Delim = 0)
  : _Myostr(&_Ostr), _Mydelim(_Delim)
  {
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator=(const _Ty& _Val)
  {
  *_Myostr << _Val;
  if (_Mydelim != 0)
   *_Myostr << _Mydelim;
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator*()
  {
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator++()
  {
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator++(int)
  {
  return (*this);
  }

protected:
 const _Elem *_Mydelim;
 ostream_type *_Myostr;
 };

template<class _Ty,
 class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
  : public true_type
 {
 };
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;


template<class _Iterator>
 class checked_array_iterator
 {
public:
 typedef checked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 checked_array_iterator()
  : _Myarray(), _Mysize(0), _Myindex(0)
  {
  }

 checked_array_iterator(_Iterator _Array, size_t _Size,
  size_t _Index = 0)
  : _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
  {
  { if (!(_Index <= _Size)) { (void)( (!!(("_Index <= _Size" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 383, 0, L"%ls", L"\"_Index <= _Size\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 383, 0); } ; };
  }

 _Iterator base() const
  {
  return (_Myarray + _Myindex);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myindex = _Right - _Myarray;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { (void)( (!!(("_Myarray != 0 && _Myindex < _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 407, 0, L"%ls", L"\"_Myarray != 0 && _Myindex < _Mysize\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 407, 0); } ; };

  return (_Myarray[_Myindex]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { (void)( (!!(("_Myarray != 0 && _Myindex < _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 419, 0, L"%ls", L"\"_Myarray != 0 && _Myindex < _Mysize\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 419, 0); } ; };

  ++_Myindex;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  { if (!(_Myarray != 0 && 0 < _Myindex)) { (void)( (!!(("_Myarray != 0 && 0 < _Myindex" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 434, 0, L"%ls", L"\"_Myarray != 0 && 0 < _Myindex\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 434, 0); } ; };

  --_Myindex;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  { if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { (void)( (!!(("_Myarray != 0 && _Myindex + _Off <= _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 449, 0, L"%ls", L"\"_Myarray != 0 && _Myindex + _Off <= _Mysize\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 449, 0); } ; };

  _Myindex += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void)( (!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 473, 0, L"%ls", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 473, 0); } ; };
  return (_Myindex - _Right._Myindex);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void)( (!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 484, 0, L"%ls", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 484, 0); } ; };
  return (_Myindex == _Right._Myindex);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void)( (!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 495, 0, L"%ls", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0) ); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\iterator", 495, 0); } ; };
  return (_Myindex < _Right._Myindex);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myarray;
 size_t _Mysize;
 size_t _Myindex;
 };

template<class _Iterator> inline
 typename checked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(checked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator>&
  _Rechecked(checked_array_iterator<_Iterator>& _Iter,
   typename checked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> operator+(
  typename checked_array_iterator<_Iterator>::difference_type _Off,
  checked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> make_checked_array_iterator(
  _Iterator _Array, size_t _Size, size_t _Index = 0)
 {
 return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
 }


template<class _Iterator>
 class unchecked_array_iterator
 {
public:
 typedef unchecked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 unchecked_array_iterator()
  : _Myptr()
  {
  }

 explicit unchecked_array_iterator(_Iterator _Ptr)
  : _Myptr(_Ptr)
  {
  }

 _Iterator base() const
  {
  return (_Myptr);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  return (*_Myptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  ++_Myptr;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --_Myptr;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  _Myptr += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Myptr - _Right._Myptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  return (_Myptr == _Right._Myptr);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  return (_Myptr < _Right._Myptr);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myptr;
 };

template<class _Iterator> inline
 typename unchecked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(unchecked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator>&
  _Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
   typename unchecked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> operator+(
  typename unchecked_array_iterator<_Iterator>::difference_type _Off,
  unchecked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
  _Iterator _Ptr)
 {
 return (unchecked_array_iterator<_Iterator>(_Ptr));
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/move.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility_core.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility_core.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility_core.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/workaround.hpp" 1
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp" 2
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils_core.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils_core.hpp"
namespace boost {
namespace move_detail {




template<bool C, typename T1, typename T2>
struct if_c
{
   typedef T1 type;
};

template<typename T1, typename T2>
struct if_c<false,T1,T2>
{
   typedef T2 type;
};




template<typename T1, typename T2, typename T3>
struct if_ : if_c<0 != T1::value, T2, T3>
{};




template <bool B, class T = void>
struct enable_if_c
{
   typedef T type;
};

template <class T>
struct enable_if_c<false, T> {};




template <class Cond, class T = void>
struct enable_if : enable_if_c<Cond::value, T> {};




template <bool B, class T = void>
struct disable_if_c
   : enable_if_c<!B, T>
{};




template <class Cond, class T = void>
struct disable_if : enable_if_c<!Cond::value, T> {};




template<class T, T v>
struct integral_constant
{
   static const T value = v;
   typedef T value_type;
   typedef integral_constant<T, v> type;

     operator T() const { return value; }
   T operator()() const { return value; }
};

typedef integral_constant<bool, true > true_type;
typedef integral_constant<bool, false > false_type;





template<class T, class U>
struct is_same
{
   static const bool value = false;
};

template<class T>
struct is_same<T, T>
{
   static const bool value = true;
};

}
}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp" 2





namespace boost {


template <class T> class rv;

namespace move_detail {




template<class T, class U>
struct is_different
{
   static const bool value = !is_same<T, U>::value;
};




template<class F, class Param>
struct apply
{
   typedef typename F::template apply<Param>::type type;
};





template< bool C_ >
struct bool_ : integral_constant<bool, C_>
{
     operator bool() const { return C_; }
   bool operator()() const { return C_; }
};

typedef bool_<true> true_;
typedef bool_<false> false_;




struct nat{};




typedef char yes_type;

struct no_type
{
   char _[2];
};




template <class T> struct natify{};




template<class T>
struct remove_reference
{
   typedef T type;
};

template<class T>
struct remove_reference<T&>
{
   typedef T type;
};
# 113 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
template<class T>
struct remove_reference< rv<T> >
{
   typedef T type;
};

template<class T>
struct remove_reference< rv<T> &>
{
   typedef T type;
};

template<class T>
struct remove_reference< const rv<T> &>
{
   typedef T type;
};







template< class T > struct remove_pointer { typedef T type; };
template< class T > struct remove_pointer<T*> { typedef T type; };
template< class T > struct remove_pointer<T* const> { typedef T type; };
template< class T > struct remove_pointer<T* volatile> { typedef T type; };
template< class T > struct remove_pointer<T* const volatile> { typedef T type; };




template< class T >
struct add_pointer
{
   typedef typename remove_reference<T>::type* type;
};




template<class T>
struct add_const
{
   typedef const T type;
};

template<class T>
struct add_const<T&>
{
   typedef const T& type;
};
# 180 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
template<class T>
struct add_lvalue_reference
{ typedef T& type; };

template<class T> struct add_lvalue_reference<T&> { typedef T& type; };
template<> struct add_lvalue_reference<void> { typedef void type; };
template<> struct add_lvalue_reference<const void> { typedef const void type; };
template<> struct add_lvalue_reference<volatile void> { typedef volatile void type; };
template<> struct add_lvalue_reference<const volatile void>{ typedef const volatile void type; };

template<class T>
struct add_const_lvalue_reference
{
   typedef typename remove_reference<T>::type t_unreferenced;
   typedef typename add_const<t_unreferenced>::type t_unreferenced_const;
   typedef typename add_lvalue_reference
      <t_unreferenced_const>::type type;
};




template<class T>
struct is_lvalue_reference
{
    static const bool value = false;
};

template<class T>
struct is_lvalue_reference<T&>
{
    static const bool value = true;
};





template <class T>
struct identity
{
   typedef T type;
   typedef typename add_const_lvalue_reference<T>::type reference;
   reference operator()(reference t)
   { return t; }
};




template<class T>
struct is_class_or_union
{
   struct twochar { char dummy[2]; };
   template <class U>
   static char is_class_or_union_tester(void(U::*)(void));
   template <class U>
   static twochar is_class_or_union_tester(...);
   static const bool value = sizeof(is_class_or_union_tester<T>(0)) == sizeof(char);
};




template<class T>
struct addr_impl_ref
{
   T & v_;
   inline addr_impl_ref( T & v ): v_( v ) {}
   inline operator T& () const { return v_; }

   private:
   addr_impl_ref & operator=(const addr_impl_ref &);
};

template<class T>
struct addressof_impl
{
   static inline T * f( T & v, long )
   {
      return reinterpret_cast<T*>(
         &const_cast<char&>(reinterpret_cast<const volatile char &>(v)));
   }

   static inline T * f( T * v, int )
   { return v; }
};

template<class T>
inline T * addressof( T & v )
{
   return ::boost::move_detail::addressof_impl<T>::f
      ( ::boost::move_detail::addr_impl_ref<T>( v ), 0 );
}




template <class T>
struct has_pointer_type
{
   struct two { char c[2]; };
   template <class U> static two test(...);
   template <class U> static char test(typename U::pointer* = 0);
   static const bool value = sizeof(test<T>(0)) == 1;
};
# 294 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
template <class T, class U>
struct is_convertible
{
   static const bool value = __is_convertible_to(T, U);
};
# 317 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
template<
      bool C
    , typename F1
    , typename F2
    >
struct eval_if_c
    : if_c<C,F1,F2>::type
{};

template<
      typename C
    , typename T1
    , typename T2
    >
struct eval_if
    : if_<C,T1,T2>::type
{};

template<class T, class U, class R = void>
struct enable_if_convertible
   : enable_if< is_convertible<T, U>, R>
{};

template<class T, class U, class R = void>
struct disable_if_convertible
   : disable_if< is_convertible<T, U>, R>
{};






template<bool, class B = true_, class C = true_, class D = true_>
struct and_impl
   : and_impl<B::value, C, D>
{};

template<>
struct and_impl<true, true_, true_, true_>
{
   static const bool value = true;
};

template<class B, class C, class D>
struct and_impl<false, B, C, D>
{
   static const bool value = false;
};

template<class A, class B, class C = true_, class D = true_>
struct and_
   : and_impl<A::value, B, C, D>
{};






template<bool, class B = false_, class C = false_, class D = false_>
struct or_impl
   : or_impl<B::value, C, D>
{};

template<>
struct or_impl<false, false_, false_, false_>
{
   static const bool value = false;
};

template<class B, class C, class D>
struct or_impl<true, B, C, D>
{
   static const bool value = true;
};

template<class A, class B, class C = false_, class D = false_>
struct or_
   : or_impl<A::value, B, C, D>
{};






template<class T>
struct not_
{
   static const bool value = !T::value;
};







template<class R, class A, class B, class C = true_, class D = true_>
struct enable_if_and
   : enable_if_c< and_<A, B, C, D>::value, R>
{};

template<class R, class A, class B, class C = true_, class D = true_>
struct disable_if_and
   : disable_if_c< and_<A, B, C, D>::value, R>
{};

template<class R, class A, class B, class C = false_, class D = false_>
struct enable_if_or
   : enable_if_c< or_<A, B, C, D>::value, R>
{};

template<class R, class A, class B, class C = false_, class D = false_>
struct disable_if_or
   : disable_if_c< or_<A, B, C, D>::value, R>
{};






template<class T>
struct has_move_emulation_enabled_impl
   : is_convertible< T, ::boost::rv<T>& >
{};

template<class T>
struct has_move_emulation_enabled_impl<T&>
{ static const bool value = false; };

template<class T>
struct has_move_emulation_enabled_impl< ::boost::rv<T> >
{ static const bool value = false; };







template <class T>
struct is_rv_impl
{ static const bool value = false; };

template <class T>
struct is_rv_impl< rv<T> >
{ static const bool value = true; };

template <class T>
struct is_rv_impl< const rv<T> >
{ static const bool value = true; };



template< class T >
struct is_rvalue_reference
{ static const bool value = false; };
# 486 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
template< class T >
struct is_rvalue_reference< boost::rv<T>& >
{ static const bool value = true; };

template< class T >
struct is_rvalue_reference< const boost::rv<T>& >
{ static const bool value = true; };
# 504 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
namespace detail_add_rvalue_reference
{
   template< class T
            , bool emulation = has_move_emulation_enabled_impl<T>::value
            , bool rv = is_rv_impl<T>::value >
   struct add_rvalue_reference_impl { typedef T type; };

   template< class T, bool emulation>
   struct add_rvalue_reference_impl< T, emulation, true > { typedef T & type; };

   template< class T, bool rv >
   struct add_rvalue_reference_impl< T, true, rv > { typedef ::boost::rv<T>& type; };
}

template< class T >
struct add_rvalue_reference
   : detail_add_rvalue_reference::add_rvalue_reference_impl<T>
{ };

template< class T >
struct add_rvalue_reference<T &>
{ typedef T & type; };



template< class T > struct remove_rvalue_reference { typedef T type; };




   template< class T > struct remove_rvalue_reference< rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< volatile rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const volatile rv<T> > { typedef T type; };
   template< class T > struct remove_rvalue_reference< rv<T>& > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const rv<T>& > { typedef T type; };
   template< class T > struct remove_rvalue_reference< volatile rv<T>& > { typedef T type; };
   template< class T > struct remove_rvalue_reference< const volatile rv<T>& >{ typedef T type; };
# 556 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/meta_utils.hpp"
}
}
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 1
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp"
# 1 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h" 1
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(push, 8)
# 14 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
 extern "C" {
# 26 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
    __declspec(dllimport) void __cdecl _wassert(
               wchar_t const* _Message,
               wchar_t const* _File,
               unsigned _Line
        );
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
}
# 41 "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt\\assert.h"
#pragma pack(pop)
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/assert.hpp" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp" 2
# 315 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
namespace boost {
namespace move_detail {




template<class T>
struct is_reference
{ static const bool value = false; };

template<class T>
struct is_reference<T&>
{ static const bool value = true; };
# 338 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template<class T>
struct is_pointer
{ static const bool value = false; };

template<class T>
struct is_pointer<T*>
{ static const bool value = true; };




template<class T>
struct is_const
{ static const bool value = false; };

template<class T>
struct is_const<const T>
{ static const bool value = true; };




template <typename T> struct unvoid_ref : add_lvalue_reference<T>{};
template <> struct unvoid_ref<void> { typedef unvoid_ref & type; };
template <> struct unvoid_ref<const void> { typedef unvoid_ref & type; };
template <> struct unvoid_ref<volatile void> { typedef unvoid_ref & type; };
template <> struct unvoid_ref<const volatile void> { typedef unvoid_ref & type; };

template <typename T>
struct add_reference : add_lvalue_reference<T>
{};




template <class T>
struct add_const_reference
{ typedef const T &type; };

template <class T>
struct add_const_reference<T&>
{ typedef T& type; };




template<class T, bool Add>
struct add_const_if_c
   : if_c<Add, typename add_const<T>::type, T>
{};




template<class T>
struct remove_const
{ typedef T type; };

template<class T>
struct remove_const< const T>
{ typedef T type; };




template<typename T> struct remove_cv { typedef T type; };
template<typename T> struct remove_cv<const T> { typedef T type; };
template<typename T> struct remove_cv<const volatile T> { typedef T type; };
template<typename T> struct remove_cv<volatile T> { typedef T type; };




template <class T>
struct make_unsigned_impl { typedef T type; };
template <> struct make_unsigned_impl<signed char> { typedef unsigned char type; };
template <> struct make_unsigned_impl<signed short> { typedef unsigned short type; };
template <> struct make_unsigned_impl<signed int> { typedef unsigned int type; };
template <> struct make_unsigned_impl<signed long> { typedef unsigned long type; };

template <> struct make_unsigned_impl< ::boost::long_long_type > { typedef ::boost::ulong_long_type type; };


template <class T>
struct make_unsigned
   : make_unsigned_impl<typename remove_cv<T>::type>
{};




template<class T> struct is_floating_point_cv { static const bool value = false; };
template<> struct is_floating_point_cv<float> { static const bool value = true; };
template<> struct is_floating_point_cv<double> { static const bool value = true; };
template<> struct is_floating_point_cv<long double> { static const bool value = true; };

template<class T>
struct is_floating_point
   : is_floating_point_cv<typename remove_cv<T>::type>
{};




template<class T> struct is_integral_cv { static const bool value = false; };
template<> struct is_integral_cv< bool>{ static const bool value = true; };
template<> struct is_integral_cv< char>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned char>{ static const bool value = true; };
template<> struct is_integral_cv< signed char>{ static const bool value = true; };







template<> struct is_integral_cv< wchar_t>{ static const bool value = true; };

template<> struct is_integral_cv< short>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned short>{ static const bool value = true; };
template<> struct is_integral_cv< int>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned int>{ static const bool value = true; };
template<> struct is_integral_cv< long>{ static const bool value = true; };
template<> struct is_integral_cv< unsigned long>{ static const bool value = true; };

template<> struct is_integral_cv< ::boost:: long_long_type>{ static const bool value = true; };
template<> struct is_integral_cv< ::boost::ulong_long_type>{ static const bool value = true; };


template<class T>
struct is_integral
   : public is_integral_cv<typename remove_cv<T>::type>
{};




template <class T>
struct remove_all_extents
{ typedef T type;};

template <class T>
struct remove_all_extents<T[]>
{ typedef typename remove_all_extents<T>::type type; };

template <class T, size_t N>
struct remove_all_extents<T[N]>
{ typedef typename remove_all_extents<T>::type type;};




template<class T>
struct is_scalar
{ static const bool value = is_integral<T>::value || is_floating_point<T>::value; };




template<class T>
struct is_void_cv
{ static const bool value = false; };

template<>
struct is_void_cv<void>
{ static const bool value = true; };

template<class T>
struct is_void
   : is_void_cv<typename remove_cv<T>::type>
{};




template<class T>
struct is_array
{ static const bool value = false; };

template<class T>
struct is_array<T[]>
{ static const bool value = true; };

template<class T, std::size_t N>
struct is_array<T[N]>
{ static const bool value = true; };




template <class T> struct is_member_pointer_cv { static const bool value = false; };
template <class T, class U>struct is_member_pointer_cv<T U::*> { static const bool value = true; };

template <class T>
struct is_member_pointer
    : is_member_pointer_cv<typename remove_cv<T>::type>
{};




template <class T>
struct is_nullptr_t_cv
{ static const bool value = false; };
# 554 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template <class T>
struct is_nullptr_t
   : is_nullptr_t_cv<typename remove_cv<T>::type>
{};
# 566 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template <class T>
struct is_reference_convertible_to_pointer
{
   struct twochar { char dummy[2]; };
   template <class U> static char test(U*);
   template <class U> static twochar test(...);
   static T& source();
   static const bool value = sizeof(char) == sizeof(test<T>(source()));
};





template < class T
         , bool Filter = is_class_or_union<T>::value ||
                         is_void<T>::value ||
                         is_reference<T>::value ||
                         is_nullptr_t<T>::value >
struct is_function_impl
{ static const bool value = is_reference_convertible_to_pointer<T>::value; };

template <class T>
struct is_function_impl<T, true>
{ static const bool value = false; };

template <class T>
struct is_function
   : is_function_impl<T>
{};




template<class T>
struct is_union_noextents_cv
{ static const bool value = false; };

template<class T>
struct is_union
   : is_union_noextents_cv<typename remove_cv<typename remove_all_extents<T>::type>::type>
{};




template <class T>
struct is_class
{
   static const bool value = is_class_or_union<T>::value && ! is_union<T>::value;
};





template <class T>
struct is_arithmetic
{
   static const bool value = is_floating_point<T>::value ||
                             is_integral<T>::value;
};




template <class T>
struct is_member_function_pointer_cv
{
   static const bool value = false;
};

template <class T, class C>
struct is_member_function_pointer_cv<T C::*>
   : is_function<T>
{};

template <class T>
struct is_member_function_pointer
    : is_member_function_pointer_cv<typename remove_cv<T>::type>
{};






template <class T>
struct is_enum_nonintrinsic
{
   static const bool value = !is_arithmetic<T>::value &&
                              !is_reference<T>::value &&
                              !is_class_or_union<T>::value &&
                              !is_array<T>::value &&
                              !is_void<T>::value &&
                              !is_nullptr_t<T>::value &&
                              !is_member_pointer<T>::value &&
                              !is_pointer<T>::value &&
                              !is_function<T>::value;
};


template <class T>
struct is_enum
{ static const bool value = ::boost::move_detail::is_enum_nonintrinsic<T>::value; };




template<class T>
struct is_pod_noextents_cv
{ static const bool value = (::boost::move_detail::is_scalar<T>::value || ::boost::move_detail::is_void<T>::value); };

template<class T>
struct is_pod
   : is_pod_noextents_cv<typename remove_cv<typename remove_all_extents<T>::type>::type>
{};






template <typename T>
struct empty_helper_t1 : public T
{
   empty_helper_t1();
   int i[256];
   private:

   empty_helper_t1(const empty_helper_t1&);
   empty_helper_t1& operator=(const empty_helper_t1&);
};

struct empty_helper_t2 { int i[256]; };

template <typename T, bool IsClass = is_class<T>::value >
struct is_empty_nonintrinsic
{
   static const bool value = false;
};

template <typename T>
struct is_empty_nonintrinsic<T, true>
{
   static const bool value = sizeof(empty_helper_t1<T>) == sizeof(empty_helper_t2);
};


template <class T>
struct is_empty
{ static const bool value = ::boost::move_detail::is_empty_nonintrinsic<T>::value; };


template<class T>
struct has_boost_move_no_copy_constructor_or_assign_type
{
   template <class U>
   static yes_type test(typename U::boost_move_no_copy_constructor_or_assign*);

   template <class U>
   static no_type test(...);

   static const bool value = sizeof(test<T>(0)) == sizeof(yes_type);
};
# 741 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template<class T>
struct is_copy_constructible
{
# 763 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
   static const bool value = !has_boost_move_no_copy_constructor_or_assign_type<T>::value;

};
# 777 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template <class T>
struct is_copy_assignable
{
# 798 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
   static const bool value = !has_boost_move_no_copy_constructor_or_assign_type<T>::value;

};




template<class T>
struct is_trivially_destructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_trivially_default_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_trivially_copy_constructible
{


   static const bool value = ::boost::move_detail::is_pod<T>::value ||
                             ( ::boost::move_detail::is_copy_constructible<T>::value &&
                               ::boost::move_detail::is_pod<T>::value );
};




template<class T>
struct is_trivially_move_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_trivially_copy_assignable
{


   static const bool value = ::boost::move_detail::is_pod<T>::value ||
                             ( ::boost::move_detail::is_copy_assignable<T>::value &&
                               ::boost::move_detail::is_pod<T>::value );
};




template<class T>
struct is_trivially_move_assignable
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_default_constructible
   : is_pod<T>
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_copy_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_move_constructible
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_copy_assignable
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_move_assignable
{ static const bool value = ::boost::move_detail::is_pod<T>::value; };




template<class T>
struct is_nothrow_swappable
{
   static const bool value = is_empty<T>::value || is_pod<T>::value;
};




template <typename T>
struct alignment_of_hack
{
   T t1;
   char c;
   T t2;
   alignment_of_hack();
};

template <unsigned A, unsigned S>
struct alignment_logic
{ static const std::size_t value = A < S ? A : S; };

template< typename T >
struct alignment_of_impl







   : alignment_logic< sizeof(alignment_of_hack<T>) - 2*sizeof(T), sizeof(T)>
{};




template< typename T >
struct alignment_of
   : alignment_of_impl<T>
{};

class alignment_dummy;
typedef void (*function_ptr)();
typedef int (alignment_dummy::*member_ptr);
typedef int (alignment_dummy::*member_function_ptr)();
struct alignment_struct
{ long double dummy[4]; };





union max_align
{
   char char_;
   short short_;
   int int_;
   long long_;

   ::boost::long_long_type long_long_;

   float float_;
   double double_;
   void * void_ptr_;
   long double long_double_[4];
   alignment_dummy *unknown_class_ptr_;
   function_ptr function_ptr_;
   member_function_ptr member_function_ptr_;
   alignment_struct alignment_struct_;
};

typedef union max_align max_align_t;







template<std::size_t Len, std::size_t Align>
struct aligned_storage_impl;
# 988 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template<std::size_t Len>struct __declspec(align(0x1)) aligned_storage_impl<Len, 0x1>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x1> type;};
template<std::size_t Len>struct __declspec(align(0x2)) aligned_storage_impl<Len, 0x2>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x2> type;};
template<std::size_t Len>struct __declspec(align(0x4)) aligned_storage_impl<Len, 0x4>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x4> type;};
template<std::size_t Len>struct __declspec(align(0x8)) aligned_storage_impl<Len, 0x8>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x8> type;};
template<std::size_t Len>struct __declspec(align(0x10)) aligned_storage_impl<Len, 0x10>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x10> type;};
template<std::size_t Len>struct __declspec(align(0x20)) aligned_storage_impl<Len, 0x20>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x20> type;};
template<std::size_t Len>struct __declspec(align(0x40)) aligned_storage_impl<Len, 0x40>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x40> type;};
template<std::size_t Len>struct __declspec(align(0x80)) aligned_storage_impl<Len, 0x80>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x80> type;};
template<std::size_t Len>struct __declspec(align(0x100)) aligned_storage_impl<Len, 0x100>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x100> type;};
template<std::size_t Len>struct __declspec(align(0x200)) aligned_storage_impl<Len, 0x200>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x200> type;};
template<std::size_t Len>struct __declspec(align(0x400)) aligned_storage_impl<Len, 0x400>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x400> type;};
template<std::size_t Len>struct __declspec(align(0x800)) aligned_storage_impl<Len, 0x800>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x800> type;};
template<std::size_t Len>struct __declspec(align(0x1000)) aligned_storage_impl<Len, 0x1000>{ char dummy[Len]; typedef aligned_storage_impl<Len, 0x1000> type;};
# 1055 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp"
template<std::size_t Len, std::size_t Align = alignment_of<max_align_t>::value>
struct aligned_storage
{

   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(Align > 0) >)> boost_static_assert_typedef_1059 ;


   typedef typename aligned_storage_impl<Len ? Len : 1, Align>::type type;
   static const std::size_t value = alignment_of<type>::value;
   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(value >= Align) >)> boost_static_assert_typedef_1064 ;
   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((value % Align) == 0) >)> boost_static_assert_typedef_1065 ;



   private:
   aligned_storage();
};

}
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 1076 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/type_traits.hpp" 2
# 54 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp" 2
# 73 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
   namespace boost {






   template <class T>
   class rv
      : public ::boost::move_detail::if_c
         < ::boost::move_detail::is_class<T>::value
         , T
         , ::boost::move_detail::nat
         >::type
   {
      rv();
      ~rv() throw();
      rv(rv const&);
      void operator=(rv const&);
   } ;
# 101 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
   namespace move_detail {

   template <class T>
   struct is_rv


      : integral_constant<bool, ::boost::move_detail::is_rv_impl<T>::value >
   {};

   template <class T>
   struct is_not_rv
   {
      static const bool value = !is_rv<T>::value;
   };

   }






   template<class T>
   struct has_move_emulation_enabled
      : ::boost::move_detail::has_move_emulation_enabled_impl<T>
   {};

   template<class T>
   struct has_move_emulation_disabled
   {
      static const bool value = !::boost::move_detail::has_move_emulation_enabled_impl<T>::value;
   };

   }
# 192 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
   namespace boost {
   namespace move_detail {

   template <class Ret, class T>
   inline typename ::boost::move_detail::enable_if_c
      < ::boost::move_detail::is_lvalue_reference<Ret>::value ||
        !::boost::has_move_emulation_enabled<T>::value
      , T&>::type
         move_return(T& x)
   {
      return x;
   }

   template <class Ret, class T>
   inline typename ::boost::move_detail::enable_if_c
      < !::boost::move_detail::is_lvalue_reference<Ret>::value &&
         ::boost::has_move_emulation_enabled<T>::value
      , ::boost::rv<T>&>::type
         move_return(T& x)
   {
      return *static_cast< ::boost::rv<T>*>(::boost::move_detail::addressof(x));
   }

   template <class Ret, class T>
   inline typename ::boost::move_detail::enable_if_c
      < !::boost::move_detail::is_lvalue_reference<Ret>::value &&
         ::boost::has_move_emulation_enabled<T>::value
      , ::boost::rv<T>&>::type
         move_return(::boost::rv<T>& x)
   {
      return x;
   }

   }
   }
# 278 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
   namespace boost{
   namespace move_detail{

   template< class T>
   struct forward_type
   { typedef const T &type; };

   template< class T>
   struct forward_type< boost::rv<T> >
   { typedef T type; };

   }}
# 495 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 495 "C:/Programing/Libs/boost_1_59_0\\boost/move/core.hpp" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility_core.hpp" 2






   namespace boost {

   template<class T>
   struct enable_move_utility_emulation
   {
      static const bool value = true;
   };







   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < T &
      , enable_move_utility_emulation<T>
      , has_move_emulation_disabled<T>
      >::type
         move(T& x)
   {
      return x;
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < rv<T>&
      , enable_move_utility_emulation<T>
      , has_move_emulation_enabled<T>
      >::type
         move(T& x)
   {
      return *static_cast< ::boost::rv<T>*>(::boost::move_detail::addressof(x));
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < rv<T>&
      , enable_move_utility_emulation<T>
      , has_move_emulation_enabled<T>
      >::type
         move(rv<T>& x)
   {
      return x;
   }







   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < T &
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_rv<T>
      >::type
         forward(const typename ::boost::move_detail::identity<T>::type &x)
   {
      return const_cast<T&>(x);
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < const T &
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_not_rv<T>
      >::type
         forward(const typename ::boost::move_detail::identity<T>::type &x)
   {
      return x;
   }







   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < T &
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_rv<T>
      >::type
         move_if_not_lvalue_reference(const typename ::boost::move_detail::identity<T>::type &x)
   {
      return const_cast<T&>(x);
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < typename ::boost::move_detail::add_lvalue_reference<T>::type
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_not_rv<T>
      , ::boost::move_detail::or_
         < ::boost::move_detail::is_lvalue_reference<T>
         , has_move_emulation_disabled<T>
         >
      >::type
         move_if_not_lvalue_reference(typename ::boost::move_detail::remove_reference<T>::type &x)
   {
      return x;
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_and
      < rv<T>&
      , enable_move_utility_emulation<T>
      , ::boost::move_detail::is_not_rv<T>
      , ::boost::move_detail::and_
         < ::boost::move_detail::not_< ::boost::move_detail::is_lvalue_reference<T> >
         , has_move_emulation_enabled<T>
         >
      >::type
         move_if_not_lvalue_reference(typename ::boost::move_detail::remove_reference<T>::type &x)
   {
      return move(x);
   }

   }
# 301 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility_core.hpp"
namespace boost{
namespace move_detail{

template <typename T>
typename boost::move_detail::add_rvalue_reference<T>::type declval();

}
}





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 313 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility_core.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/traits.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/move/traits.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/move/traits.hpp" 2








namespace boost {
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/move/traits.hpp"
template <class T>
struct has_trivial_destructor_after_move
   : ::boost::move_detail::is_trivially_destructible<T>
{};





template <class T>
struct has_nothrow_move
{
   static const bool value = boost::move_detail::is_nothrow_move_constructible<T>::value &&
                             boost::move_detail::is_nothrow_move_assignable<T>::value;
};

namespace move_detail {

template <class T>
struct is_nothrow_move_constructible_or_uncopyable
{


   static const bool value = is_nothrow_move_constructible<T>::value ||
                             has_nothrow_move<T>::value ||
                            !is_copy_constructible<T>::value;
};

}
}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 75 "C:/Programing/Libs/boost_1_59_0\\boost/move/traits.hpp" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp" 2




   namespace boost {







   template <class T>
   inline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && !has_move_emulation_enabled<T>::value
      , typename ::boost::move_detail::add_const<T>::type &
      >::type
         move_if_noexcept(T& x)
   {
      return x;
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && ::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value, rv<T>&>::type
         move_if_noexcept(T& x)
   {
      return *static_cast<rv<T>* >(::boost::move_detail::addressof(x));
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && ::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value
      , rv<T>&
      >::type
         move_if_noexcept(rv<T>& x)
   {
      return x;
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && !::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value
      , typename ::boost::move_detail::add_const<T>::type &
      >::type
         move_if_noexcept(T& x)
   {
      return x;
   }

   template <class T>
   inline typename ::boost::move_detail::enable_if_c
      < enable_move_utility_emulation<T>::value && has_move_emulation_enabled<T>::value
            && !::boost::move_detail::is_nothrow_move_constructible_or_uncopyable<T>::value
      , typename ::boost::move_detail::add_const<T>::type &
      >::type
         move_if_noexcept(rv<T>& x)
   {
      return x;
   }

   }
# 147 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 147 "C:/Programing/Libs/boost_1_59_0\\boost/move/utility.hpp" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/iterator_traits.hpp" 1
# 38 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/iterator_traits.hpp"
namespace std{

struct input_iterator_tag;
struct forward_iterator_tag;
struct bidirectional_iterator_tag;
struct random_access_iterator_tag;
struct output_iterator_tag;

}






namespace boost{ namespace movelib{

template<class Iterator>
struct iterator_traits
{
   typedef typename Iterator::difference_type difference_type;
   typedef typename Iterator::value_type value_type;
   typedef typename Iterator::pointer pointer;
   typedef typename Iterator::reference reference;
   typedef typename Iterator::iterator_category iterator_category;
};

template<class T>
struct iterator_traits<T*>
{
   typedef std::ptrdiff_t difference_type;
   typedef T value_type;
   typedef T* pointer;
   typedef T& reference;
   typedef std::random_access_iterator_tag iterator_category;
};

template<class T>
struct iterator_traits<const T*>
{
   typedef std::ptrdiff_t difference_type;
   typedef T value_type;
   typedef const T* pointer;
   typedef const T& reference;
   typedef std::random_access_iterator_tag iterator_category;
};

}}
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp" 2



namespace boost {
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp"
template <class It>
class move_iterator
{
   public:
   typedef It iterator_type;
   typedef typename boost::movelib::iterator_traits<iterator_type>::value_type value_type;



   typedef typename ::boost::move_detail::if_
      < ::boost::has_move_emulation_enabled<value_type>
      , ::boost::rv<value_type>&
      , value_type & >::type reference;

   typedef It pointer;
   typedef typename boost::movelib::iterator_traits<iterator_type>::difference_type difference_type;
   typedef typename boost::movelib::iterator_traits<iterator_type>::iterator_category iterator_category;

   move_iterator()
   {}

   explicit move_iterator(It i)
      : m_it(i)
   {}

   template <class U>
   move_iterator(const move_iterator<U>& u)
      : m_it(u.base())
   {}

   iterator_type base() const
   { return m_it; }

   reference operator*() const
   {

      return *m_it;



   }

   pointer operator->() const
   { return m_it; }

   move_iterator& operator++()
   { ++m_it; return *this; }

   move_iterator<iterator_type> operator++(int)
   { move_iterator<iterator_type> tmp(*this); ++(*this); return tmp; }

   move_iterator& operator--()
   { --m_it; return *this; }

   move_iterator<iterator_type> operator--(int)
   { move_iterator<iterator_type> tmp(*this); --(*this); return tmp; }

   move_iterator<iterator_type> operator+ (difference_type n) const
   { return move_iterator<iterator_type>(m_it + n); }

   move_iterator& operator+=(difference_type n)
   { m_it += n; return *this; }

   move_iterator<iterator_type> operator- (difference_type n) const
   { return move_iterator<iterator_type>(m_it - n); }

   move_iterator& operator-=(difference_type n)
   { m_it -= n; return *this; }

   reference operator[](difference_type n) const
   {

      return m_it[n];



   }

   friend bool operator==(const move_iterator& x, const move_iterator& y)
   { return x.base() == y.base(); }

   friend bool operator!=(const move_iterator& x, const move_iterator& y)
   { return x.base() != y.base(); }

   friend bool operator< (const move_iterator& x, const move_iterator& y)
   { return x.base() < y.base(); }

   friend bool operator<=(const move_iterator& x, const move_iterator& y)
   { return x.base() <= y.base(); }

   friend bool operator> (const move_iterator& x, const move_iterator& y)
   { return x.base() > y.base(); }

   friend bool operator>=(const move_iterator& x, const move_iterator& y)
   { return x.base() >= y.base(); }

   friend difference_type operator-(const move_iterator& x, const move_iterator& y)
   { return x.base() - y.base(); }

   friend move_iterator operator+(difference_type n, const move_iterator& x)
   { return move_iterator(x.base() + n); }

   private:
   It m_it;
};


namespace move_detail {

template <class I>
struct is_move_iterator
{
   static const bool value = false;
};

template <class I>
struct is_move_iterator< ::boost::move_iterator<I> >
{
   static const bool value = true;
};

}
# 173 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp"
template<class It>
inline move_iterator<It> make_move_iterator(const It &it)
{ return move_iterator<It>(it); }
# 186 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp"
template <typename C>
class back_move_insert_iterator
{
   C* container_m;

   public:
   typedef C container_type;
   typedef typename C::value_type value_type;
   typedef typename C::reference reference;
   typedef typename C::pointer pointer;
   typedef typename C::difference_type difference_type;
   typedef std::output_iterator_tag iterator_category;

   explicit back_move_insert_iterator(C& x) : container_m(&x) { }

   back_move_insert_iterator& operator=(reference x)
   { container_m->push_back(boost::move(x)); return *this; }

   back_move_insert_iterator& operator=(::boost::rv< value_type >& x)
   { reference rx = x; return this->operator=(rx); }

   back_move_insert_iterator& operator*() { return *this; }
   back_move_insert_iterator& operator++() { return *this; }
   back_move_insert_iterator& operator++(int) { return *this; }
};



template <typename C>
inline back_move_insert_iterator<C> back_move_inserter(C& x)
{
   return back_move_insert_iterator<C>(x);
}
# 228 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp"
template <typename C>
class front_move_insert_iterator
{
   C* container_m;

public:
   typedef C container_type;
   typedef typename C::value_type value_type;
   typedef typename C::reference reference;
   typedef typename C::pointer pointer;
   typedef typename C::difference_type difference_type;
   typedef std::output_iterator_tag iterator_category;

   explicit front_move_insert_iterator(C& x) : container_m(&x) { }

   front_move_insert_iterator& operator=(reference x)
   { container_m->push_front(boost::move(x)); return *this; }

   front_move_insert_iterator& operator=(::boost::rv< value_type >& x)
   { reference rx = x; return this->operator=(rx); }

   front_move_insert_iterator& operator*() { return *this; }
   front_move_insert_iterator& operator++() { return *this; }
   front_move_insert_iterator& operator++(int) { return *this; }
};



template <typename C>
inline front_move_insert_iterator<C> front_move_inserter(C& x)
{
   return front_move_insert_iterator<C>(x);
}






template <typename C>
class move_insert_iterator
{
   C* container_m;
   typename C::iterator pos_;

   public:
   typedef C container_type;
   typedef typename C::value_type value_type;
   typedef typename C::reference reference;
   typedef typename C::pointer pointer;
   typedef typename C::difference_type difference_type;
   typedef std::output_iterator_tag iterator_category;

   explicit move_insert_iterator(C& x, typename C::iterator pos)
      : container_m(&x), pos_(pos)
   {}

   move_insert_iterator& operator=(reference x)
   {
      pos_ = container_m->insert(pos_, ::boost::move(x));
      ++pos_;
      return *this;
   }

   move_insert_iterator& operator=(::boost::rv< value_type >& x)
   { reference rx = x; return this->operator=(rx); }

   move_insert_iterator& operator*() { return *this; }
   move_insert_iterator& operator++() { return *this; }
   move_insert_iterator& operator++(int) { return *this; }
};



template <typename C>
inline move_insert_iterator<C> move_inserter(C& x, typename C::iterator it)
{
   return move_insert_iterator<C>(x, it);
}

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 310 "C:/Programing/Libs/boost_1_59_0\\boost/move/iterator.hpp" 2
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_begin.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/detail/no_exceptions_support.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/detail/no_exceptions_support.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/core/no_exceptions_support.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/detail/no_exceptions_support.hpp" 2
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp" 2





namespace boost {
# 53 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
   template <typename I,
            typename O>
   O move(I f, I l, O result)
   {
      while (f != l) {
         *result = ::boost::move(*f);
         ++f; ++result;
      }
      return result;
   }
# 80 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
   template <typename I,
   typename O>
   O move_backward(I f, I l, O result)
   {
      while (f != l) {
         --l; --result;
         *result = ::boost::move(*l);
      }
      return result;
   }
# 111 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
template
   <typename I,
    typename F>
F uninitialized_move(I f, I l, F r



   )
{
   typedef typename std::iterator_traits<I>::value_type input_value_type;

   F back = r;
   { try{
      while (f != l) {
         void * const addr = static_cast<void*>(::boost::move_detail::addressof(*r));
         ::new(addr) input_value_type(::boost::move(*f));
         ++f; ++r;
      }
   }
   catch(...){
    for (; back != r; ++back){
         back->~input_value_type();
      }
    throw;;
   }
   }
   return r;
}
# 158 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
namespace move_detail {

template
<typename I,
typename F>
inline F uninitialized_move_move_iterator(I f, I l, F r

)
{
   return ::boost::uninitialized_move(f, l, r);
}
# 179 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
}

template
<typename I,
typename F>
inline F uninitialized_copy_or_move(I f, I l, F r,
                             typename ::boost::move_detail::enable_if< move_detail::is_move_iterator<I> >::type* = 0)
{
   return ::boost::move_detail::uninitialized_move_move_iterator(f, l, r);
}







namespace move_detail {

template
<typename I,
typename F>
inline F move_move_iterator(I f, I l, F r

)
{
   return ::boost::move(f, l, r);
}
# 218 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
}

template
<typename I,
typename F>
inline F copy_or_move(I f, I l, F r,
                             typename ::boost::move_detail::enable_if< move_detail::is_move_iterator<I> >::type* = 0)
{
   return ::boost::move_detail::move_move_iterator(f, l, r);
}
# 243 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
template
<typename I,
typename F>
inline F uninitialized_copy_or_move(I f, I l, F r

   ,typename ::boost::move_detail::disable_if< move_detail::is_move_iterator<I> >::type* = 0

   )
{
   return std::uninitialized_copy(f, l, r);
}
# 266 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp"
template
<typename I,
typename F>
inline F copy_or_move(I f, I l, F r

   ,typename ::boost::move_detail::disable_if< move_detail::is_move_iterator<I> >::type* = 0

   )
{
   return std::copy(f, l, r);
}

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 280 "C:/Programing/Libs/boost_1_59_0\\boost/move/algorithm.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/detail/config_end.hpp" 1
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/move/move.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/move.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/move/adl_move_swap.hpp" 1
# 57 "C:/Programing/Libs/boost_1_59_0\\boost/move/adl_move_swap.hpp"
namespace boost_move_member_swap {

struct dont_care
{
   dont_care(...);
};

struct private_type
{
   static private_type p;
   private_type const &operator,(int) const;
};

typedef char yes_type;
struct no_type{ char dummy[2]; };

template<typename T>
no_type is_private_type(T const &);

yes_type is_private_type(private_type const &);

template <typename Type>
class has_member_function_named_swap
{
   struct BaseMixin
   {
      void swap();
   };

   struct Base : public Type, public BaseMixin { Base(); };
   template <typename T, T t> class Helper{};

   template <typename U>
   static no_type deduce(U*, Helper<void (BaseMixin::*)(), &U::swap>* = 0);
   static yes_type deduce(...);

   public:
   static const bool value = sizeof(yes_type) == sizeof(deduce((Base*)(0)));
};

template<typename Fun, bool HasFunc>
struct has_member_swap_impl
{
   static const bool value = false;
};

template<typename Fun>
struct has_member_swap_impl<Fun, true>
{
   struct FunWrap : Fun
   {
      FunWrap();

      using Fun::swap;
      private_type swap(dont_care) const;
   };

   static Fun &declval_fun();
   static FunWrap declval_wrap();

   static bool const value =
      sizeof(no_type) == sizeof(is_private_type( (declval_wrap().swap(declval_fun()), 0)) );
};

template<typename Fun>
struct has_member_swap : public has_member_swap_impl
      <Fun, has_member_function_named_swap<Fun>::value>
{};

}

namespace boost_move_adl_swap{

template<class P1, class P2, bool = P1::value>
struct and_op_impl
{ static const bool value = false; };

template<class P1, class P2>
struct and_op_impl<P1, P2, true>
{ static const bool value = P2::value; };

template<class P1, class P2>
struct and_op
   : and_op_impl<P1, P2>
{};



template<class P1, class P2, bool = P1::value>
struct and_op_not_impl
{ static const bool value = false; };

template<class P1, class P2>
struct and_op_not_impl<P1, P2, true>
{ static const bool value = !P2::value; };

template<class P1, class P2>
struct and_op_not
   : and_op_not_impl<P1, P2>
{};

template<class T>
void swap_proxy(T& x, T& y, typename boost::move_detail::enable_if_c<!boost::move_detail::has_move_emulation_enabled_impl<T>::value>::type* = 0)
{



   using namespace std;
   swap(x, y);
}

template<class T>
void swap_proxy(T& x, T& y
               , typename boost::move_detail::enable_if< and_op_not_impl<boost::move_detail::has_move_emulation_enabled_impl<T>
                                                                        , boost_move_member_swap::has_member_swap<T> >
                                                       >::type* = 0)
{ T t(::boost::move(x)); x = ::boost::move(y); y = ::boost::move(t); }

template<class T>
void swap_proxy(T& x, T& y
               , typename boost::move_detail::enable_if< and_op_impl< boost::move_detail::has_move_emulation_enabled_impl<T>
                                                                    , boost_move_member_swap::has_member_swap<T> >
                                                       >::type* = 0)
{ x.swap(y); }

}
# 199 "C:/Programing/Libs/boost_1_59_0\\boost/move/adl_move_swap.hpp"
namespace boost_move_adl_swap{

template<class T, std::size_t N>
void swap_proxy(T (& x)[N], T (& y)[N])
{
   for (std::size_t i = 0; i < N; ++i){
      ::boost_move_adl_swap::swap_proxy(x[i], y[i]);
   }
}

}



namespace boost{
# 225 "C:/Programing/Libs/boost_1_59_0\\boost/move/adl_move_swap.hpp"
template<class T>
void adl_move_swap(T& x, T& y)
{
   ::boost_move_adl_swap::swap_proxy(x, y);
}

}
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/move.hpp" 2


namespace boost { namespace detail { namespace variant {

using boost::move;
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/move.hpp"
template <typename T>
inline void move_swap(T& lhs, T& rhs)
{
    ::boost::adl_move_swap(lhs, rhs);
}

}}}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct begin_impl;
template< typename Tag > struct end_impl;

template< typename Sequence > struct begin;
template< typename Sequence > struct end;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag_fwd.hpp"
namespace boost { namespace mpl {

struct nested_begin_end_tag;
struct non_sequence_tag;

template< typename Sequence > struct sequence_tag;

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/eval_if.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/eval_if.hpp"
namespace boost { namespace mpl {

template<
      typename C = na
    , typename F1 = na
    , typename F2 = na
    >
struct eval_if
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/eval_if.hpp"
    : if_<C,F1,F2>::type
{


};



template<
      bool C
    , typename F1
    , typename F2
    >
struct eval_if_c
# 62 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/eval_if.hpp"
    : if_c<C,F1,F2>::type
{

};

template<> struct eval_if< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : eval_if< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< eval_if< na , na , na > , Tag > { typedef false_ is_le; typedef eval_if< na , na , na > result_; typedef eval_if< na , na , na > type; };

}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_begin.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_begin.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/type_wrapper.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/type_wrapper.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename T > struct type_wrapper
{
    typedef T type;
};






template< typename T > struct wrapped_type;

template< typename T > struct wrapped_type< type_wrapper<T> >
{
    typedef T type;
};







}}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/has_xxx.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/msvc_typename.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/data.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/data.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/data.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/data.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/size.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/size.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/size.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/size.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp" 2
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/if.hpp" 1
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_params.hpp" 1
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_trailing_params.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_trailing_params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_trailing_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/repeat.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/enum_trailing_params.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/has_xxx.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_begin.hpp" 2


namespace boost { namespace mpl { namespace aux {
template< typename T, typename fallback_ = boost::mpl::bool_<true> > struct has_begin { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::begin>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };
}}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/traits_lambda_spec.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp" 2



namespace boost { namespace mpl {


namespace aux {

template< typename Sequence >
struct begin_type
{
    typedef typename Sequence::begin type;
};
template< typename Sequence >
struct end_type
{
    typedef typename Sequence::end type;
};

}





template< typename Tag >
struct begin_impl
{
    template< typename Sequence > struct apply
    {
        typedef typename eval_if<aux::has_begin<Sequence, true_>,
                                 aux::begin_type<Sequence>, void_>::type type;
    };
};

template< typename Tag >
struct end_impl
{
    template< typename Sequence > struct apply
    {
        typedef typename eval_if<aux::has_begin<Sequence, true_>,
                                 aux::end_type<Sequence>, void_>::type type;
    };
};
# 82 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/begin_end_impl.hpp"
template<> struct begin_impl<nested_begin_end_tag> { template< typename Sequence > struct apply { typedef typename Sequence::begin type; }; };
template<> struct end_impl<nested_begin_end_tag> { template< typename Sequence > struct apply { typedef typename Sequence::end type; }; };




template<> struct begin_impl<non_sequence_tag> { template< typename Sequence > struct apply { typedef void_ type; }; };
template<> struct end_impl<non_sequence_tag> { template< typename Sequence > struct apply { typedef void_ type; }; };
template<> struct begin_impl<na> { template< typename Sequence > struct apply { typedef void_ type; }; };
template<> struct end_impl<na> { template< typename Sequence > struct apply { typedef void_ type; }; };







}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_tag.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_tag.hpp"
namespace boost { namespace mpl { namespace aux {
template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_tag { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::tag>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };
}}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/is_msvc_eti_arg.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/is_msvc_eti_arg.hpp"
namespace boost { namespace mpl { namespace aux {
# 62 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/is_msvc_eti_arg.hpp"
}}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag.hpp" 2





namespace boost { namespace mpl {
# 78 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag.hpp"
namespace aux {

template< bool has_tag_, bool has_begin_ >
struct sequence_tag_impl
{


    template< typename Sequence > struct result2_;
};
# 98 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sequence_tag.hpp"
template<> struct sequence_tag_impl<true,true> { template< typename Sequence > struct result2_ { typedef typename Sequence::tag type; }; };
template<> struct sequence_tag_impl<true,false> { template< typename Sequence > struct result2_ { typedef typename Sequence::tag type; }; };
template<> struct sequence_tag_impl<false,true> { template< typename Sequence > struct result2_ { typedef nested_begin_end_tag type; }; };
template<> struct sequence_tag_impl<false,false> { template< typename Sequence > struct result2_ { typedef non_sequence_tag type; }; };



}

template<
      typename Sequence = na
    >
struct sequence_tag
    : aux::sequence_tag_impl<
          ::boost::mpl::aux::has_tag<Sequence>::value
        , ::boost::mpl::aux::has_begin<Sequence>::value
        >::template result2_<Sequence>
{
};



template<> struct sequence_tag< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : sequence_tag< T1 > { }; }; template< typename Tag > struct lambda< sequence_tag< na > , Tag > { typedef false_ is_le; typedef sequence_tag< na > result_; typedef sequence_tag< na > type; };

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/begin_end.hpp" 2




namespace boost { namespace mpl {




template<
      typename Sequence = na
    >
struct begin
{
    typedef typename sequence_tag<Sequence>::type tag_;
    typedef typename begin_impl< tag_ >
        ::template apply< Sequence >::type type;


};

template<
      typename Sequence = na
    >
struct end
{
    typedef typename sequence_tag<Sequence>::type tag_;
    typedef typename end_impl< tag_ >
        ::template apply< Sequence >::type type;


};

template<> struct begin< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : begin< T1 > { }; }; template< typename Tag > struct lambda< begin< na > , Tag > { typedef false_ is_le; typedef begin< na > result_; typedef begin< na > type; };
template<> struct end< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : end< T1 > { }; }; template< typename Tag > struct lambda< end< na > , Tag > { typedef false_ is_le; typedef end< na > result_; typedef end< na > type; };

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/O1_size.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/O1_size.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/O1_size_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/O1_size_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct O1_size_impl;
template< typename Sequence > struct O1_size;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/O1_size.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/long.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/long.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/long_fwd.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/long_fwd.hpp"
namespace mpl_ {

template< long N > struct long_;

}
namespace boost { namespace mpl { using ::mpl_::long_; } }
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/long.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {

template< long N >
struct long_
{
    static const long value = N;





    typedef long_ type;

    typedef long value_type;
    typedef integral_c_tag tag;
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef mpl_::long_< static_cast<long>((value + 1)) > next;
    typedef mpl_::long_< static_cast<long>((value - 1)) > prior;






                    operator long() const { return static_cast<long>(this->value); }
};


template< long N >
long const mpl_::long_< N >::value;


}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/long.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_size.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_size.hpp"
namespace boost { namespace mpl { namespace aux {
template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_size { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::size>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };
}}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/forwarding.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp" 2





namespace boost { namespace mpl {
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp"
namespace aux {
template< typename Sequence > struct O1_size_impl
    : Sequence::size
{
};
}

template< typename Tag >
struct O1_size_impl
{
    template< typename Sequence > struct apply

        : if_<
              aux::has_size<Sequence>
            , aux::O1_size_impl<Sequence>
            , long_<-1>
            >::type
    {
# 69 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp"
    };
};
# 85 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/O1_size_impl.hpp"
}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/O1_size.hpp" 2




namespace boost { namespace mpl {


template<
      typename Sequence = na
    >
struct O1_size
    : O1_size_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence >
{

};

template<> struct O1_size< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : O1_size< T1 > { }; }; template< typename Tag > struct lambda< O1_size< na > , Tag > { typedef false_ is_le; typedef O1_size< na > result_; typedef O1_size< na > type; };

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind_fwd.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/bind.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind_fwd.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/bind_fwd.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/bind_fwd.hpp"
namespace boost { namespace mpl {

template<
      typename F, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na
    >
struct bind;

template<
      typename F
    >
struct bind0;

template<
      typename F, typename T1
    >
struct bind1;

template<
      typename F, typename T1, typename T2
    >
struct bind2;

template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind3;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind4;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind5;

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind_fwd.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/placeholders.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/placeholders.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/placeholders.hpp" 2
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/placeholders.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/placeholders.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/placeholders.hpp"
namespace mpl_ {
typedef arg< -1 > _;
}
namespace boost { namespace mpl {

using ::mpl_::_;

namespace placeholders {
using mpl_::_;
}

}}



namespace mpl_ {
typedef arg<1> _1;

}
namespace boost { namespace mpl {

using ::mpl_::_1;

namespace placeholders {
using mpl_::_1;
}

}}
namespace mpl_ {
typedef arg<2> _2;

}
namespace boost { namespace mpl {

using ::mpl_::_2;

namespace placeholders {
using mpl_::_2;
}

}}
namespace mpl_ {
typedef arg<3> _3;

}
namespace boost { namespace mpl {

using ::mpl_::_3;

namespace placeholders {
using mpl_::_3;
}

}}
namespace mpl_ {
typedef arg<4> _4;

}
namespace boost { namespace mpl {

using ::mpl_::_4;

namespace placeholders {
using mpl_::_4;
}

}}
namespace mpl_ {
typedef arg<5> _5;

}
namespace boost { namespace mpl {

using ::mpl_::_5;

namespace placeholders {
using mpl_::_5;
}

}}
namespace mpl_ {
typedef arg<6> _6;

}
namespace boost { namespace mpl {

using ::mpl_::_6;

namespace placeholders {
using mpl_::_6;
}

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/placeholders.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/next.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/next.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/next_prior.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/next_prior.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/common_name_wknd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/next_prior.hpp" 2




namespace boost { namespace mpl {




template<
      typename T = na
    >
struct next
{
    typedef typename T::next type;

};

template<
      typename T = na
    >
struct prior
{
    typedef typename T::prior type;

};

template<> struct next< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : next< T1 > { }; }; template< typename Tag > struct lambda< next< na > , Tag > { typedef false_ is_le; typedef next< na > result_; typedef next< na > type; };
template<> struct prior< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : prior< T1 > { }; }; template< typename Tag > struct lambda< prior< na > , Tag > { typedef false_ is_le; typedef prior< na > result_; typedef prior< na > type; };

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/next.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/protect.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/protect.hpp"
namespace boost { namespace mpl {

template<
      typename T = na
    , int not_le_ = 0
    >
struct protect : T
{



    typedef protect type;

};
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/protect.hpp"
template<> struct protect< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : protect< T1 > { }; };




}}
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_apply.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_apply.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/has_apply.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_apply.hpp" 2


namespace boost { namespace mpl { namespace aux {

template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_apply { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::apply>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };







}}}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_never_true.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/apply_wrap.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/apply_wrap.hpp"
namespace boost { namespace mpl {

template<
      typename F

    , typename has_apply_ = typename aux::has_apply<F>::type

    >
struct apply_wrap0

    : F::template apply< >
{
};

template< typename F >
struct apply_wrap0< F,true_ >
    : F::apply
{
};

template<
      typename F, typename T1

    >
struct apply_wrap1

    : F::template apply<T1>
{
};

template<
      typename F, typename T1, typename T2

    >
struct apply_wrap2

    : F::template apply< T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3

    >
struct apply_wrap3

    : F::template apply< T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4

    >
struct apply_wrap4

    : F::template apply< T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5

    >
struct apply_wrap5

    : F::template apply< T1,T2,T3,T4,T5 >
{
};

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 2
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/bind.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/bind.hpp"
namespace boost { namespace mpl {

namespace aux {

template<
      typename T, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg
{
    typedef T type;
};

template<
      typename T
    , typename Arg
    >
struct replace_unnamed_arg
{
    typedef Arg next;
    typedef T type;
};

template<
      typename Arg
    >
struct replace_unnamed_arg< arg< -1 >, Arg >
{
    typedef typename Arg::next next;
    typedef Arg type;
};

template<
      int N, typename U1, typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg< arg<N>, U1, U2, U3, U4, U5 >
{
    typedef typename apply_wrap5<mpl::arg<N>, U1, U2, U3, U4, U5>::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg< bind< F,T1,T2,T3,T4,T5 >, U1, U2, U3, U4, U5 >
{
    typedef bind< F,T1,T2,T3,T4,T5 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}

template<
      typename F
    >
struct bind0
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

     public:
        typedef typename apply_wrap0<
              f_
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg<
      bind0<F>, U1, U2, U3, U4, U5
    >
{
    typedef bind0<F> f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F
    >
struct bind< F,na,na,na,na,na >
    : bind0<F>
{
};

template<
      typename F, typename T1
    >
struct bind1
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

     public:
        typedef typename apply_wrap1<
              f_
            , typename t1::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename U1, typename U2, typename U3
    , typename U4, typename U5
    >
struct resolve_bind_arg<
      bind1< F,T1 >, U1, U2, U3, U4, U5
    >
{
    typedef bind1< F,T1 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1
    >
struct bind< F,T1,na,na,na,na >
    : bind1< F,T1 >
{
};

template<
      typename F, typename T1, typename T2
    >
struct bind2
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

     public:
        typedef typename apply_wrap2<
              f_
            , typename t1::type, typename t2::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename U1, typename U2
    , typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind2< F,T1,T2 >, U1, U2, U3, U4, U5
    >
{
    typedef bind2< F,T1,T2 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1, typename T2
    >
struct bind< F,T1,T2,na,na,na >
    : bind2< F,T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind3
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

     public:
        typedef typename apply_wrap3<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename U1
    , typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind3< F,T1,T2,T3 >, U1, U2, U3, U4, U5
    >
{
    typedef bind3< F,T1,T2,T3 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind< F,T1,T2,T3,na,na >
    : bind3< F,T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind4
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef aux::replace_unnamed_arg< T4,n4 > r4;
        typedef typename r4::type a4;
        typedef typename r4::next n5;
        typedef aux::resolve_bind_arg< a4,U1,U2,U3,U4,U5 > t4;

     public:
        typedef typename apply_wrap4<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            , typename t4::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename U1, typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind4< F,T1,T2,T3,T4 >, U1, U2, U3, U4, U5
    >
{
    typedef bind4< F,T1,T2,T3,T4 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}




template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind< F,T1,T2,T3,T4,na >
    : bind4< F,T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind5
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;

        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef aux::replace_unnamed_arg< T4,n4 > r4;
        typedef typename r4::type a4;
        typedef typename r4::next n5;
        typedef aux::resolve_bind_arg< a4,U1,U2,U3,U4,U5 > t4;

        typedef aux::replace_unnamed_arg< T5,n5 > r5;
        typedef typename r5::type a5;
        typedef typename r5::next n6;
        typedef aux::resolve_bind_arg< a5,U1,U2,U3,U4,U5 > t5;

     public:
        typedef typename apply_wrap5<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            , typename t4::type, typename t5::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg<
      bind5< F,T1,T2,T3,T4,T5 >, U1, U2, U3, U4, U5
    >
{
    typedef bind5< F,T1,T2,T3,T4,T5 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

}






template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind
    : bind5< F,T1,T2,T3,T4,T5 >
{
};


template< template< typename T1, typename T2, typename T3 > class F, typename Tag >
struct quote3;

template< typename T1, typename T2, typename T3 > struct if_;

template<
      typename Tag, typename T1, typename T2, typename T3
    >
struct bind3<
      quote3< if_,Tag >
    , T1, T2, T3
    >
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef mpl::arg<1> n1;
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef typename if_<
              typename t1::type
            , t2, t3
            >::type f_;

     public:
        typedef typename f_::type type;
    };
};

template<
      template< typename T1, typename T2, typename T3 > class F, typename Tag
    >
struct quote3;

template< typename T1, typename T2, typename T3 > struct eval_if;

template<
      typename Tag, typename T1, typename T2, typename T3
    >
struct bind3<
      quote3< eval_if,Tag >
    , T1, T2, T3
    >
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef mpl::arg<1> n1;
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;

        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;

        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;

        typedef typename eval_if<
              typename t1::type
            , t2, t3
            >::type f_;

     public:
        typedef typename f_::type type;
    };
};

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind_fwd.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/quote.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/quote.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_type.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/has_type.hpp"
namespace boost { namespace mpl { namespace aux {
template< typename T, typename fallback_ = boost::mpl::bool_<true> > struct has_type { struct gcc_3_2_wknd { template< typename U > static boost::mpl::aux::yes_tag test( boost::mpl::aux::type_wrapper<U> const volatile* , boost::mpl::aux::type_wrapper<typename U::type>* = 0 ); static boost::mpl::aux::no_tag test(...); }; typedef boost::mpl::aux::type_wrapper<T> t_; static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == sizeof(boost::mpl::aux::yes_tag); typedef boost::mpl::bool_<value> type; };
}}}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/quote.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/config/bcc.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/quote.hpp" 2
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/quote.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/quote.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/quote.hpp"
namespace boost { namespace mpl {

template< typename T, bool has_type_ >
struct quote_impl
    : T
{
};

template< typename T >
struct quote_impl< T,false >
{
    typedef T type;
};

template<
      template< typename P1 > class F
    , typename Tag = void_
    >
struct quote1
{
    template< typename U1 > struct apply

        : quote_impl<
              F<U1>
            , aux::has_type< F<U1> >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2 > class F
    , typename Tag = void_
    >
struct quote2
{
    template< typename U1, typename U2 > struct apply

        : quote_impl<
              F< U1,U2 >
            , aux::has_type< F< U1,U2 > >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2, typename P3 > class F
    , typename Tag = void_
    >
struct quote3
{
    template< typename U1, typename U2, typename U3 > struct apply

        : quote_impl<
              F< U1,U2,U3 >
            , aux::has_type< F< U1,U2,U3 > >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename Tag = void_
    >
struct quote4
{
    template<
          typename U1, typename U2, typename U3, typename U4
        >
    struct apply

        : quote_impl<
              F< U1,U2,U3,U4 >
            , aux::has_type< F< U1,U2,U3,U4 > >::value
            >

    {
    };
};

template<
      template<
          typename P1, typename P2, typename P3, typename P4
        , typename P5
        >
      class F
    , typename Tag = void_
    >
struct quote5
{
    template<
          typename U1, typename U2, typename U3, typename U4
        , typename U5
        >
    struct apply

        : quote_impl<
              F< U1,U2,U3,U4,U5 >
            , aux::has_type< F< U1,U2,U3,U4,U5 > >::value
            >

    {
    };
};

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/quote.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/template_arity.hpp" 1
# 29 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp" 2
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/full_lambda.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/full_lambda.hpp"
namespace boost { namespace mpl {

namespace aux {

template<
      bool C1 = false, bool C2 = false, bool C3 = false, bool C4 = false
    , bool C5 = false
    >
struct lambda_or
    : true_
{
};

template<>
struct lambda_or< false,false,false,false,false >
    : false_
{
};

}

template<
      typename T
    , typename Tag

    >
struct lambda
{
    typedef false_ is_le;
    typedef T result_;
    typedef T type;
};

template<
      typename T
    >
struct is_lambda_expression
    : lambda<T>::is_le
{
};

template< int N, typename Tag >
struct lambda< arg<N>, Tag >
{
    typedef true_ is_le;
    typedef mpl::arg<N> result_;
    typedef mpl::protect<result_> type;
};

template<
      typename F
    , typename Tag
    >
struct lambda<
          bind0<F>
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind0<
          F
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1 > class F
    , typename L1
    >
struct le_result1
{
    typedef F<
          typename L1::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1 > class F
    , typename L1
    >
struct le_result1< true_,Tag,F,L1 >
{
    typedef bind1<
          quote1< F,Tag >
        , typename L1::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1 > class F
    , typename T1
    , typename Tag
    >
struct lambda<
          F<T1>
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef typename l1::is_le is_le1;
    typedef typename aux::lambda_or<
          is_le1::value
        >::type is_le;

    typedef aux::le_result1<
          is_le, Tag, F, l1
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1
    , typename Tag
    >
struct lambda<
          bind1< F,T1 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind1<
          F
        , T1
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2 > class F
    , typename L1, typename L2
    >
struct le_result2
{
    typedef F<
          typename L1::type, typename L2::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2 > class F
    , typename L1, typename L2
    >
struct le_result2< true_,Tag,F,L1,L2 >
{
    typedef bind2<
          quote2< F,Tag >
        , typename L1::result_, typename L2::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1, typename P2 > class F
    , typename T1, typename T2
    , typename Tag
    >
struct lambda<
          F< T1,T2 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value
        >::type is_le;

    typedef aux::le_result2<
          is_le, Tag, F, l1, l2
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2
    , typename Tag
    >
struct lambda<
          bind2< F,T1,T2 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind2<
          F
        , T1, T2
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3 > class F
    , typename L1, typename L2, typename L3
    >
struct le_result3
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3 > class F
    , typename L1, typename L2, typename L3
    >
struct le_result3< true_,Tag,F,L1,L2,L3 >
{
    typedef bind3<
          quote3< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1, typename P2, typename P3 > class F
    , typename T1, typename T2, typename T3
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value
        >::type is_le;

    typedef aux::le_result3<
          is_le, Tag, F, l1, l2, l3
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3
    , typename Tag
    >
struct lambda<
          bind3< F,T1,T2,T3 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind3<
          F
        , T1, T2, T3
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename L1, typename L2, typename L3, typename L4
    >
struct le_result4
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        , typename L4::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename L1, typename L2, typename L3, typename L4
    >
struct le_result4< true_,Tag,F,L1,L2,L3,L4 >
{
    typedef bind4<
          quote4< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        , typename L4::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename T1, typename T2, typename T3, typename T4
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3,T4 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    typedef lambda< T4,Tag > l4;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    typedef typename l4::is_le is_le4;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value, is_le4::value
        >::type is_le;

    typedef aux::le_result4<
          is_le, Tag, F, l1, l2, l3, l4
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename Tag
    >
struct lambda<
          bind4< F,T1,T2,T3,T4 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind4<
          F
        , T1, T2, T3, T4
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3, typename P4, typename P5 > class F
    , typename L1, typename L2, typename L3, typename L4, typename L5
    >
struct le_result5
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        , typename L4::type, typename L5::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3, typename P4, typename P5 > class F
    , typename L1, typename L2, typename L3, typename L4, typename L5
    >
struct le_result5< true_,Tag,F,L1,L2,L3,L4,L5 >
{
    typedef bind5<
          quote5< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        , typename L4::result_, typename L5::result_
        > result_;

    typedef mpl::protect<result_> type;
};

}

template<
      template<
          typename P1, typename P2, typename P3, typename P4
        , typename P5
        >
      class F
    , typename T1, typename T2, typename T3, typename T4, typename T5
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3,T4,T5 >
        , Tag

        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    typedef lambda< T4,Tag > l4;
    typedef lambda< T5,Tag > l5;

    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    typedef typename l4::is_le is_le4;
    typedef typename l5::is_le is_le5;


    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value, is_le4::value
        , is_le5::value
        >::type is_le;

    typedef aux::le_result5<
          is_le, Tag, F, l1, l2, l3, l4, l5
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    , typename Tag
    >
struct lambda<
          bind5< F,T1,T2,T3,T4,T5 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind5<
          F
        , T1, T2, T3, T4, T5
        > result_;

    typedef result_ type;
};


template< typename T, typename Tag >
struct lambda< mpl::protect<T>, Tag >
{
    typedef false_ is_le;
    typedef mpl::protect<T> result_;
    typedef result_ type;
};



template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    , typename Tag
    >
struct lambda<
          bind< F,T1,T2,T3,T4,T5 >
        , Tag

        >
{
    typedef false_ is_le;
    typedef bind< F,T1,T2,T3,T4,T5 > result_;
    typedef result_ type;
};



template<
      typename F, typename Tag1, typename Tag2
    >
struct lambda<
          lambda< F,Tag1 >
        , Tag2
        >
{
    typedef lambda< F,Tag2 > l1;
    typedef lambda< Tag1,Tag2 > l2;
    typedef typename l1::is_le is_le;
    typedef aux::le_result2<is_le, Tag2, mpl::lambda, l1, l2> le_result_;
    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<> struct lambda< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : lambda< T1 , T2 > { }; }; template< typename Tag > struct lambda< lambda< na , na > , Tag > { typedef false_ is_le; typedef lambda< na , na > result_; typedef lambda< na , na > type; };

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/full_lambda.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/lambda.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_impl.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_fwd.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/apply_fwd.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/apply_fwd.hpp"
namespace boost { namespace mpl {

template<
      typename F, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na
    >
struct apply;

template<
      typename F
    >
struct apply0;

template<
      typename F, typename T1
    >
struct apply1;

template<
      typename F, typename T1, typename T2
    >
struct apply2;

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply3;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply4;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply5;

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_fwd.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/placeholders.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/apply.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/apply.hpp"
namespace boost { namespace mpl {

template<
      typename F
    >
struct apply0

    : apply_wrap0<
          typename lambda<F>::type

        >
{
};

template<
      typename F
    >
struct apply< F,na,na,na,na,na >
    : apply0<F>
{
};

template<
      typename F, typename T1
    >
struct apply1

    : apply_wrap1<
          typename lambda<F>::type
        , T1
        >
{
};

template<
      typename F, typename T1
    >
struct apply< F,T1,na,na,na,na >
    : apply1< F,T1 >
{
};

template<
      typename F, typename T1, typename T2
    >
struct apply2

    : apply_wrap2<
          typename lambda<F>::type
        , T1, T2
        >
{
};

template<
      typename F, typename T1, typename T2
    >
struct apply< F,T1,T2,na,na,na >
    : apply2< F,T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply3

    : apply_wrap3<
          typename lambda<F>::type
        , T1, T2, T3
        >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply< F,T1,T2,T3,na,na >
    : apply3< F,T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply4

    : apply_wrap4<
          typename lambda<F>::type
        , T1, T2, T3, T4
        >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply< F,T1,T2,T3,T4,na >
    : apply4< F,T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply5

    : apply_wrap5<
          typename lambda<F>::type
        , T1, T2, T3, T4, T5
        >
{
};



template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply
    : apply5< F,T1,T2,T3,T4,T5 >
{
};

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_impl.hpp" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/iter_fold_impl.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/iter_fold_impl.hpp"
namespace boost { namespace mpl { namespace aux {



template<
      int N
    , typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl;

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< 0,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef state0 state;
    typedef iter0 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< 1,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp,state0,iter0 >::type state1;
    typedef typename mpl::next<iter0>::type iter1;


    typedef state1 state;
    typedef iter1 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< 2,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp,state0,iter0 >::type state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp,state1,iter1 >::type state2;
    typedef typename mpl::next<iter1>::type iter2;


    typedef state2 state;
    typedef iter2 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< 3,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp,state0,iter0 >::type state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp,state1,iter1 >::type state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp,state2,iter2 >::type state3;
    typedef typename mpl::next<iter2>::type iter3;


    typedef state3 state;
    typedef iter3 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< 4,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp,state0,iter0 >::type state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp,state1,iter1 >::type state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp,state2,iter2 >::type state3;
    typedef typename mpl::next<iter2>::type iter3;
    typedef typename apply2< ForwardOp,state3,iter3 >::type state4;
    typedef typename mpl::next<iter3>::type iter4;


    typedef state4 state;
    typedef iter4 iterator;
};

template<
      int N
    , typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl
{
    typedef iter_fold_impl<
          4
        , First
        , Last
        , State
        , ForwardOp
        > chunk_;

    typedef iter_fold_impl<
          ( (N - 4) < 0 ? 0 : N - 4 )
        , typename chunk_::iterator
        , Last
        , typename chunk_::state
        , ForwardOp
        > res_;

    typedef typename res_::state state;
    typedef typename res_::iterator iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< -1,First,Last,State,ForwardOp >
    : iter_fold_impl<
          -1
        , typename mpl::next<First>::type
        , Last
        , typename apply2< ForwardOp,State,First >::type
        , ForwardOp
        >
{
};

template<
      typename Last
    , typename State
    , typename ForwardOp
    >
struct iter_fold_impl< -1,Last,Last,State,ForwardOp >
{
    typedef State state;
    typedef Last iterator;
};

}}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_impl.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold.hpp" 2




namespace boost { namespace mpl {

template<
      typename Sequence = na
    , typename State = na
    , typename ForwardOp = na
    >
struct iter_fold
{
    typedef typename aux::iter_fold_impl<
          ::boost::mpl::O1_size<Sequence>::value
        , typename begin<Sequence>::type
        , typename end<Sequence>::type
        , State
        , typename lambda<ForwardOp>::type
        >::state type;


};

template<> struct iter_fold< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : iter_fold< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< iter_fold< na , na , na > , Tag > { typedef false_ is_le; typedef iter_fold< na , na , na > result_; typedef iter_fold< na , na , na > type; };

}}
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/deref.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/deref.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_type.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_type.hpp"
namespace boost { namespace mpl { namespace aux {
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_type.hpp"
template< typename T > struct msvc_type
{
    typedef typename T::type type;
};

template<> struct msvc_type<int>
{
    typedef int type;
};



}}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/deref.hpp" 2





namespace boost { namespace mpl {

template<
      typename Iterator = na
    >
struct deref
{

    typedef typename Iterator::type type;




};

template<> struct deref< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : deref< T1 > { }; }; template< typename Tag > struct lambda< deref< na > , Tag > { typedef false_ is_le; typedef deref< na > result_; typedef deref< na > type; };

}}
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_eti_base.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_eti_base.hpp"
namespace boost { namespace mpl { namespace aux {
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/msvc_eti_base.hpp"
template< typename T > struct msvc_eti_base
    : T
{



    typedef T type;
};



template<> struct msvc_eti_base<int>
{
    typedef msvc_eti_base type;
    typedef msvc_eti_base first;
    typedef msvc_eti_base second;
    typedef msvc_eti_base tag;
    enum { value = 0 };
};

}}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair.hpp" 2





namespace boost { namespace mpl {

template<
      typename T1 = na
    , typename T2 = na
    >
struct pair
{
    typedef pair type;
    typedef T1 first;
    typedef T2 second;


};

template<
      typename P = na
    >
struct first
{

    typedef typename P::first type;




};

template<
      typename P = na
    >
struct second
{

    typedef typename P::second type;




};


template<> struct pair< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : pair< T1 , T2 > { }; }; template< typename Tag > struct lambda< pair< na , na > , Tag > { typedef false_ is_le; typedef pair< na , na > result_; typedef pair< na , na > type; };
template<> struct first< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : first< T1 > { }; }; template< typename Tag > struct lambda< first< na > , Tag > { typedef false_ is_le; typedef first< na > result_; typedef first< na > type; };
template<> struct second< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : second< T1 > { }; }; template< typename Tag > struct lambda< second< na > , Tag > { typedef false_ is_le; typedef second< na > result_; typedef second< na > type; };

}}
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp"
namespace boost {
namespace detail { namespace variant {
# 62 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp"
struct make_initializer_node
{
    template <typename BaseIndexPair, typename Iterator>
    struct apply
    {
    private:

        typedef typename BaseIndexPair::first
            base;
        typedef typename BaseIndexPair::second
            index;

        class initializer_node
            : public base
        {
        private:

            typedef typename mpl::deref<Iterator>::type
                recursive_enabled_T;
            typedef typename unwrap_recursive<recursive_enabled_T>::type
                public_T;
# 96 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp"
            typedef typename call_traits<public_T>::param_type
                param_T;


        public:

            using base::initialize;

            static int initialize(void* dest, param_T operand)
            {
                typedef typename boost::detail::make_reference_content<
                      recursive_enabled_T
                    >::type internal_T;

                new(dest) internal_T(operand);
                return index::value;
            }
# 126 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp"
        };

        friend class initializer_node;

    public:

        typedef mpl::pair<
              initializer_node
            , typename mpl::next< index >::type
            > type;

    };
};






class initializer_root
{
public:

    static void initialize();

};
# 208 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/initializer.hpp"
}}
}
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/make_variant_list.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/make_variant_list.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list20.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list20.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list10.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list10.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_front.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_front.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_front_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_front_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct push_front_impl;
template< typename Sequence, typename T > struct push_front;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_front.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/item.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/item.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/tag.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/tag.hpp"
namespace boost { namespace mpl { namespace aux {

struct list_tag;
struct l_iter_tag;

}}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/item.hpp" 2




namespace boost { namespace mpl {

template<
      typename Size
    , typename T
    , typename Next
    >
struct l_item
{




    typedef aux::list_tag tag;
    typedef l_item type;

    typedef Size size;
    typedef T item;
    typedef Next next;
};

struct l_end
{



    typedef aux::list_tag tag;
    typedef l_end type;
    typedef long_<0> size;
};

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_front.hpp" 2



namespace boost { namespace mpl {

template<>
struct push_front_impl< aux::list_tag >
{
    template< typename List, typename T > struct apply
    {
        typedef l_item<
              typename next<typename List::size>::type
            , T
            , typename List::type
            > type;
    };
};

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/pop_front.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/pop_front.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pop_front_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pop_front_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct pop_front_impl;
template< typename Sequence > struct pop_front;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/pop_front.hpp" 2




namespace boost { namespace mpl {

template<>
struct pop_front_impl< aux::list_tag >
{
    template< typename List > struct apply
    {
        typedef typename mpl::next<List>::type type;
    };
};

}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_back.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_back.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_back_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_back_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct push_back_impl;
template< typename Sequence, typename T > struct push_back;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/push_back.hpp" 2




namespace boost { namespace mpl {

template< typename Tag > struct has_push_back_impl;

template<>
struct has_push_back_impl< aux::list_tag >
{
    template< typename Seq > struct apply
        : false_
    {
    };
};

}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/front.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/front.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct front_impl;
template< typename Sequence > struct front;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/front.hpp" 2



namespace boost { namespace mpl {

template<>
struct front_impl< aux::list_tag >
{
    template< typename List > struct apply
    {
        typedef typename List::item type;
    };
};

}}
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/clear.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/clear.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/clear_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/clear_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct clear_impl;
template< typename Sequence > struct clear;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/clear.hpp" 2




namespace boost { namespace mpl {

template<>
struct clear_impl< aux::list_tag >
{
    template< typename List > struct apply
    {
        typedef l_end type;
    };
};

}}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/O1_size.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/O1_size.hpp"
namespace boost { namespace mpl {

template<>
struct O1_size_impl< aux::list_tag >
{
    template< typename List > struct apply
        : List::size
    {
    };
};

}}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/size.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/size.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct size_impl;
template< typename Sequence > struct size;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/size.hpp" 2



namespace boost { namespace mpl {

template<>
struct size_impl< aux::list_tag >
{
    template< typename List > struct apply
        : List::size
    {
    };
};

}}
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/empty.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/empty.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/empty_fwd.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/empty_fwd.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct empty_impl;
template< typename Sequence > struct empty;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/empty.hpp" 2




namespace boost { namespace mpl {

template<>
struct empty_impl< aux::list_tag >
{
    template< typename List > struct apply
        : not_<typename List::size>
    {
    };
};

}}
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/begin_end.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/begin_end.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/iterator.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/iterator.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iterator_tags.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iterator_tags.hpp"
namespace boost { namespace mpl {

struct forward_iterator_tag : int_<0> { typedef forward_iterator_tag type; };
struct bidirectional_iterator_tag : int_<1> { typedef bidirectional_iterator_tag type; };
struct random_access_iterator_tag : int_<2> { typedef random_access_iterator_tag type; };

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/iterator.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/lambda_spec.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/iterator.hpp" 2



namespace boost { namespace mpl {



template< typename Node >
struct l_iter
{
    typedef aux::l_iter_tag tag;
    typedef forward_iterator_tag category;
};

template< typename Node >
struct deref< l_iter<Node> >
{
    typedef typename Node::item type;
};

template< typename Node >
struct next< l_iter<Node> >
{
    typedef l_iter< typename Node::next > type;
};
# 62 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/iterator.hpp"
template<> struct l_iter<l_end>
{
    typedef aux::l_iter_tag tag;
    typedef forward_iterator_tag category;




};

template< typename T1 , typename Tag > struct lambda< l_iter< T1 > , Tag > { typedef false_ is_le; typedef l_iter< T1 > result_; typedef result_ type; };

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/begin_end.hpp" 2




namespace boost { namespace mpl {

template<>
struct begin_impl< aux::list_tag >
{
    template< typename List > struct apply
    {
        typedef l_iter<typename List::type> type;
    };
};

template<>
struct end_impl< aux::list_tag >
{
    template< typename > struct apply
    {
        typedef l_iter<l_end> type;
    };
};

}}
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list0.hpp" 2



namespace boost { namespace mpl {

template< typename Dummy = na > struct list0;

template<> struct list0<na>
    : l_end
{
    typedef l_end type;
};

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list10.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list10.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 2
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/preprocessed/plain/list10.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/preprocessed/plain/list10.hpp"
namespace boost { namespace mpl {

template<
      typename T0
    >
struct list1
    : l_item<
          long_<1>
        , T0
        , l_end
        >
{
    typedef list1 type;
};

template<
      typename T0, typename T1
    >
struct list2
    : l_item<
          long_<2>
        , T0
        , list1<T1>
        >
{
    typedef list2 type;
};

template<
      typename T0, typename T1, typename T2
    >
struct list3
    : l_item<
          long_<3>
        , T0
        , list2< T1,T2 >
        >
{
    typedef list3 type;
};

template<
      typename T0, typename T1, typename T2, typename T3
    >
struct list4
    : l_item<
          long_<4>
        , T0
        , list3< T1,T2,T3 >
        >
{
    typedef list4 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    >
struct list5
    : l_item<
          long_<5>
        , T0
        , list4< T1,T2,T3,T4 >
        >
{
    typedef list5 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct list6
    : l_item<
          long_<6>
        , T0
        , list5< T1,T2,T3,T4,T5 >
        >
{
    typedef list6 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6
    >
struct list7
    : l_item<
          long_<7>
        , T0
        , list6< T1,T2,T3,T4,T5,T6 >
        >
{
    typedef list7 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7
    >
struct list8
    : l_item<
          long_<8>
        , T0
        , list7< T1,T2,T3,T4,T5,T6,T7 >
        >
{
    typedef list8 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8
    >
struct list9
    : l_item<
          long_<9>
        , T0
        , list8< T1,T2,T3,T4,T5,T6,T7,T8 >
        >
{
    typedef list9 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    >
struct list10
    : l_item<
          long_<10>
        , T0
        , list9< T1,T2,T3,T4,T5,T6,T7,T8,T9 >
        >
{
    typedef list10 type;
};

}}
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list10.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list20.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list20.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 2
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/preprocessed/plain/list20.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/preprocessed/plain/list20.hpp"
namespace boost { namespace mpl {

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10
    >
struct list11
    : l_item<
          long_<11>
        , T0
        , list10< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10 >
        >
{
    typedef list11 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11
    >
struct list12
    : l_item<
          long_<12>
        , T0
        , list11< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11 >
        >
{
    typedef list12 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12
    >
struct list13
    : l_item<
          long_<13>
        , T0
        , list12< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12 >
        >
{
    typedef list13 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13
    >
struct list14
    : l_item<
          long_<14>
        , T0
        , list13< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13 >
        >
{
    typedef list14 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    >
struct list15
    : l_item<
          long_<15>
        , T0
        , list14< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14 >
        >
{
    typedef list15 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15
    >
struct list16
    : l_item<
          long_<16>
        , T0
        , list15< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15 >
        >
{
    typedef list16 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16
    >
struct list17
    : l_item<
          long_<17>
        , T0
        , list16< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16 >
        >
{
    typedef list17 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16, typename T17
    >
struct list18
    : l_item<
          long_<18>
        , T0
        , list17< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17 >
        >
{
    typedef list18 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16, typename T17, typename T18
    >
struct list19
    : l_item<
          long_<19>
        , T0
        , list18< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18 >
        >
{
    typedef list19 type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16, typename T17, typename T18, typename T19
    >
struct list20
    : l_item<
          long_<20>
        , T0
        , list19< T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19 >
        >
{
    typedef list20 type;
};

}}
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/aux_/include_preprocessed.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list/list20.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp" 2
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/list.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/list.hpp"
namespace boost { namespace mpl {

template<
      typename T0 = na, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na, typename T6 = na, typename T7 = na
    , typename T8 = na, typename T9 = na, typename T10 = na, typename T11 = na
    , typename T12 = na, typename T13 = na, typename T14 = na
    , typename T15 = na, typename T16 = na, typename T17 = na
    , typename T18 = na, typename T19 = na
    >
struct list;

template<

    >
struct list<
          na, na, na, na, na, na, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list0< >
{
    typedef list0< >::type type;
};

template<
      typename T0
    >
struct list<
          T0, na, na, na, na, na, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list1<T0>
{
    typedef typename list1<T0>::type type;
};

template<
      typename T0, typename T1
    >
struct list<
          T0, T1, na, na, na, na, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list2< T0,T1 >
{
    typedef typename list2< T0,T1 >::type type;
};

template<
      typename T0, typename T1, typename T2
    >
struct list<
          T0, T1, T2, na, na, na, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list3< T0,T1,T2 >
{
    typedef typename list3< T0,T1,T2 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3
    >
struct list<
          T0, T1, T2, T3, na, na, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list4< T0,T1,T2,T3 >
{
    typedef typename list4< T0,T1,T2,T3 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    >
struct list<
          T0, T1, T2, T3, T4, na, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list5< T0,T1,T2,T3,T4 >
{
    typedef typename list5< T0,T1,T2,T3,T4 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct list<
          T0, T1, T2, T3, T4, T5, na, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list6< T0,T1,T2,T3,T4,T5 >
{
    typedef typename list6< T0,T1,T2,T3,T4,T5 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, na, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list7< T0,T1,T2,T3,T4,T5,T6 >
{
    typedef typename list7< T0,T1,T2,T3,T4,T5,T6 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, na, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list8< T0,T1,T2,T3,T4,T5,T6,T7 >
{
    typedef typename list8< T0,T1,T2,T3,T4,T5,T6,T7 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, na, na, na, na, na, na, na, na
        , na, na, na
        >
    : list9< T0,T1,T2,T3,T4,T5,T6,T7,T8 >
{
    typedef typename list9< T0,T1,T2,T3,T4,T5,T6,T7,T8 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, na, na, na, na, na, na, na
        , na, na, na
        >
    : list10< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9 >
{
    typedef typename list10< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, na, na, na, na, na, na
        , na, na, na
        >
    : list11< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10 >
{
    typedef typename list11< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, na, na, na, na
        , na, na, na, na
        >
    : list12< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11 >
{
    typedef typename list12< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, na, na, na
        , na, na, na, na
        >
    : list13< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12 >
{
    typedef typename list13< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, na, na
        , na, na, na, na
        >
    : list14< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13 >
{
    typedef typename list14< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, na
        , na, na, na, na
        >
    : list15<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        >
{
    typedef typename list15< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, na, na, na, na
        >
    : list16<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15
        >
{
    typedef typename list16< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16, na, na, na
        >
    : list17<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16
        >
{
    typedef typename list17< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16, typename T17
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16, T17, na, na
        >
    : list18<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16, T17
        >
{
    typedef typename list18< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17 >::type type;
};

template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16, typename T17, typename T18
    >
struct list<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16, T17, T18, na
        >
    : list19<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16, T17, T18
        >
{
    typedef typename list19< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18 >::type type;
};



template<
      typename T0, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename T6, typename T7, typename T8, typename T9
    , typename T10, typename T11, typename T12, typename T13, typename T14
    , typename T15, typename T16, typename T17, typename T18, typename T19
    >
struct list
    : list20<
          T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14
        , T15, T16, T17, T18, T19
        >
{
    typedef typename list20< T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19 >::type type;
};

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/list.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/make_variant_list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/make_variant_list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/enum.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/make_variant_list.hpp" 2


namespace boost {
namespace detail { namespace variant {
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/make_variant_list.hpp"
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
struct make_variant_list
{
public:






    typedef typename mpl::list<
          typename convert_void< T0 >::type , typename convert_void< T1 >::type , typename convert_void< T2 >::type , typename convert_void< T3 >::type , typename convert_void< T4 >::type , typename convert_void< T5 >::type , typename convert_void< T6 >::type , typename convert_void< T7 >::type , typename convert_void< T8 >::type , typename convert_void< T9 >::type , typename convert_void< T10 >::type , typename convert_void< T11 >::type , typename convert_void< T12 >::type , typename convert_void< T13 >::type , typename convert_void< T14 >::type , typename convert_void< T15 >::type , typename convert_void< T16 >::type , typename convert_void< T17 >::type , typename convert_void< T18 >::type , typename convert_void< T19 >::type




        >::type type;




};



}}
}
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/over_sequence.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/over_sequence.hpp"
namespace boost {
namespace detail { namespace variant {






template <typename Types>
struct over_sequence
{
    typedef Types type;
};
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/over_sequence.hpp"
template <typename T>
struct is_over_sequence
    : mpl::false_
{
};

template <typename Types>
struct is_over_sequence< over_sequence<Types> >
    : mpl::true_
{
};


}}
}
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/cast_storage.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/cast_storage.hpp"
namespace boost {
namespace detail { namespace variant {







template <typename T>
inline T& cast_storage(void* storage)
{
    return *static_cast<T*>(storage);
}

template <typename T>
inline const T& cast_storage(const void* storage)
{
    return *static_cast<const T*>(storage);
}

}}
}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/identity.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/identity.hpp"
namespace boost { namespace mpl {

template<
      typename T = na
    >
struct identity
{
    typedef T type;

};

template<
      typename T = na
    >
struct make_identity
{
    typedef identity<T> type;

};

template<> struct identity< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : identity< T1 > { }; }; template< typename Tag > struct lambda< identity< na > , Tag > { typedef false_ is_le; typedef identity< na > result_; typedef identity< na > type; };
template<> struct make_identity< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : make_identity< T1 > { }; }; template< typename Tag > struct lambda< make_identity< na > , Tag > { typedef false_ is_le; typedef make_identity< na > result_; typedef make_identity< na > type; };

}}
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp" 1
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_same.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_same.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_same.hpp" 2


namespace boost {


template< typename T, typename U > struct is_same : public ::boost::integral_constant<bool,false> { public: };
template< typename T > struct is_same< T,T > : public ::boost::integral_constant<bool,true> { public: };







}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_same.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_constructor.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_constructor.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_constructor.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct has_trivial_move_ctor_impl
{



   static const bool value = (::boost::type_traits::ice_and< ::boost::is_pod<T>::value, ::boost::type_traits::ice_not< ::boost::is_volatile<T>::value >::value >::value);





};

}

template< typename T > struct has_trivial_move_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_move_ctor_impl<T>::value> { public: };

template<> struct has_trivial_move_constructor< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_trivial_move_constructor< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_move_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_move_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_constructor.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/utility/declval.hpp" 1
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/utility/declval.hpp"
namespace boost {

    template <typename T>
    typename add_rvalue_reference<T>::type declval() ;

}
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/utility/enable_if.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/utility/enable_if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/core/enable_if.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/core/enable_if.hpp"
namespace boost
{

  template <bool B, class T = void>
  struct enable_if_c {
    typedef T type;
  };

  template <class T>
  struct enable_if_c<false, T> {};

  template <class Cond, class T = void>
  struct enable_if : public enable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_enable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_enable_if_c<false, T> {};

  template <class Cond, class T>
  struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};


  template <bool B, class T = void>
  struct disable_if_c {
    typedef T type;
  };

  template <class T>
  struct disable_if_c<true, T> {};

  template <class Cond, class T = void>
  struct disable_if : public disable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_disable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_disable_if_c<true, T> {};

  template <class Cond, class T>
  struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};

}
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/utility/enable_if.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp" 2


namespace boost {

namespace detail{
# 80 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp"
template <class T>
struct is_nothrow_move_constructible_imp{
    static const bool value =( ::boost::type_traits::ice_and< ::boost::type_traits::ice_or< ::boost::has_trivial_move_constructor<T>::value, ::boost::has_nothrow_copy<T>::value >::value, ::boost::type_traits::ice_not< ::boost::is_array<T>::value >::value >::value);







};



}

template< typename T > struct is_nothrow_move_constructible : public ::boost::integral_constant<bool,::boost::detail::is_nothrow_move_constructible_imp<T>::value> { public: };

template<> struct is_nothrow_move_constructible< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct is_nothrow_move_constructible< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct is_nothrow_move_constructible< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct is_nothrow_move_constructible< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 107 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_constructible.hpp" 2
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp" 2
# 62 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp"
namespace boost {
namespace detail { namespace variant {






struct apply_visitor_unrolled {};
# 79 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp"
template <typename Iter, typename LastIter>
struct visitation_impl_step
{
    typedef typename mpl::deref<Iter>::type type;

    typedef typename mpl::next<Iter>::type next_iter;
    typedef visitation_impl_step<
          next_iter, LastIter
        > next;
};

template <typename LastIter>
struct visitation_impl_step< LastIter,LastIter >
{
    typedef apply_visitor_unrolled type;
    typedef visitation_impl_step next;
};
# 104 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp"
template <typename Visitor, typename VoidPtrCV, typename T>
inline
    typename Visitor::result_type
visitation_impl_invoke_impl(
      int, Visitor& visitor, VoidPtrCV storage, T*
    , mpl::true_
    )
{
    return visitor.internal_visit(
          cast_storage<T>(storage), 1L
        );
}

template <typename Visitor, typename VoidPtrCV, typename T>
inline
    typename Visitor::result_type
visitation_impl_invoke_impl(
      int internal_which, Visitor& visitor, VoidPtrCV storage, T*
    , mpl::false_
    )
{
    if (internal_which >= 0)
    {
        return visitor.internal_visit(
              cast_storage<T>(storage), 1L
            );
    }
    else
    {
        return visitor.internal_visit(
              cast_storage< backup_holder<T> >(storage), 1L
            );
    }
}

template <typename Visitor, typename VoidPtrCV, typename T, typename NoBackupFlag>
inline
    typename Visitor::result_type
visitation_impl_invoke(
      int internal_which, Visitor& visitor, VoidPtrCV storage, T* t
    , NoBackupFlag
    , int
    )
{
    typedef typename mpl::or_<
          NoBackupFlag
        , is_nothrow_move_constructible<T>
        , has_nothrow_copy<T>
        >::type never_uses_backup;

    return (visitation_impl_invoke_impl)(
          internal_which, visitor, storage, t
        , never_uses_backup()
        );
}

template <typename Visitor, typename VoidPtrCV, typename NBF>
inline
    typename Visitor::result_type
visitation_impl_invoke(int, Visitor&, VoidPtrCV, apply_visitor_unrolled*, NBF, long)
{

    typedef typename Visitor::result_type result_type;
    return ::boost::detail::variant::forced_return< result_type >();
}







template <
      typename W, typename S
    , typename Visitor, typename VPCV
    , typename NBF
    >
inline
    typename Visitor::result_type
visitation_impl(
      int, int, Visitor&, VPCV
    , mpl::true_
    , NBF, W* = 0, S* = 0
    )
{

    typedef typename Visitor::result_type result_type;
    return ::boost::detail::variant::forced_return< result_type >();
}

template <
      typename Which, typename step0
    , typename Visitor, typename VoidPtrCV
    , typename NoBackupFlag
    >
inline
    typename Visitor::result_type
visitation_impl(
      const int internal_which, const int logical_which
    , Visitor& visitor, VoidPtrCV storage
    , mpl::false_
    , NoBackupFlag no_backup_flag
    , Which* = 0, step0* = 0
    )
{







    typedef typename step0::type T0; typedef typename step0::next step1; typedef typename step1::type T1; typedef typename step1::next step2; typedef typename step2::type T2; typedef typename step2::next step3; typedef typename step3::type T3; typedef typename step3::next step4; typedef typename step4::type T4; typedef typename step4::next step5; typedef typename step5::type T5; typedef typename step5::next step6; typedef typename step6::type T6; typedef typename step6::next step7; typedef typename step7::type T7; typedef typename step7::next step8; typedef typename step8::type T8; typedef typename step8::next step9; typedef typename step9::type T9; typedef typename step9::next step10; typedef typename step10::type T10; typedef typename step10::next step11; typedef typename step11::type T11; typedef typename step11::next step12; typedef typename step12::type T12; typedef typename step12::next step13; typedef typename step13::type T13; typedef typename step13::next step14; typedef typename step14::type T14; typedef typename step14::next step15; typedef typename step15::type T15; typedef typename step15::next step16; typedef typename step16::type T16; typedef typename step16::next step17; typedef typename step17::type T17; typedef typename step17::next step18; typedef typename step18::type T18; typedef typename step18::next step19; typedef typename step19::type T19; typedef typename step19::next step20;
# 225 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp"
    switch (logical_which)
    {
# 238 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/visitation_impl.hpp"
    case (Which::value + (0)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T0*>(0) , no_backup_flag, 1L ); case (Which::value + (1)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T1*>(0) , no_backup_flag, 1L ); case (Which::value + (2)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T2*>(0) , no_backup_flag, 1L ); case (Which::value + (3)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T3*>(0) , no_backup_flag, 1L ); case (Which::value + (4)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T4*>(0) , no_backup_flag, 1L ); case (Which::value + (5)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T5*>(0) , no_backup_flag, 1L ); case (Which::value + (6)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T6*>(0) , no_backup_flag, 1L ); case (Which::value + (7)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T7*>(0) , no_backup_flag, 1L ); case (Which::value + (8)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T8*>(0) , no_backup_flag, 1L ); case (Which::value + (9)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T9*>(0) , no_backup_flag, 1L ); case (Which::value + (10)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T10*>(0) , no_backup_flag, 1L ); case (Which::value + (11)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T11*>(0) , no_backup_flag, 1L ); case (Which::value + (12)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T12*>(0) , no_backup_flag, 1L ); case (Which::value + (13)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T13*>(0) , no_backup_flag, 1L ); case (Which::value + (14)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T14*>(0) , no_backup_flag, 1L ); case (Which::value + (15)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T15*>(0) , no_backup_flag, 1L ); case (Which::value + (16)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T16*>(0) , no_backup_flag, 1L ); case (Which::value + (17)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T17*>(0) , no_backup_flag, 1L ); case (Which::value + (18)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T18*>(0) , no_backup_flag, 1L ); case (Which::value + (19)): return (visitation_impl_invoke)( internal_which, visitor, storage , static_cast<T19*>(0) , no_backup_flag, 1L );







    default: break;
    }


    typedef mpl::int_<
          Which::value + (20)
        > next_which;

    typedef step20
        next_step;

    typedef typename next_step::type next_type;
    typedef typename is_same< next_type,apply_visitor_unrolled >::type
        is_apply_visitor_unrolled;

    return visitation_impl(
          internal_which, logical_which
        , visitor, storage
        , is_apply_visitor_unrolled()
        , no_backup_flag
        , static_cast<next_which*>(0), static_cast<next_step*>(0)
        );
}

}}
}
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/hash_variant.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/hash_variant.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/static_visitor.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/static_visitor.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp" 2


namespace boost {

namespace detail {
# 115 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp"
template <typename B, typename D>
struct bd_helper
{






    template <typename T>
    static type_traits::yes_type check_sig(D const volatile *, T);
    static type_traits::no_type check_sig(B const volatile *, int);




};

template<typename B, typename D>
struct is_base_and_derived_impl2
{
# 144 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp"
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(sizeof(B) != 0) >)> boost_static_assert_typedef_144 ;
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(sizeof(D) != 0) >)> boost_static_assert_typedef_145 ;

    struct Host
    {

        operator B const volatile *() const;



        operator D const volatile *();
    };

    static const bool value = sizeof(bd_helper<B,D>::check_sig(Host(), 0)) == sizeof(type_traits::yes_type);




};
# 180 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp"
template <typename B, typename D>
struct is_base_and_derived_impl3
{
    static const bool value = false;
};

template <bool ic1, bool ic2, bool iss>
struct is_base_and_derived_select
{
   template <class T, class U>
   struct rebind
   {
      typedef is_base_and_derived_impl3<T,U> type;
   };
};

template <>
struct is_base_and_derived_select<true,true,false>
{
   template <class T, class U>
   struct rebind
   {
      typedef is_base_and_derived_impl2<T,U> type;
   };
};

template <typename B, typename D>
struct is_base_and_derived_impl
{
    typedef typename remove_cv<B>::type ncvB;
    typedef typename remove_cv<D>::type ncvD;

    typedef is_base_and_derived_select<
       ::boost::is_class<B>::value,
       ::boost::is_class<D>::value,
       ::boost::is_same<ncvB,ncvD>::value> selector;
    typedef typename selector::template rebind<ncvB,ncvD> binder;
    typedef typename binder::type bound_type;

    static const bool value = bound_type::value;
};
# 231 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp"
}

template< typename Base, typename Derived > struct is_base_and_derived : public ::boost::integral_constant<bool,(::boost::detail::is_base_and_derived_impl<Base,Derived>::value)> { public: };






template< typename Base, typename Derived > struct is_base_and_derived< Base&,Derived > : public ::boost::integral_constant<bool,false> { public: };
template< typename Base, typename Derived > struct is_base_and_derived< Base,Derived& > : public ::boost::integral_constant<bool,false> { public: };
template< typename Base, typename Derived > struct is_base_and_derived< Base&,Derived& > : public ::boost::integral_constant<bool,false> { public: };





}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 250 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_base_and_derived.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/static_visitor.hpp" 2





namespace boost {
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/variant/static_visitor.hpp"
namespace detail {

    struct is_static_visitor_tag { };

    typedef void static_visitor_default_return;

}

template <typename R = ::boost::detail::static_visitor_default_return>
class static_visitor
    : public detail::is_static_visitor_tag
{
public:

    typedef R result_type;

protected:




    static_visitor() { }
    ~static_visitor() { }

};
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/variant/static_visitor.hpp"
namespace detail {

template <typename T>
struct is_static_visitor_impl
{
    static const bool value = (::boost::is_base_and_derived< detail::is_static_visitor_tag, T >::value);




};

}

template< typename T > struct is_static_visitor
 : public ::boost::integral_constant<bool,(::boost::detail::is_static_visitor_impl<T>::value)>
{
public:

};

}
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/hash_variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/apply_visitor.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/variant/apply_visitor.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_unary.hpp" 1
# 36 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_unary.hpp"
namespace boost {
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_unary.hpp"
template <typename Visitor, typename Visitable>
inline
    typename Visitor::result_type
apply_visitor(Visitor& visitor, Visitable& visitable)
{
    return visitable.apply_visitor(visitor);
}







template <typename Visitor, typename Visitable>
inline
    typename Visitor::result_type
apply_visitor(const Visitor& visitor, Visitable& visitable)
{
    return visitable.apply_visitor(visitor);
}
# 171 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_unary.hpp"
}
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/variant/apply_visitor.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_binary.hpp" 1
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_binary.hpp"
namespace boost {
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_binary.hpp"
namespace detail { namespace variant {

template <typename Visitor, typename Value1>
class apply_visitor_binary_invoke
{
public:

    typedef typename Visitor::result_type
        result_type;

private:

    Visitor& visitor_;
    Value1& value1_;

public:

    apply_visitor_binary_invoke(Visitor& visitor, Value1& value1)
        : visitor_(visitor)
        , value1_(value1)
    {
    }

public:

    template <typename Value2>
        result_type
    operator()(Value2& value2)
    {
        return visitor_(value1_, value2);
    }

private:
    apply_visitor_binary_invoke& operator=(const apply_visitor_binary_invoke&);
};

template <typename Visitor, typename Visitable2>
class apply_visitor_binary_unwrap
{
public:

    typedef typename Visitor::result_type
        result_type;

private:

    Visitor& visitor_;
    Visitable2& visitable2_;

public:

    apply_visitor_binary_unwrap(Visitor& visitor, Visitable2& visitable2)
        : visitor_(visitor)
        , visitable2_(visitable2)
    {
    }

public:

    template <typename Value1>
        result_type
    operator()(Value1& value1)
    {
        apply_visitor_binary_invoke<
              Visitor
            , Value1
            > invoker(visitor_, value1);

        return boost::apply_visitor(invoker, visitable2_);
    }

private:
    apply_visitor_binary_unwrap& operator=(const apply_visitor_binary_unwrap&);

};

}}
# 142 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_binary.hpp"
template <typename Visitor, typename Visitable1, typename Visitable2>
inline
    typename Visitor::result_type
apply_visitor(
      Visitor& visitor
    , Visitable1& visitable1, Visitable2& visitable2
    )
{
    ::boost::detail::variant::apply_visitor_binary_unwrap<
          Visitor, Visitable2
        > unwrapper(visitor, visitable2);

    return boost::apply_visitor(unwrapper, visitable1);
}







template <typename Visitor, typename Visitable1, typename Visitable2>
inline
    typename Visitor::result_type


apply_visitor(
      const Visitor& visitor
    , Visitable1& visitable1, Visitable2& visitable2
    )
{
    ::boost::detail::variant::apply_visitor_binary_unwrap<
          const Visitor, Visitable2
        > unwrapper(visitor, visitable2);

    return boost::apply_visitor(unwrapper, visitable1);
}
# 278 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_binary.hpp"
}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/apply_visitor.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_delayed.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_delayed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/has_result_type.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/has_result_type.hpp"
namespace boost { namespace detail { namespace variant {

template <typename T >
struct has_result_type {
private:
    typedef char yes;
    typedef struct { char array[2]; } no;

    template<typename C> static yes test(typename boost::remove_reference<typename C::result_type>::type*);
    template<typename C> static no test(...);

public:
    static const bool value = sizeof(test<T>(0)) == sizeof(yes);
};

}}}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_delayed.hpp" 2



namespace boost {
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_delayed.hpp"
template <typename Visitor>
class apply_visitor_delayed_t
{
public:

    typedef typename Visitor::result_type
        result_type;

private:

    Visitor& visitor_;

public:

    explicit apply_visitor_delayed_t(Visitor& visitor)
      : visitor_(visitor)
    {
    }
# 74 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_delayed.hpp"
public:

    template <typename Visitable>
        result_type
    operator()(Visitable& visitable) const
    {
        return apply_visitor(visitor_, visitable);
    }

public:

    template <typename Visitable1, typename Visitable2>
        result_type
    operator()(Visitable1& visitable1, Visitable2& visitable2) const
    {
        return apply_visitor(visitor_, visitable1, visitable2);
    }



private:
    apply_visitor_delayed_t& operator=(const apply_visitor_delayed_t&);

};

template <typename Visitor>
inline typename boost::enable_if<
        boost::detail::variant::has_result_type<Visitor>,
        apply_visitor_delayed_t<Visitor>
    >::type apply_visitor(Visitor& visitor)
{
    return apply_visitor_delayed_t<Visitor>(visitor);
}
# 149 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/apply_visitor_delayed.hpp"
}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/apply_visitor.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/hash_variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/functional/hash_fwd.hpp" 1
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/functional/hash_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/functional/hash/hash_fwd.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/functional/hash/hash_fwd.hpp"
namespace boost
{
    template <class T> struct hash;

    template <class T> void hash_combine(std::size_t& seed, T const& v);

    template <class It> std::size_t hash_range(It, It);
    template <class It> void hash_range(std::size_t&, It, It);





}
# 11 "C:/Programing/Libs/boost_1_59_0\\boost/functional/hash_fwd.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/hash_variant.hpp" 2


namespace boost {

    namespace detail { namespace variant {
        struct variant_hasher: public boost::static_visitor<std::size_t> {
            template <class T>
            std::size_t operator()(T const& val) const {
                boost::hash<T> hasher;
                return hasher(val);
            }
        };
    }}

    template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
    std::size_t hash_value(variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 > const& val) {
        std::size_t seed = boost::apply_visitor(detail::variant::variant_hasher(), val);
        hash_combine(seed, val.which());
        return seed;
    }
}
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/size_t_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/size_t_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/size_t_trait_def.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_t.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_t.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_t_fwd.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_t_fwd.hpp"
namespace mpl_ {

template< std::size_t N > struct size_t;

}
namespace boost { namespace mpl { using ::mpl_::size_t; } }
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_t.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp" 2
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {

template< std::size_t N >
struct size_t
{
    static const std::size_t value = N;





    typedef size_t type;

    typedef std::size_t value_type;
    typedef integral_c_tag tag;
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef mpl_::size_t< static_cast<std::size_t>((value + 1)) > next;
    typedef mpl_::size_t< static_cast<std::size_t>((value - 1)) > prior;






                    operator std::size_t() const { return static_cast<std::size_t>(this->value); }
};


template< std::size_t N >
std::size_t const mpl_::size_t< N >::value;


}
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/size_t.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/size_t_trait_def.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp"
namespace boost {

template <typename T> struct alignment_of;


namespace detail {





template <typename T>
struct alignment_of_hack
{
    char c;
    T t;
    alignment_of_hack();
};




template <unsigned A, unsigned S>
struct alignment_logic
{
    static const std::size_t value = A < S ? A : S;
};


template< typename T >
struct alignment_of_impl
{
# 71 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp"
    static const std::size_t value = (::boost::detail::alignment_logic< sizeof(::boost::detail::alignment_of_hack<T>) - sizeof(T), sizeof(T) >::value);
# 85 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp"
};

}

template< typename T > struct alignment_of : public ::boost::integral_constant<std::size_t,::boost::detail::alignment_of_impl<T>::value> { public: };



template <typename T>
struct alignment_of<T&>
    : public alignment_of<T*>
{
};
# 107 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp"
template<> struct alignment_of<void> : public ::boost::integral_constant<std::size_t,0> { public: };

template<> struct alignment_of<void const> : public ::boost::integral_constant<std::size_t,0> { public: };
template<> struct alignment_of<void volatile> : public ::boost::integral_constant<std::size_t,0> { public: };
template<> struct alignment_of<void const volatile> : public ::boost::integral_constant<std::size_t,0> { public: };


}
# 123 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/size_t_trait_undef.hpp" 1
# 123 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/alignment_of.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/adt.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/debug/error.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/empty.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/detail/auto_rec.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 2
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/detail/for.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/detail/for.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/expr_iif.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/detail/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/control/iif.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/detail/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/logical/bool.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/detail/for.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/eat.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/detail/for.hpp" 2
# 44 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repetition/for.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/for_each_i.hpp" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/facilities/overload.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/size.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/size.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/size.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/size.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/size.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/size.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/variadic/size.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/to_list.hpp" 2
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/transform.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/transform.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/transform.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/transform.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/transform.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/rem.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/transform.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/append.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/append.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/config/config.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/append.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/fold_right.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/list/append.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp"
namespace boost {



namespace detail {

class alignment_dummy;
typedef void (*function_ptr)();
typedef int (alignment_dummy::*member_ptr);
typedef int (alignment_dummy::*member_function_ptr)();
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp"
template <bool found, std::size_t target, class TestType>
struct lower_alignment_helper
{
    typedef char type;
    enum { value = true };
};

template <std::size_t target, class TestType>
struct lower_alignment_helper<false,target,TestType>
{
    enum { value = (alignment_of<TestType>::value == target) };
    typedef typename mpl::if_c<value, TestType, char>::type type;
};
# 97 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp"
template <typename T>
struct has_one_T
{
  T data;
};

template <std::size_t target>
union lower_alignment
{
    enum { found0 = false };

    typename lower_alignment_helper< found0,target,char >::type t0; enum { found1 = lower_alignment_helper<found0,target,char >::value }; typename lower_alignment_helper< found1,target,short >::type t1; enum { found2 = lower_alignment_helper<found1,target,short >::value }; typename lower_alignment_helper< found2,target,int >::type t2; enum { found3 = lower_alignment_helper<found2,target,int >::value }; typename lower_alignment_helper< found3,target,long >::type t3; enum { found4 = lower_alignment_helper<found3,target,long >::value }; typename lower_alignment_helper< found4,target,::boost::long_long_type >::type t4; enum { found5 = lower_alignment_helper<found4,target,::boost::long_long_type >::value }; typename lower_alignment_helper< found5,target,float >::type t5; enum { found6 = lower_alignment_helper<found5,target,float >::value }; typename lower_alignment_helper< found6,target,double >::type t6; enum { found7 = lower_alignment_helper<found6,target,double >::value }; typename lower_alignment_helper< found7,target,long double >::type t7; enum { found8 = lower_alignment_helper<found7,target,long double >::value }; typename lower_alignment_helper< found8,target,void* >::type t8; enum { found9 = lower_alignment_helper<found8,target,void* >::value }; typename lower_alignment_helper< found9,target,function_ptr >::type t9; enum { found10 = lower_alignment_helper<found9,target,function_ptr >::value }; typename lower_alignment_helper< found10,target,member_ptr >::type t10; enum { found11 = lower_alignment_helper<found10,target,member_ptr >::value }; typename lower_alignment_helper< found11,target,member_function_ptr >::type t11; enum { found12 = lower_alignment_helper<found11,target,member_function_ptr >::value }; typename lower_alignment_helper< found12,target,boost::detail::has_one_T< char > >::type t12; enum { found13 = lower_alignment_helper<found12,target,boost::detail::has_one_T< char > >::value }; typename lower_alignment_helper< found13,target,boost::detail::has_one_T< short > >::type t13; enum { found14 = lower_alignment_helper<found13,target,boost::detail::has_one_T< short > >::value }; typename lower_alignment_helper< found14,target,boost::detail::has_one_T< int > >::type t14; enum { found15 = lower_alignment_helper<found14,target,boost::detail::has_one_T< int > >::value }; typename lower_alignment_helper< found15,target,boost::detail::has_one_T< long > >::type t15; enum { found16 = lower_alignment_helper<found15,target,boost::detail::has_one_T< long > >::value }; typename lower_alignment_helper< found16,target,boost::detail::has_one_T< ::boost::long_long_type > >::type t16; enum { found17 = lower_alignment_helper<found16,target,boost::detail::has_one_T< ::boost::long_long_type > >::value }; typename lower_alignment_helper< found17,target,boost::detail::has_one_T< float > >::type t17; enum { found18 = lower_alignment_helper<found17,target,boost::detail::has_one_T< float > >::value }; typename lower_alignment_helper< found18,target,boost::detail::has_one_T< double > >::type t18; enum { found19 = lower_alignment_helper<found18,target,boost::detail::has_one_T< double > >::value }; typename lower_alignment_helper< found19,target,boost::detail::has_one_T< long double > >::type t19; enum { found20 = lower_alignment_helper<found19,target,boost::detail::has_one_T< long double > >::value }; typename lower_alignment_helper< found20,target,boost::detail::has_one_T< void* > >::type t20; enum { found21 = lower_alignment_helper<found20,target,boost::detail::has_one_T< void* > >::value }; typename lower_alignment_helper< found21,target,boost::detail::has_one_T< function_ptr > >::type t21; enum { found22 = lower_alignment_helper<found21,target,boost::detail::has_one_T< function_ptr > >::value }; typename lower_alignment_helper< found22,target,boost::detail::has_one_T< member_ptr > >::type t22; enum { found23 = lower_alignment_helper<found22,target,boost::detail::has_one_T< member_ptr > >::value }; typename lower_alignment_helper< found23,target,boost::detail::has_one_T< member_function_ptr > >::type t23; enum { found24 = lower_alignment_helper<found23,target,boost::detail::has_one_T< member_function_ptr > >::value };




};

union max_align
{
    char t0; short t1; int t2; long t3; ::boost::long_long_type t4; float t5; double t6; long double t7; void* t8; function_ptr t9; member_ptr t10; member_function_ptr t11; boost::detail::has_one_T< char > t12; boost::detail::has_one_T< short > t13; boost::detail::has_one_T< int > t14; boost::detail::has_one_T< long > t15; boost::detail::has_one_T< ::boost::long_long_type > t16; boost::detail::has_one_T< float > t17; boost::detail::has_one_T< double > t18; boost::detail::has_one_T< long double > t19; boost::detail::has_one_T< void* > t20; boost::detail::has_one_T< function_ptr > t21; boost::detail::has_one_T< member_ptr > t22; boost::detail::has_one_T< member_function_ptr > t23;




};
# 131 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp"
template<std::size_t TAlign, std::size_t Align>
struct is_aligned
{
    static const bool value = (TAlign >= Align) & (TAlign % Align == 0);


};


}

template<std::size_t Align>
struct is_pod< ::boost::detail::lower_alignment<Align> >
{
        static const std::size_t value = true;
};



namespace detail{

template <std::size_t Align>
class type_with_alignment_imp
{
    typedef ::boost::detail::lower_alignment<Align> t1;
    typedef typename mpl::if_c<
          ::boost::detail::is_aligned< ::boost::alignment_of<t1>::value,Align >::value
        , t1
        , ::boost::detail::max_align
        >::type align_t;

    static const std::size_t found = alignment_of<align_t>::value;

    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(found >= Align) >)> boost_static_assert_typedef_164 ;
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(found % Align == 0) >)> boost_static_assert_typedef_165 ;

 public:
    typedef align_t type;
};

}

template <std::size_t Align>
class type_with_alignment
  : public ::boost::detail::type_with_alignment_imp<Align>
{
};
# 347 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp"
}






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 353 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/type_with_alignment.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp" 2


namespace boost {

namespace detail { namespace aligned_storage {

static const std::size_t alignment_of_max_align = ::boost::alignment_of<max_align>::value;







template <
      std::size_t size_
    , std::size_t alignment_
>
struct aligned_storage_imp
{
    union data_t
    {
        char buf[size_];

        typename ::boost::mpl::eval_if_c<
              alignment_ == std::size_t(-1)
            , ::boost::mpl::identity< ::boost::detail::max_align >
            , ::boost::type_with_alignment<alignment_>
            >::type align_;
    } data_;
    void* address() const { return const_cast<aligned_storage_imp*>(this); }
};

template< std::size_t alignment_ >
struct aligned_storage_imp<0u,alignment_>
{

    void* address() const { return 0; }
};

}}

template <
      std::size_t size_
    , std::size_t alignment_ = std::size_t(-1)
>
class aligned_storage :

   private



   ::boost::detail::aligned_storage::aligned_storage_imp<size_, alignment_>
{

public:

    typedef ::boost::detail::aligned_storage::aligned_storage_imp<size_, alignment_> type;

    static const std::size_t size = size_;



    static const std::size_t alignment = ( alignment_ == std::size_t(-1) ? ::boost::detail::aligned_storage::alignment_of_max_align : alignment_ );
# 99 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp"
private:

    aligned_storage(const aligned_storage&);
    aligned_storage& operator=(const aligned_storage&);

public:

    aligned_storage()
    {
    }

    ~aligned_storage()
    {
    }

public:

    void* address()
    {
        return static_cast<type*>(this)->address();
    }

    const void* address() const
    {
        return static_cast<const type*>(this)->address();
    }
};





template <std::size_t size_, std::size_t alignment_>
struct is_pod< ::boost::detail::aligned_storage::aligned_storage_imp<size_,alignment_> >
   : public ::boost::integral_constant<bool,true>
{

};


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 141 "C:/Programing/Libs/boost_1_59_0\\boost/aligned_storage.hpp" 2
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/blank.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/blank.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/detail/templated_streams.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/blank.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_empty.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_empty.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_empty.hpp" 2








namespace boost {

namespace detail {







template <typename T>
struct empty_helper_t1 : public T
{
    empty_helper_t1();
    int i[256];
private:

   empty_helper_t1(const empty_helper_t1&);
   empty_helper_t1& operator=(const empty_helper_t1&);
};





struct empty_helper_t2 { int i[256]; };



template <typename T, bool is_a_class = false>
struct empty_helper
{
    static const bool value = false;
};

template <typename T>
struct empty_helper<T, true>
{
    static const bool value = (sizeof(empty_helper_t1<T>) == sizeof(empty_helper_t2));


};

template <typename T>
struct is_empty_impl
{
    typedef typename remove_cv<T>::type cvt;
    static const bool value = ( ::boost::type_traits::ice_or< ::boost::detail::empty_helper<cvt,::boost::is_class<T>::value>::value , false >::value );






};
# 124 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_empty.hpp"
template<> struct is_empty_impl< void > { public: static const bool value = (false); };

template<> struct is_empty_impl< void const > { public: static const bool value = (false); };
template<> struct is_empty_impl< void volatile > { public: static const bool value = (false); };
template<> struct is_empty_impl< void const volatile > { public: static const bool value = (false); };


}

template< typename T > struct is_empty : public ::boost::integral_constant<bool,::boost::detail::is_empty_impl<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 137 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_empty.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/blank.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_stateless.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_stateless.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_constructor.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_constructor.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_constructor.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct has_trivial_ctor_impl
{







   static const bool value = (::boost::type_traits::ice_or< ::boost::is_pod<T>::value, false >::value);





};

}

template< typename T > struct has_trivial_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_ctor_impl<T>::value> { public: };
template< typename T > struct has_trivial_default_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_ctor_impl<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 49 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_constructor.hpp" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_stateless.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_destructor.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_destructor.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_destructor.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct has_trivial_dtor_impl
{



   static const bool value = ::boost::is_pod<T>::value;

};

}

template< typename T > struct has_trivial_destructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_dtor_impl<T>::value> { public: };

template<> struct has_trivial_destructor< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_trivial_destructor< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_destructor< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_destructor< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 47 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_destructor.hpp" 2
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_stateless.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_stateless.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct is_stateless_impl
{
  static const bool value = (::boost::type_traits::ice_and< ::boost::has_trivial_constructor<T>::value, ::boost::has_trivial_copy<T>::value, ::boost::has_trivial_destructor<T>::value, ::boost::is_class<T>::value, ::boost::is_empty<T>::value >::value);







};

}

template< typename T > struct is_stateless : public ::boost::integral_constant<bool,::boost::detail::is_stateless_impl<T>::value> { public: };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_stateless.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/blank.hpp" 2


namespace boost {

struct blank
{
};




template <>
struct is_pod< blank >
    : mpl::true_
{
};

template <>
struct is_empty< blank >
    : mpl::true_
{
};

template <>
struct is_stateless< blank >
    : mpl::true_
{
};




inline bool operator==(const blank&, const blank&)
{
    return true;
}

inline bool operator<=(const blank&, const blank&)
{
    return true;
}

inline bool operator>=(const blank&, const blank&)
{
    return true;
}

inline bool operator!=(const blank&, const blank&)
{
    return false;
}

inline bool operator<(const blank&, const blank&)
{
    return false;
}

inline bool operator>(const blank&, const blank&)
{
    return false;
}





template < typename E , typename T >
inline std::basic_ostream< E , T >& operator<<(
      std::basic_ostream< E , T >& out
    , const blank&
    )
{

    return out;
}



}
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/math/common_factor_ct.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/math/common_factor_ct.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/math_fwd.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/math_fwd.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/cstdint.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/math_fwd.hpp" 2


namespace boost
{
namespace math
{




template < typename T >
    class quaternion;

template < >
    class quaternion< float >;
template < >
    class quaternion< double >;
template < >
    class quaternion< long double >;






template < typename T >
    class octonion;

template < >
    class octonion< float >;
template < >
    class octonion< double >;
template < >
    class octonion< long double >;
# 85 "C:/Programing/Libs/boost_1_59_0\\boost/math_fwd.hpp"
     typedef boost::uintmax_t static_gcd_type;


template < static_gcd_type Value1, static_gcd_type Value2 >
    struct static_gcd;
template < static_gcd_type Value1, static_gcd_type Value2 >
    struct static_lcm;




template < typename IntegerType >
    class gcd_evaluator;
template < typename IntegerType >
    class lcm_evaluator;




}
}
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/math/common_factor_ct.hpp" 2




namespace boost
{
namespace math
{



namespace detail
{

    template < static_gcd_type Value1, static_gcd_type Value2 >
    struct static_gcd_helper_t
    {
    private:
        static const static_gcd_type new_value1 = Value2;
        static const static_gcd_type new_value2 = Value1 % Value2;
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/math/common_factor_ct.hpp"
        typedef static_gcd_helper_t< static_cast<static_gcd_type>(new_value1),
         static_cast<static_gcd_type>(new_value2) > next_step_type;



    public:
        static const static_gcd_type value = next_step_type::value;
    };


    template < static_gcd_type Value1 >
    struct static_gcd_helper_t< Value1, 0UL >
    {
        static const static_gcd_type value = Value1;
    };


    template < static_gcd_type Value1, static_gcd_type Value2 >
    struct static_lcm_helper_t
    {
        typedef static_gcd_helper_t<Value1, Value2> gcd_type;

        static const static_gcd_type value = Value1 / gcd_type::value * Value2;

    };


    template < >
    struct static_lcm_helper_t< 0UL, 0UL >
    {
        static const static_gcd_type value = 0UL;
    };

}




template < static_gcd_type Value1, static_gcd_type Value2 >
struct static_gcd : public mpl::integral_c<static_gcd_type, (detail::static_gcd_helper_t<Value1, Value2>::value) >
{
};




template < static_gcd_type Value1, static_gcd_type Value2 >
struct static_lcm : public mpl::integral_c<static_gcd_type, (detail::static_lcm_helper_t<Value1, Value2>::value) >
{
};


}
}
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_const.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_const.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_const.hpp" 2


namespace boost {
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_const.hpp"
template< typename T > struct add_const { public: typedef T const type; };





template< typename T > struct add_const<T&> { public: typedef T& type; };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 43 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_const.hpp" 2
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_constructor.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_constructor.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_constructor.hpp" 2


namespace boost {

namespace detail{

template <class T>
struct has_nothrow_constructor_imp{



   static const bool value = ::boost::has_trivial_constructor<T>::value;

};

}

template< typename T > struct has_nothrow_constructor : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_constructor_imp<T>::value> { public: };
template< typename T > struct has_nothrow_default_constructor : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_constructor_imp<T>::value> { public: };

template<> struct has_nothrow_constructor< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_nothrow_constructor< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public: };


template<> struct has_nothrow_default_constructor< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_nothrow_default_constructor< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_default_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_default_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 51 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_constructor.hpp" 2
# 49 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_assign.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_assign.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_assign.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct has_trivial_move_assign_impl
{



   static const bool value = (::boost::type_traits::ice_and< ::boost::is_pod<T>::value, ::boost::type_traits::ice_not< ::boost::is_const<T>::value >::value, ::boost::type_traits::ice_not< ::boost::is_volatile<T>::value >::value >::value);






};

}

template< typename T > struct has_trivial_move_assign : public ::boost::integral_constant<bool,::boost::detail::has_trivial_move_assign_impl<T>::value> { public: };
template<> struct has_trivial_move_assign< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_trivial_move_assign< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_move_assign< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_move_assign< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_move_assign.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_assign.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_assign.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_assign.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_assign.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_assign.hpp" 2


namespace boost {

namespace detail {

template <typename T>
struct has_trivial_assign_impl
{



   static const bool value = (::boost::type_traits::ice_and< ::boost::is_pod<T>::value, ::boost::type_traits::ice_not< ::boost::is_const<T>::value >::value, ::boost::type_traits::ice_not< ::boost::is_volatile<T>::value >::value >::value);






};

}

template< typename T > struct has_trivial_assign : public ::boost::integral_constant<bool,::boost::detail::has_trivial_assign_impl<T>::value> { public: };
template<> struct has_trivial_assign< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_trivial_assign< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_assign< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_trivial_assign< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_trivial_assign.hpp" 2
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_assign.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_assign.hpp" 2


namespace boost {

namespace detail{

template <class T>
struct has_nothrow_assign_imp{

   static const bool value = ::boost::has_trivial_assign<T>::value;



};

}

template< typename T > struct has_nothrow_assign : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_assign_imp<T>::value> { public: };
template<> struct has_nothrow_assign< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct has_nothrow_assign< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_assign< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct has_nothrow_assign< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/has_nothrow_assign.hpp" 2
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_def.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp" 2


namespace boost {

namespace detail{
# 80 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp"
template <class T>
struct is_nothrow_move_assignable_imp{
    static const bool value = ( ::boost::type_traits::ice_and< ::boost::type_traits::ice_or< ::boost::has_trivial_move_assign<T>::value, ::boost::has_nothrow_assign<T>::value >::value, ::boost::type_traits::ice_not< ::boost::is_array<T>::value >::value >::value);







};



}

template< typename T > struct is_nothrow_move_assignable : public ::boost::integral_constant<bool,::boost::detail::is_nothrow_move_assignable_imp<T>::value> { public: };
template<> struct is_nothrow_move_assignable< void > : public ::boost::integral_constant<bool,false> { public: };

template<> struct is_nothrow_move_assignable< void const > : public ::boost::integral_constant<bool,false> { public: };
template<> struct is_nothrow_move_assignable< void const volatile > : public ::boost::integral_constant<bool,false> { public: };
template<> struct is_nothrow_move_assignable< void volatile > : public ::boost::integral_constant<bool,false> { public: };


}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/bool_trait_undef.hpp" 1
# 106 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/is_nothrow_move_assignable.hpp" 2
# 51 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/empty.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/empty.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/empty_impl.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/empty_impl.hpp"
namespace boost { namespace mpl {




template< typename Tag >
struct empty_impl
{
    template< typename Sequence > struct apply
        : is_same<
              typename begin<Sequence>::type
            , typename end<Sequence>::type
            >
    {
    };
};

 template<> struct empty_impl<non_sequence_tag> {};

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/empty.hpp" 2




namespace boost { namespace mpl {

template<
      typename Sequence = na
    >
struct empty
    : empty_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence >
{

};

template<> struct empty< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : empty< T1 > { }; }; template< typename Tag > struct lambda< empty< na > , Tag > { typedef false_ is_le; typedef empty< na > result_; typedef empty< na > type; };

}}
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/find_if.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/find_if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/find_if_pred.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/find_if_pred.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_apply.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_apply.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_apply.hpp" 2



namespace boost { namespace mpl { namespace aux {

template<
      typename F
    , typename Iterator
    >
struct iter_apply1
    : apply1< F,typename deref<Iterator>::type >
{
};

template<
      typename F
    , typename Iterator1
    , typename Iterator2
    >
struct iter_apply2
    : apply2<
          F
        , typename deref<Iterator1>::type
        , typename deref<Iterator2>::type
        >
{
};

}}}
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/find_if_pred.hpp" 2



namespace boost { namespace mpl { namespace aux {

template< typename Predicate >
struct find_if_pred
{
    template< typename Iterator >
    struct apply
    {
        typedef not_< aux::iter_apply1<Predicate,Iterator> > type;
    };
};

}}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/find_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/find_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold_if.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold_if.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/logical.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/logical.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/and.hpp" 1
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/and.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/and.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/and.hpp"
namespace boost { namespace mpl {

namespace aux {

template< bool C_, typename T1, typename T2, typename T3, typename T4 >
struct and_impl
    : false_
{
};

template< typename T1, typename T2, typename T3, typename T4 >
struct and_impl< true,T1,T2,T3,T4 >
    : and_impl<
          T1::type::value
        , T2, T3, T4
        , true_
        >
{
};

template<>
struct and_impl<
          true
        , true_, true_, true_, true_
        >
    : true_
{
};

}

template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = true_, typename T4 = true_, typename T5 = true_
    >
struct and_

    : aux::and_impl<
          T1::type::value
        , T2, T3, T4, T5
        >

{
};

template<> struct and_< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : and_< T1 , T2 > { }; }; template< typename Tag > struct lambda< and_< na , na > , Tag > { typedef false_ is_le; typedef and_< na , na > result_; typedef and_< na , na > type; };





}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 42 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/and.hpp" 2
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/logical.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/always.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/always.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp" 1
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 45 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/comma_if.hpp" 1
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 47 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/inc.hpp" 1
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 49 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/default_params.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/always.hpp" 2




namespace boost { namespace mpl {

template< typename Value > struct always
{
    template<
        typename T1 = na , typename T2 = na , typename T3 = na , typename T4 = na , typename T5 = na
        >
    struct apply
    {
        typedef Value type;
    };
};



}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold_if.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold_if.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_if_impl.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_if_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_if_impl.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_if_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/iter_fold_if_impl.hpp" 1
# 13 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/iter_fold_if_impl.hpp"
namespace boost { namespace mpl { namespace aux {

template< typename Iterator, typename State >
struct iter_fold_if_null_step
{
    typedef State state;
    typedef Iterator iterator;
};

template< bool >
struct iter_fold_if_step_impl
{
    template<
          typename Iterator
        , typename State
        , typename StateOp
        , typename IteratorOp
        >
    struct result_
    {
        typedef typename apply2< StateOp,State,Iterator >::type state;
        typedef typename IteratorOp::type iterator;
    };
};

template<>
struct iter_fold_if_step_impl<false>
{
    template<
          typename Iterator
        , typename State
        , typename StateOp
        , typename IteratorOp
        >
    struct result_
    {
        typedef State state;
        typedef Iterator iterator;
    };
};

template<
      typename Iterator
    , typename State
    , typename ForwardOp
    , typename Predicate
    >
struct iter_fold_if_forward_step
{
    typedef typename apply2< Predicate,State,Iterator >::type not_last;
    typedef typename iter_fold_if_step_impl<
          not_last::value
        >::template result_< Iterator,State,ForwardOp, mpl::next<Iterator> > impl_;

    typedef typename impl_::state state;
    typedef typename impl_::iterator iterator;
};

template<
      typename Iterator
    , typename State
    , typename BackwardOp
    , typename Predicate
    >
struct iter_fold_if_backward_step
{
    typedef typename apply2< Predicate,State,Iterator >::type not_last;
    typedef typename iter_fold_if_step_impl<
          not_last::value
        >::template result_< Iterator,State,BackwardOp, identity<Iterator> > impl_;

    typedef typename impl_::state state;
    typedef typename impl_::iterator iterator;
};

template<
      typename Iterator
    , typename State
    , typename ForwardOp
    , typename ForwardPredicate
    , typename BackwardOp
    , typename BackwardPredicate
    >
struct iter_fold_if_impl
{
 private:
    typedef iter_fold_if_null_step< Iterator,State > forward_step0;
    typedef iter_fold_if_forward_step< typename forward_step0::iterator, typename forward_step0::state, ForwardOp, ForwardPredicate > forward_step1;
    typedef iter_fold_if_forward_step< typename forward_step1::iterator, typename forward_step1::state, ForwardOp, ForwardPredicate > forward_step2;
    typedef iter_fold_if_forward_step< typename forward_step2::iterator, typename forward_step2::state, ForwardOp, ForwardPredicate > forward_step3;
    typedef iter_fold_if_forward_step< typename forward_step3::iterator, typename forward_step3::state, ForwardOp, ForwardPredicate > forward_step4;


    typedef typename if_<
          typename forward_step4::not_last
        , iter_fold_if_impl<
              typename forward_step4::iterator
            , typename forward_step4::state
            , ForwardOp
            , ForwardPredicate
            , BackwardOp
            , BackwardPredicate
            >
        , iter_fold_if_null_step<
              typename forward_step4::iterator
            , typename forward_step4::state
            >
        >::type backward_step4;

    typedef iter_fold_if_backward_step< typename forward_step3::iterator, typename backward_step4::state, BackwardOp, BackwardPredicate > backward_step3;
    typedef iter_fold_if_backward_step< typename forward_step2::iterator, typename backward_step3::state, BackwardOp, BackwardPredicate > backward_step2;
    typedef iter_fold_if_backward_step< typename forward_step1::iterator, typename backward_step2::state, BackwardOp, BackwardPredicate > backward_step1;
    typedef iter_fold_if_backward_step< typename forward_step0::iterator, typename backward_step1::state, BackwardOp, BackwardPredicate > backward_step0;


 public:
    typedef typename backward_step0::state state;
    typedef typename backward_step4::iterator iterator;
};

}}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/iter_fold_if_impl.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iter_fold_if.hpp" 2








namespace boost { namespace mpl {

namespace aux {

template< typename Predicate, typename LastIterator >
struct iter_fold_if_pred
{
    template< typename State, typename Iterator > struct apply

        : and_<
              not_< is_same<Iterator,LastIterator> >
            , apply1<Predicate,Iterator>
            >
    {







    };
};

}

template<
      typename Sequence = na
    , typename State = na
    , typename ForwardOp = na
    , typename ForwardPredicate = na
    , typename BackwardOp = na
    , typename BackwardPredicate = na
    >
struct iter_fold_if
{

    typedef typename begin<Sequence>::type first_;
    typedef typename end<Sequence>::type last_;

    typedef typename eval_if<
          is_na<BackwardPredicate>
        , if_< is_na<BackwardOp>, always<false_>, always<true_> >
        , identity<BackwardPredicate>
        >::type backward_pred_;



    struct result_ :



        aux::iter_fold_if_impl<
          first_
        , State
        , ForwardOp
        , protect< aux::iter_fold_if_pred< ForwardPredicate,last_ > >
        , BackwardOp
        , backward_pred_
        >

    { };




public:

    typedef pair<
          typename result_::state
        , typename result_::iterator
        > type;






};

template<> struct iter_fold_if< na , na , na , na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > struct apply : iter_fold_if< T1 , T2 , T3 , T4 , T5 , T6 > { }; }; template< typename Tag > struct lambda< iter_fold_if< na , na , na , na , na , na > , Tag > { typedef false_ is_le; typedef iter_fold_if< na , na , na , na , na , na > result_; typedef iter_fold_if< na , na , na , na , na , na > type; };

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/find_if.hpp" 2





namespace boost { namespace mpl {



template<
      typename Sequence = na
    , typename Predicate = na
    >
struct find_if
{
    typedef typename iter_fold_if<
          Sequence
        , void
        , mpl::arg<1>
        , protect< aux::find_if_pred<Predicate> >
        >::type result_;

    typedef typename second<result_>::type type;


};

template<> struct find_if< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : find_if< T1 , T2 > { }; }; template< typename Tag > struct lambda< find_if< na , na > , Tag > { typedef false_ is_le; typedef find_if< na , na > result_; typedef find_if< na , na > type; };

}}
# 67 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/fold.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/fold.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/fold_impl.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/fold_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/fold_impl.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/fold_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/fold_impl.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/fold_impl.hpp"
namespace boost { namespace mpl { namespace aux {



template<
      int N
    , typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl;

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< 0,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef state0 state;
    typedef iter0 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< 1,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
    typedef typename mpl::next<iter0>::type iter1;


    typedef state1 state;
    typedef iter1 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< 2,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, state1, typename deref<iter1>::type >::type state2;
    typedef typename mpl::next<iter1>::type iter2;


    typedef state2 state;
    typedef iter2 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< 3,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, state1, typename deref<iter1>::type >::type state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp, state2, typename deref<iter2>::type >::type state3;
    typedef typename mpl::next<iter2>::type iter3;


    typedef state3 state;
    typedef iter3 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< 4,First,Last,State,ForwardOp >
{
    typedef First iter0;
    typedef State state0;
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, state1, typename deref<iter1>::type >::type state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp, state2, typename deref<iter2>::type >::type state3;
    typedef typename mpl::next<iter2>::type iter3;
    typedef typename apply2< ForwardOp, state3, typename deref<iter3>::type >::type state4;
    typedef typename mpl::next<iter3>::type iter4;


    typedef state4 state;
    typedef iter4 iterator;
};

template<
      int N
    , typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl
{
    typedef fold_impl<
          4
        , First
        , Last
        , State
        , ForwardOp
        > chunk_;

    typedef fold_impl<
          ( (N - 4) < 0 ? 0 : N - 4 )
        , typename chunk_::iterator
        , Last
        , typename chunk_::state
        , ForwardOp
        > res_;

    typedef typename res_::state state;
    typedef typename res_::iterator iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< -1,First,Last,State,ForwardOp >
    : fold_impl<
          -1
        , typename mpl::next<First>::type
        , Last
        , typename apply2<ForwardOp,State, typename deref<First>::type>::type
        , ForwardOp
        >
{
};

template<
      typename Last
    , typename State
    , typename ForwardOp
    >
struct fold_impl< -1,Last,Last,State,ForwardOp >
{
    typedef State state;
    typedef Last iterator;
};

}}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/fold_impl.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/fold.hpp" 2




namespace boost { namespace mpl {

template<
      typename Sequence = na
    , typename State = na
    , typename ForwardOp = na
    >
struct fold
{
    typedef typename aux::fold_impl<
          ::boost::mpl::O1_size<Sequence>::value
        , typename begin<Sequence>::type
        , typename end<Sequence>::type
        , State
        , ForwardOp
        >::state type;


};

template<> struct fold< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : fold< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< fold< na , na , na > , Tag > { typedef false_ is_le; typedef fold< na , na , na > result_; typedef fold< na , na , na > type; };

}}
# 68 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/front_impl.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/front_impl.hpp"
namespace boost { namespace mpl {




template< typename Tag >
struct front_impl
{
    template< typename Sequence > struct apply
    {
        typedef typename begin<Sequence>::type iter_;
        typedef typename deref<iter_>::type type;
    };
};

 template<> struct front_impl<non_sequence_tag> {};

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front.hpp" 2





namespace boost { namespace mpl {

template<
      typename Sequence = na
    >
struct front
    : front_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence >
{

};

template<> struct front< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : front< T1 > { }; }; template< typename Tag > struct lambda< front< na > , Tag > { typedef false_ is_le; typedef front< na > result_; typedef front< na > type; };

}}
# 69 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/is_sequence.hpp" 1
# 40 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/is_sequence.hpp"
namespace boost { namespace mpl {
# 90 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/is_sequence.hpp"
template<
      typename T = na
    >
struct is_sequence
    : not_< is_same< typename begin<T>::type, void_ > >
{

};
# 108 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/is_sequence.hpp"
template<> struct is_sequence< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : is_sequence< T1 > { }; }; template< typename Tag > struct lambda< is_sequence< na > , Tag > { typedef false_ is_le; typedef is_sequence< na > result_; typedef is_sequence< na > type; };

}}
# 73 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iterator_range.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iterator_range.hpp"
namespace boost { namespace mpl {

struct iterator_range_tag;

template<
      typename First = na
    , typename Last = na
    >
struct iterator_range
{
    typedef iterator_range_tag tag;
    typedef iterator_range type;
    typedef First begin;
    typedef Last end;


};

template<> struct iterator_range< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : iterator_range< T1 , T2 > { }; }; template< typename Tag > struct lambda< iterator_range< na , na > , Tag > { typedef false_ is_le; typedef iterator_range< na , na > result_; typedef iterator_range< na , na > type; };

}}
# 74 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/max_element.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/max_element.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/less.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/less.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/comparison_op.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/comparison_op.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_op.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_op.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/numeric_cast.hpp" 1
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/numeric_cast.hpp"
namespace boost { namespace mpl {



template< typename SourceTag, typename TargetTag > struct numeric_cast
{
    template< typename N > struct apply;
};

}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_op.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_op.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/tag.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/tag.hpp"
namespace boost { namespace mpl {

namespace aux {
template< typename T > struct tag_impl
{
    typedef typename T::tag type;
};
}

template< typename T, typename Default = void_ > struct tag

    : if_<
          aux::has_tag<T>
        , aux::tag_impl<T>
        , Default
        >::type
{
# 48 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/tag.hpp"
};

}}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_op.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_cast_utils.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_cast_utils.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_cast_utils.hpp" 2



namespace boost { namespace mpl { namespace aux {

template<
      typename F
    , typename Tag1
    , typename Tag2
    >
struct cast1st_impl
{
    template< typename N1, typename N2 > struct apply

        : apply_wrap2<
              F
            , typename apply_wrap1< numeric_cast<Tag1,Tag2>,N1 >::type
            , N2
            >
    {
# 46 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_cast_utils.hpp"
    };
};

template<
      typename F
    , typename Tag1
    , typename Tag2
    >
struct cast2nd_impl
{
    template< typename N1, typename N2 > struct apply

        : apply_wrap2<
              F
            , N1
            , typename apply_wrap1< numeric_cast<Tag2,Tag1>,N2 >::type
            >
    {
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_cast_utils.hpp"
    };
};

}}}
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/numeric_op.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/comparison_op.hpp" 2








# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/less.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/less.hpp"
namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct less_impl
    : if_c<
          ( Tag1::value
              > Tag2::value
            )

        , aux::cast2nd_impl< less_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< less_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};


template<> struct less_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct less_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct less_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename T > struct less_tag
{
    typedef typename T::tag type;
};

template<
      typename N1 = na
    , typename N2 = na
    >
struct less

    : less_impl<
          typename less_tag<N1>::type
        , typename less_tag<N2>::type
        >::template apply< N1,N2 >::type
{
};

template<> struct less< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : less< T1 , T2 > { }; }; template< typename Tag > struct lambda< less< na , na > , Tag > { typedef false_ is_le; typedef less< na , na > result_; typedef less< na , na > type; };

}}

namespace boost { namespace mpl {

template<>
struct less_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : bool_< ( N2::value > N1::value ) >
    {
    };
};

}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/comparison_op.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/less.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/max_element.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/max_element.hpp" 2




namespace boost { namespace mpl {



namespace aux {

template< typename Predicate >
struct select_max
{
    template< typename OldIterator, typename Iterator >
    struct apply
    {
        typedef typename apply2<
              Predicate
            , typename deref<OldIterator>::type
            , typename deref<Iterator>::type
            >::type condition_;

        typedef typename if_<
              condition_
            , Iterator
            , OldIterator
            >::type type;
    };
};

}


template<
      typename Sequence = na
    , typename Predicate = less<_,_>
    >
struct max_element
    : iter_fold<
          Sequence
        , typename begin<Sequence>::type
        , protect< aux::select_max<Predicate> >
        >
{
};

template<> struct max_element< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : max_element< T1 > { }; }; template< typename Tag > struct lambda< max_element< na > , Tag > { typedef false_ is_le; typedef max_element< na > result_; typedef max_element< na > type; };

}}
# 77 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_front.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_front.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/push_front_impl.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/push_front_impl.hpp"
namespace boost { namespace mpl {

struct has_push_front_arg {};




template< typename Tag >
struct push_front_impl
{
    template< typename Sequence, typename T > struct apply
    {



        struct REQUESTED_PUSH_FRONT_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST; typedef struct REQUESTED_PUSH_FRONT_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST45 : boost::mpl::assert_ { static boost::mpl::failed ************ (REQUESTED_PUSH_FRONT_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST::************ assert_arg()) ( Sequence ) { return 0; } } mpl_assert_arg45; static const std::size_t mpl_assertion_in_line_45 = sizeof( boost::mpl::assertion_failed<(( boost::is_same< T, has_push_front_arg >::value ))>( mpl_assert_arg45::assert_arg() ) );




    };
};

template< typename Tag >
struct has_push_front_impl
{
    template< typename Seq > struct apply

        : aux::has_type< push_front< Seq, has_push_front_arg > >
    {







    };
};

 template<> struct push_front_impl<non_sequence_tag> {};
 template<> struct has_push_front_impl<non_sequence_tag> {};

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_front.hpp" 2





namespace boost { namespace mpl {

template<
      typename Sequence = na
    , typename T = na
    >
struct push_front
    : push_front_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence,T >
{

};


template<
      typename Sequence = na
    >
struct has_push_front
    : has_push_front_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence >
{

};

template<> struct push_front< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : push_front< T1 , T2 > { }; }; template< typename Tag > struct lambda< push_front< na , na > , Tag > { typedef false_ is_le; typedef push_front< na , na > result_; typedef push_front< na , na > type; };
template<> struct has_push_front< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : has_push_front< T1 > { }; }; template< typename Tag > struct lambda< has_push_front< na > , Tag > { typedef false_ is_le; typedef has_push_front< na > result_; typedef has_push_front< na > type; };

}}
# 82 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/same_as.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/same_as.hpp"
namespace boost { namespace mpl {

template< typename T1 >
struct same_as
{
    template< typename T2 > struct apply

        : is_same<T1,T2>
    {




    };
};

template< typename T1 >
struct not_same_as
{
    template< typename T2 > struct apply

        : not_< is_same<T1,T2> >
    {




    };
};

}}
# 83 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sizeof.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/sizeof.hpp"
namespace boost { namespace mpl {

template<
      typename T = na
    >
struct sizeof_
    : mpl::size_t< sizeof(T) >
{

};

template<> struct sizeof_< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : sizeof_< T1 > { }; }; template< typename Tag > struct lambda< sizeof_< na > , Tag > { typedef false_ is_le; typedef sizeof_< na > result_; typedef sizeof_< na > type; };

}}
# 85 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/reverse_fold.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/reverse_fold.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/arg.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/reverse_fold.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/reverse_fold_impl.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/reverse_fold_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/reverse_fold_impl.hpp" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/reverse_fold_impl.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/reverse_fold_impl.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/reverse_fold_impl.hpp"
namespace boost { namespace mpl { namespace aux {



template<
      long N
    , typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl;

template<
      typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< 0,First,Last,State,BackwardOp,ForwardOp >
{
    typedef First iter0;
    typedef State fwd_state0;
    typedef fwd_state0 bkwd_state0;
    typedef bkwd_state0 state;
    typedef iter0 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< 1,First,Last,State,BackwardOp,ForwardOp >
{
    typedef First iter0;
    typedef State fwd_state0;
    typedef typename apply2< ForwardOp, fwd_state0, typename deref<iter0>::type >::type fwd_state1;
    typedef typename mpl::next<iter0>::type iter1;


    typedef fwd_state1 bkwd_state1;
    typedef typename apply2< BackwardOp, bkwd_state1, typename deref<iter0>::type >::type bkwd_state0;
    typedef bkwd_state0 state;
    typedef iter1 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< 2,First,Last,State,BackwardOp,ForwardOp >
{
    typedef First iter0;
    typedef State fwd_state0;
    typedef typename apply2< ForwardOp, fwd_state0, typename deref<iter0>::type >::type fwd_state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, fwd_state1, typename deref<iter1>::type >::type fwd_state2;
    typedef typename mpl::next<iter1>::type iter2;


    typedef fwd_state2 bkwd_state2;
    typedef typename apply2< BackwardOp, bkwd_state2, typename deref<iter1>::type >::type bkwd_state1;
    typedef typename apply2< BackwardOp, bkwd_state1, typename deref<iter0>::type >::type bkwd_state0;


    typedef bkwd_state0 state;
    typedef iter2 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< 3,First,Last,State,BackwardOp,ForwardOp >
{
    typedef First iter0;
    typedef State fwd_state0;
    typedef typename apply2< ForwardOp, fwd_state0, typename deref<iter0>::type >::type fwd_state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, fwd_state1, typename deref<iter1>::type >::type fwd_state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp, fwd_state2, typename deref<iter2>::type >::type fwd_state3;
    typedef typename mpl::next<iter2>::type iter3;


    typedef fwd_state3 bkwd_state3;
    typedef typename apply2< BackwardOp, bkwd_state3, typename deref<iter2>::type >::type bkwd_state2;
    typedef typename apply2< BackwardOp, bkwd_state2, typename deref<iter1>::type >::type bkwd_state1;
    typedef typename apply2< BackwardOp, bkwd_state1, typename deref<iter0>::type >::type bkwd_state0;


    typedef bkwd_state0 state;
    typedef iter3 iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< 4,First,Last,State,BackwardOp,ForwardOp >
{
    typedef First iter0;
    typedef State fwd_state0;
    typedef typename apply2< ForwardOp, fwd_state0, typename deref<iter0>::type >::type fwd_state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, fwd_state1, typename deref<iter1>::type >::type fwd_state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp, fwd_state2, typename deref<iter2>::type >::type fwd_state3;
    typedef typename mpl::next<iter2>::type iter3;
    typedef typename apply2< ForwardOp, fwd_state3, typename deref<iter3>::type >::type fwd_state4;
    typedef typename mpl::next<iter3>::type iter4;


    typedef fwd_state4 bkwd_state4;
    typedef typename apply2< BackwardOp, bkwd_state4, typename deref<iter3>::type >::type bkwd_state3;
    typedef typename apply2< BackwardOp, bkwd_state3, typename deref<iter2>::type >::type bkwd_state2;
    typedef typename apply2< BackwardOp, bkwd_state2, typename deref<iter1>::type >::type bkwd_state1;
    typedef typename apply2< BackwardOp, bkwd_state1, typename deref<iter0>::type >::type bkwd_state0;


    typedef bkwd_state0 state;
    typedef iter4 iterator;
};

template<
      long N
    , typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl
{
    typedef First iter0;
    typedef State fwd_state0;
    typedef typename apply2< ForwardOp, fwd_state0, typename deref<iter0>::type >::type fwd_state1;
    typedef typename mpl::next<iter0>::type iter1;
    typedef typename apply2< ForwardOp, fwd_state1, typename deref<iter1>::type >::type fwd_state2;
    typedef typename mpl::next<iter1>::type iter2;
    typedef typename apply2< ForwardOp, fwd_state2, typename deref<iter2>::type >::type fwd_state3;
    typedef typename mpl::next<iter2>::type iter3;
    typedef typename apply2< ForwardOp, fwd_state3, typename deref<iter3>::type >::type fwd_state4;
    typedef typename mpl::next<iter3>::type iter4;


    typedef reverse_fold_impl<
          ( (N - 4) < 0 ? 0 : N - 4 )
        , iter4
        , Last
        , fwd_state4
        , BackwardOp
        , ForwardOp
        > nested_chunk;

    typedef typename nested_chunk::state bkwd_state4;
    typedef typename apply2< BackwardOp, bkwd_state4, typename deref<iter3>::type >::type bkwd_state3;
    typedef typename apply2< BackwardOp, bkwd_state3, typename deref<iter2>::type >::type bkwd_state2;
    typedef typename apply2< BackwardOp, bkwd_state2, typename deref<iter1>::type >::type bkwd_state1;
    typedef typename apply2< BackwardOp, bkwd_state1, typename deref<iter0>::type >::type bkwd_state0;


    typedef bkwd_state0 state;
    typedef typename nested_chunk::iterator iterator;
};

template<
      typename First
    , typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< -1,First,Last,State,BackwardOp,ForwardOp >
{
    typedef reverse_fold_impl<
          -1
        , typename mpl::next<First>::type
        , Last
        , typename apply2<ForwardOp,State, typename deref<First>::type>::type
        , BackwardOp
        , ForwardOp
        > nested_step;

    typedef typename apply2<
          BackwardOp
        , typename nested_step::state
        , typename deref<First>::type
        >::type state;

    typedef typename nested_step::iterator iterator;
};

template<
      typename Last
    , typename State
    , typename BackwardOp
    , typename ForwardOp
    >
struct reverse_fold_impl< -1,Last,Last,State,BackwardOp,ForwardOp >
{
    typedef State state;
    typedef Last iterator;
};

}}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 35 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/reverse_fold_impl.hpp" 2
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/reverse_fold.hpp" 2



namespace boost { namespace mpl {

template<
      typename Sequence = na
    , typename State = na
    , typename BackwardOp = na
    , typename ForwardOp = arg<1>
    >
struct reverse_fold
{
    typedef typename aux::reverse_fold_impl<
          ::boost::mpl::O1_size<Sequence>::value
        , typename begin<Sequence>::type
        , typename end<Sequence>::type
        , State
        , BackwardOp
        , ForwardOp
        >::state type;


};

template<> struct reverse_fold< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : reverse_fold< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< reverse_fold< na , na , na > , Tag > { typedef false_ is_le; typedef reverse_fold< na , na , na > result_; typedef reverse_fold< na , na , na > type; };

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iterator_category.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/iterator_category.hpp"
namespace boost { namespace mpl {

template<
      typename Iterator = na
    >
struct iterator_category
{
    typedef typename Iterator::category type;

};

template<> struct iterator_category< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : iterator_category< T1 > { }; }; template< typename Tag > struct lambda< iterator_category< na > , Tag > { typedef false_ is_le; typedef iterator_category< na > result_; typedef iterator_category< na > type; };

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance_fwd.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance_fwd.hpp"
namespace boost { namespace mpl {



template< typename Tag > struct advance_impl;
template< typename Iterator, typename N > struct advance;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/negate.hpp" 1
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/negate.hpp"
namespace boost { namespace mpl {

template< typename Tag > struct negate_impl;

template< typename T > struct negate_tag
{
    typedef typename T::tag type;
};

template<
      typename N = na
    >
struct negate

    : negate_impl<
          typename negate_tag<N>::type
        >::template apply<N>::type






{

};

template<> struct negate< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : negate< T1 > { }; }; template< typename Tag > struct lambda< negate< na > , Tag > { typedef false_ is_le; typedef negate< na > result_; typedef negate< na > type; };
# 65 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/negate.hpp"
template<>
struct negate_impl<integral_c_tag>
{




    template< typename N > struct apply
        : integral_c< typename N::value_type, (-N::value) >

    {
    };
};

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_forward.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_forward.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_forward.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_forward.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/advance_forward.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/advance_forward.hpp"
namespace boost { namespace mpl { namespace aux {

template< long N > struct advance_forward;
template<>
struct advance_forward<0>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef iter0 type;
    };
};

template<>
struct advance_forward<1>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename next<iter0>::type iter1;
        typedef iter1 type;
    };
};

template<>
struct advance_forward<2>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename next<iter0>::type iter1;
        typedef typename next<iter1>::type iter2;
        typedef iter2 type;
    };
};

template<>
struct advance_forward<3>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename next<iter0>::type iter1;
        typedef typename next<iter1>::type iter2;
        typedef typename next<iter2>::type iter3;
        typedef iter3 type;
    };
};

template<>
struct advance_forward<4>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename next<iter0>::type iter1;
        typedef typename next<iter1>::type iter2;
        typedef typename next<iter2>::type iter3;
        typedef typename next<iter3>::type iter4;
        typedef iter4 type;
    };
};

template< long N >
struct advance_forward
{
    template< typename Iterator > struct apply
    {
        typedef typename apply_wrap1<
              advance_forward<4>
            , Iterator
            >::type chunk_result_;

        typedef typename apply_wrap1<
              advance_forward<(
                (N - 4) < 0
                    ? 0
                    : N - 4
                    )>
            , chunk_result_
            >::type type;
    };
};

}}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_forward.hpp" 2
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_backward.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_backward.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/prior.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_backward.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_backward.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_backward.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/stringize.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/advance_backward.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessed/plain/advance_backward.hpp"
namespace boost { namespace mpl { namespace aux {

template< long N > struct advance_backward;
template<>
struct advance_backward<0>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef iter0 type;
    };
};

template<>
struct advance_backward<1>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename prior<iter0>::type iter1;
        typedef iter1 type;
    };
};

template<>
struct advance_backward<2>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename prior<iter0>::type iter1;
        typedef typename prior<iter1>::type iter2;
        typedef iter2 type;
    };
};

template<>
struct advance_backward<3>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename prior<iter0>::type iter1;
        typedef typename prior<iter1>::type iter2;
        typedef typename prior<iter2>::type iter3;
        typedef iter3 type;
    };
};

template<>
struct advance_backward<4>
{
    template< typename Iterator > struct apply
    {
        typedef Iterator iter0;
        typedef typename prior<iter0>::type iter1;
        typedef typename prior<iter1>::type iter2;
        typedef typename prior<iter2>::type iter3;
        typedef typename prior<iter3>::type iter4;
        typedef iter4 type;
    };
};

template< long N >
struct advance_backward
{
    template< typename Iterator > struct apply
    {
        typedef typename apply_wrap1<
              advance_backward<4>
            , Iterator
            >::type chunk_result_;

        typedef typename apply_wrap1<
              advance_backward<(
                (N - 4) < 0
                    ? 0
                    : N - 4
                    )>
            , chunk_result_
            >::type type;
    };
};

}}}
# 37 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/include_preprocessed.hpp" 2
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/advance_backward.hpp" 2
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/advance.hpp" 2





namespace boost { namespace mpl {


template< typename Tag >
struct advance_impl
{
    template< typename Iterator, typename N > struct apply
    {
        typedef typename less< N,long_<0> >::type backward_;
        typedef typename if_< backward_, negate<N>, N >::type offset_;

        typedef typename if_<
              backward_
            , aux::advance_backward< offset_::value >
            , aux::advance_forward< offset_::value >
            >::type f_;

        typedef typename apply_wrap1<f_,Iterator>::type type;
    };
};


template<
      typename Iterator = na
    , typename N = na
    >
struct advance
    : advance_impl< typename tag<Iterator>::type >
        ::template apply<Iterator,N>
{
};

template<
      typename Iterator
    , long N
    >
struct advance_c
    : advance_impl< typename tag<Iterator>::type >
        ::template apply<Iterator,long_<N> >
{
};

template<> struct advance< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : advance< T1 , T2 > { }; }; template< typename Tag > struct lambda< advance< na , na > , Tag > { typedef false_ is_le; typedef advance< na , na > result_; typedef advance< na , na > type; };

}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance_fwd.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance_fwd.hpp"
namespace boost { namespace mpl {



template< typename Tag > struct distance_impl;
template< typename First, typename Last > struct distance;

}}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance.hpp" 2






# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply_wrap.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance.hpp" 2








namespace boost { namespace mpl {


template< typename Tag > struct distance_impl
{
    template< typename First, typename Last > struct apply

        : aux::msvc_eti_base< typename iter_fold<
              iterator_range<First,Last>
            , mpl::long_<0>
            , next<>
            >::type >
    {
# 60 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/distance.hpp"
    };
};

template<
      typename First = na
    , typename Last = na
    >
struct distance
    : distance_impl< typename tag<First>::type >
        ::template apply<First, Last>
{

};

template<> struct distance< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : distance< T1 , T2 > { }; }; template< typename Tag > struct lambda< distance< na , na > , Tag > { typedef false_ is_le; typedef distance< na , na > result_; typedef distance< na , na > type; };

}}
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/min_max.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/min_max.hpp"
namespace boost { namespace mpl {

template<
      typename N1 = na
    , typename N2 = na
    >
struct min
    : if_< less<N1,N2>,N1,N2 >
{
};

template<
      typename N1 = na
    , typename N2 = na
    >
struct max
    : if_< less<N1,N2>,N2,N1 >
{
};

template<> struct min< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : min< T1 , T2 > { }; }; template< typename Tag > struct lambda< min< na , na > , Tag > { typedef false_ is_le; typedef min< na , na > result_; typedef min< na , na > type; };
template<> struct max< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : max< T1 , T2 > { }; }; template< typename Tag > struct lambda< max< na , na > , Tag > { typedef false_ is_le; typedef max< na , na > result_; typedef max< na , na > type; };

}}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp" 2






namespace boost { namespace mpl {

namespace aux {
struct pair_iter_tag;
# 59 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp"
}

template<
      typename Iter1
    , typename Iter2
    , typename Category
    >
struct pair_iter
{
    typedef aux::pair_iter_tag tag;
    typedef Category category;
    typedef Iter1 first;
    typedef Iter2 second;
# 85 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/pair_view.hpp"
};




template< typename Iter1, typename Iter2, typename C >
struct deref< pair_iter<Iter1,Iter2,C> >
{
    typedef pair<
          typename deref<Iter1>::type
        , typename deref<Iter2>::type
        > type;
};

template< typename Iter1, typename Iter2, typename C >
struct next< pair_iter<Iter1,Iter2,C> >
{
    typedef typename mpl::next<Iter1>::type i1_;
    typedef typename mpl::next<Iter2>::type i2_;
    typedef pair_iter<i1_,i2_,C> type;
};

template< typename Iter1, typename Iter2, typename C >
struct prior< pair_iter<Iter1,Iter2,C> >
{
    typedef typename mpl::prior<Iter1>::type i1_;
    typedef typename mpl::prior<Iter2>::type i2_;
    typedef pair_iter<i1_,i2_,C> type;
};




template<> struct advance_impl<aux::pair_iter_tag>
{
    template< typename Iter, typename D > struct apply
    {
        typedef typename mpl::advance< typename Iter::first,D >::type i1_;
        typedef typename mpl::advance< typename Iter::second,D >::type i2_;
        typedef pair_iter<i1_,i2_,typename Iter::category> type;
    };
};

template<> struct distance_impl<aux::pair_iter_tag>
{
    template< typename Iter1, typename Iter2 > struct apply
    {

        typedef typename mpl::distance<
              typename first<Iter1>::type
            , typename first<Iter2>::type
            >::type type;
    };
};


template<
      typename Sequence1 = na
    , typename Sequence2 = na
    >
struct pair_view
{
    typedef nested_begin_end_tag tag;

    typedef typename begin<Sequence1>::type iter1_;
    typedef typename begin<Sequence2>::type iter2_;
    typedef typename min<
          typename iterator_category<iter1_>::type
        , typename iterator_category<iter2_>::type
        >::type category_;

    typedef pair_iter<iter1_,iter2_,category_> begin;

    typedef pair_iter<
          typename end<Sequence1>::type
        , typename end<Sequence2>::type
        , category_
        > end;
};

template<> struct pair_view< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : pair_view< T1 , T2 > { }; }; template< typename Tag > struct lambda< pair_view< na , na > , Tag > { typedef false_ is_le; typedef pair_view< na , na > result_; typedef pair_view< na , na > type; };

}}
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 1
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/back_inserter.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/back_inserter.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_back.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_back.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/push_back_impl.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/push_back_impl.hpp"
namespace boost { namespace mpl {

struct has_push_back_arg {};



template< typename Tag >
struct push_back_impl
{
    template< typename Sequence, typename T > struct apply
    {



        struct REQUESTED_PUSH_BACK_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST; typedef struct REQUESTED_PUSH_BACK_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST44 : boost::mpl::assert_ { static boost::mpl::failed ************ (REQUESTED_PUSH_BACK_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST::************ assert_arg()) ( Sequence ) { return 0; } } mpl_assert_arg44; static const std::size_t mpl_assertion_in_line_44 = sizeof( boost::mpl::assertion_failed<(( boost::is_same< T, has_push_back_arg >::value ))>( mpl_assert_arg44::assert_arg() ) );




    };
};

template< typename Tag >
struct has_push_back_impl
{
    template< typename Seq > struct apply

        : aux::has_type< push_back< Seq, has_push_back_arg > >
    {







    };
};

 template<> struct push_back_impl<non_sequence_tag> {};
 template<> struct has_push_back_impl<non_sequence_tag> {};

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/push_back.hpp" 2





namespace boost { namespace mpl {

template<
      typename Sequence = na
    , typename T = na
    >
struct push_back
    : push_back_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence,T >
{

};


template<
      typename Sequence = na
    >
struct has_push_back
    : has_push_back_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence >
{

};


template<> struct push_back< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : push_back< T1 , T2 > { }; }; template< typename Tag > struct lambda< push_back< na , na > , Tag > { typedef false_ is_le; typedef push_back< na , na > result_; typedef push_back< na , na > type; };
template<> struct has_push_back< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : has_push_back< T1 > { }; }; template< typename Tag > struct lambda< has_push_back< na > , Tag > { typedef false_ is_le; typedef has_push_back< na > result_; typedef has_push_back< na > type; };

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/back_inserter.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/inserter.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/inserter.hpp"
namespace boost { namespace mpl {

template<
      typename Sequence
    , typename Operation
    >
struct inserter
{
    typedef Sequence state;
    typedef Operation operation;
};

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/back_inserter.hpp" 2


namespace boost {
namespace mpl {

template<
      typename Sequence
    >
struct back_inserter
    : inserter< Sequence,push_back<> >
{
};

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front_inserter.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/front_inserter.hpp"
namespace boost { namespace mpl {

template<
      typename Sequence
    >
struct front_inserter
    : inserter< Sequence,push_front<> >
{
};

}}
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/clear.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/clear.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/clear_impl.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/clear_impl.hpp"
namespace boost { namespace mpl {



template< typename Tag >
struct clear_impl
{
    template< typename Sequence > struct apply;
};

 template<> struct clear_impl<non_sequence_tag> {};

}}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/clear.hpp" 2





namespace boost { namespace mpl {

template<
      typename Sequence = na
    >
struct clear
    : clear_impl< typename sequence_tag<Sequence>::type >
        ::template apply< Sequence >
{

};

template<> struct clear< na > { template< typename T1 , typename T2 =na , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : clear< T1 > { }; }; template< typename Tag > struct lambda< clear< na > , Tag > { typedef false_ is_le; typedef clear< na > result_; typedef clear< na > type; };

}}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp" 1
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/inserter_algorithm.hpp" 2
# 28 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp" 2


namespace boost { namespace mpl {

namespace aux {

template<
      typename Seq
    , typename Op
    , typename In
    >
struct transform1_impl
    : fold<
          Seq
        , typename In::state
        , bind2< typename lambda< typename In::operation >::type
            , _1
            , bind1< typename lambda<Op>::type, _2>
            >
        >
{
};

template<
      typename Seq
    , typename Op
    , typename In
    >
struct reverse_transform1_impl
    : reverse_fold<
          Seq
        , typename In::state
        , bind2< typename lambda< typename In::operation >::type
            , _1
            , bind1< typename lambda<Op>::type, _2>
            >
        >
{
};

template<
      typename Seq1
    , typename Seq2
    , typename Op
    , typename In
    >
struct transform2_impl
    : fold<
          pair_view<Seq1,Seq2>
        , typename In::state
        , bind2< typename lambda< typename In::operation >::type
            , _1
            , bind2<
                  typename lambda<Op>::type
                , bind1<first<>,_2>
                , bind1<second<>,_2>
                >
            >
        >
{
};

template<
      typename Seq1
    , typename Seq2
    , typename Op
    , typename In
    >
struct reverse_transform2_impl
    : reverse_fold<
          pair_view<Seq1,Seq2>
        , typename In::state
        , bind2< typename lambda< typename In::operation >::type
            , _1
            , bind2< typename lambda< Op >::type
                , bind1<first<>,_2>
                , bind1<second<>,_2>
                >
            >
        >
{
};

}

 template< typename P1 = na , typename P2 = na , typename P3 = na > struct transform1 : aux:: transform1_impl< P1 , P2 , P3> { }; template< typename P1 , typename P2 > struct transform1< P1 , P2,na > : if_< has_push_back< typename clear<P1>::type> , aux:: transform1_impl< P1 , P2 , back_inserter< typename clear<P1>::type > > , aux::reverse_transform1_impl< P1 , P2 , front_inserter< typename clear<P1>::type > > >::type { }; template< typename P1 = na , typename P2 = na , typename P3 = na > struct reverse_transform1 : aux::reverse_transform1_impl< P1 , P2 , P3> { }; template< typename P1 , typename P2 > struct reverse_transform1< P1 , P2,na > : if_< has_push_back<P1> , aux::reverse_transform1_impl< P1 , P2 , back_inserter< typename clear<P1>::type > > , aux:: transform1_impl< P1 , P2 , front_inserter< typename clear<P1>::type > > >::type { }; template<> struct transform1< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : transform1< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< transform1< na , na , na > , Tag > { typedef false_ is_le; typedef transform1< na , na , na > result_; typedef transform1< na , na , na > type; }; template<> struct reverse_transform1< na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 =na , typename T5 =na > struct apply : reverse_transform1< T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< reverse_transform1< na , na , na > , Tag > { typedef false_ is_le; typedef reverse_transform1< na , na , na > result_; typedef reverse_transform1< na , na , na > type; };
 template< typename P1 = na , typename P2 = na , typename P3 = na , typename P4 = na > struct transform2 : aux:: transform2_impl< P1 , P2 , P3 , P4> { }; template< typename P1 , typename P2 , typename P3 > struct transform2< P1 , P2 , P3,na > : if_< has_push_back< typename clear<P1>::type> , aux:: transform2_impl< P1 , P2 , P3 , back_inserter< typename clear<P1>::type > > , aux::reverse_transform2_impl< P1 , P2 , P3 , front_inserter< typename clear<P1>::type > > >::type { }; template< typename P1 = na , typename P2 = na , typename P3 = na , typename P4 = na > struct reverse_transform2 : aux::reverse_transform2_impl< P1 , P2 , P3 , P4> { }; template< typename P1 , typename P2 , typename P3 > struct reverse_transform2< P1 , P2 , P3,na > : if_< has_push_back<P1> , aux::reverse_transform2_impl< P1 , P2 , P3 , back_inserter< typename clear<P1>::type > > , aux:: transform2_impl< P1 , P2 , P3 , front_inserter< typename clear<P1>::type > > >::type { }; template<> struct transform2< na , na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 , typename T5 =na > struct apply : transform2< T1 , T2 , T3 , T4 > { }; }; template< typename Tag > struct lambda< transform2< na , na , na , na > , Tag > { typedef false_ is_le; typedef transform2< na , na , na , na > result_; typedef transform2< na , na , na , na > type; }; template<> struct reverse_transform2< na , na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 , typename T5 =na > struct apply : reverse_transform2< T1 , T2 , T3 , T4 > { }; }; template< typename Tag > struct lambda< reverse_transform2< na , na , na , na > , Tag > { typedef false_ is_le; typedef reverse_transform2< na , na , na , na > result_; typedef reverse_transform2< na , na , na , na > type; };
# 138 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/transform.hpp"
template< typename Seq1 = na , typename Seq2OrOperation = na , typename OperationOrInserter = na , typename Inserter = na > struct transform { typedef typename eval_if< or_< is_na<OperationOrInserter> , is_lambda_expression< Seq2OrOperation > , not_< is_sequence<Seq2OrOperation> > > , transform1<Seq1,Seq2OrOperation,OperationOrInserter> , transform2<Seq1,Seq2OrOperation,OperationOrInserter,Inserter> >::type type; }; template<> struct transform< na , na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 , typename T5 =na > struct apply : transform< T1 , T2 , T3 , T4 > { }; }; template< typename Tag > struct lambda< transform< na , na , na , na > , Tag > { typedef false_ is_le; typedef transform< na , na , na , na > result_; typedef transform< na , na , na , na > type; };
template< typename Seq1 = na , typename Seq2OrOperation = na , typename OperationOrInserter = na , typename Inserter = na > struct reverse_transform { typedef typename eval_if< or_< is_na<OperationOrInserter> , is_lambda_expression< Seq2OrOperation > , not_< is_sequence<Seq2OrOperation> > > , reverse_transform1<Seq1,Seq2OrOperation,OperationOrInserter> , reverse_transform2<Seq1,Seq2OrOperation,OperationOrInserter,Inserter> >::type type; }; template<> struct reverse_transform< na , na , na , na > { template< typename T1 , typename T2 , typename T3 , typename T4 , typename T5 =na > struct apply : reverse_transform< T1 , T2 , T3 , T4 > { }; }; template< typename Tag > struct lambda< reverse_transform< na , na , na , na > , Tag > { typedef false_ is_le; typedef reverse_transform< na , na , na , na > result_; typedef reverse_transform< na , na , na , na > type; };



}}
# 86 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2
# 113 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
namespace boost {

namespace detail { namespace variant {






template <typename Sequence, typename F>
struct max_value
{
private:

    typedef typename mpl::transform1<Sequence, F>::type transformed_;
    typedef typename mpl::max_element<transformed_

        >::type max_it;

public:

    typedef typename mpl::deref<max_it>::type
        type;

};

struct add_alignment
{
    template <typename State, typename Item>
    struct apply
        : mpl::size_t<
              ::boost::math::static_lcm<
                  State::value
                , ::boost::alignment_of<Item>::value
                >::value
            >
    {};
};
# 162 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
class no_fallback_type;

struct find_fallback_type_pred
{
    template <typename Iterator>
    struct apply
    {
    private:
        typedef typename mpl::deref<Iterator>::type t_;

    public:
        typedef mpl::not_< has_nothrow_constructor<t_> > type;
    };
};

template <typename Types>
struct find_fallback_type
{
private:

    typedef typename mpl::end<Types>::type end_it;



    typedef typename mpl::iter_fold_if<
          Types
        , mpl::int_<0>, mpl::protect< mpl::next<> >
        , mpl::protect< find_fallback_type_pred >
        >::type first_result_;

    typedef typename first_result_::first first_result_index;
    typedef typename first_result_::second first_result_it;



    typedef typename mpl::iter_fold_if<
          mpl::iterator_range< first_result_it,end_it >
        , first_result_index, mpl::protect< mpl::next<> >
        , mpl::protect< mpl::not_same_as<boost::blank> >
        >::type second_result_;

    typedef typename second_result_::second second_result_it;

public:


    typedef typename mpl::eval_if<
          is_same< second_result_it,end_it >
        , mpl::if_<
              is_same< first_result_it,end_it >
            , mpl::pair< no_fallback_type,no_fallback_type >
            , first_result_
            >
        , mpl::identity< second_result_ >
        >::type type;

};
# 263 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename Types, typename NeverUsesBackupFlag>
struct make_storage
{
private:

    typedef typename mpl::eval_if<
          NeverUsesBackupFlag
        , mpl::identity< Types >
        , mpl::push_front<
              Types, backup_holder<void*>
            >
        >::type types;

    typedef typename max_value<
          types, mpl::sizeof_<mpl::_1>
        >::type max_size;



    typedef typename mpl::fold<
          types
        , mpl::size_t<1>
        , add_alignment
        >::type max_alignment;
# 295 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
public:

    typedef ::boost::aligned_storage<
          max_size::value
        , max_alignment::value
        > type;
};






struct destroyer
    : public static_visitor<>
{
public:

    template <typename T>
        void
    internal_visit(T& operand, int) const
    {
        operand.~T();






                                     ;
    }

};
# 336 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename T>
class known_get
    : public static_visitor<T&>
{

public:

    T& operator()(T& operand) const
    {
        return operand;
    }

    template <typename U>
    T& operator()(U&) const
    {

        return ::boost::detail::variant::forced_return< T& >();
    }
};






class copy_into
    : public static_visitor<>
{
private:

    void* storage_;

public:

    explicit copy_into(void* storage)
        : storage_(storage)
    {
    }

public:

    template <typename T>
        void
    internal_visit(boost::detail::variant::backup_holder<T>& operand, long) const
    {
        new(storage_) T( operand.get() );
                                     ;
    }

    template <typename T>
        void
    internal_visit(const boost::detail::variant::backup_holder<T>& operand, long) const
    {
        new(storage_) T( operand.get() );
                                     ;
    }

    template <typename T>
        void
    internal_visit(const T& operand, int) const
    {
        new(storage_) T(operand);
                                     ;
    }

};
# 449 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
struct assign_storage
    : public static_visitor<>
{
private:

    const void* rhs_storage_;

public:

    explicit assign_storage(const void* rhs_storage)
        : rhs_storage_(rhs_storage)
    {
    }

public:

    template <typename T>
        void
    internal_visit(backup_holder<T>& lhs_content, long) const
    {
        lhs_content.get()
            = static_cast< const backup_holder<T>* >(rhs_storage_)->get();
                                     ;
    }

    template <typename T>
        void
    internal_visit(const backup_holder<T>& lhs_content, long) const
    {
        lhs_content.get()
            = static_cast< const backup_holder<T>* >(rhs_storage_)->get();
                                     ;
    }

    template <typename T>
        void
    internal_visit(T& lhs_content, int) const
    {







        lhs_content = *static_cast< const T* >(rhs_storage_);
                                     ;
    }

};







struct move_storage
    : public static_visitor<>
{
private:

    void* rhs_storage_;

public:

    explicit move_storage(void* rhs_storage)
        : rhs_storage_(rhs_storage)
    {
    }

public:

    template <typename T>
        void
    internal_visit(backup_holder<T>& lhs_content, long) const
    {
        lhs_content.get()
            = ::boost::detail::variant::move(static_cast<backup_holder<T>* >(rhs_storage_)->get());
                                     ;
    }

    template <typename T>
        void
    internal_visit(const backup_holder<T>& lhs_content, long) const
    {
        lhs_content.get()
            = ::boost::detail::variant::move(static_cast<backup_holder<T>* >(rhs_storage_)->get());
                                     ;
    }

    template <typename T>
        void
    internal_visit(T& lhs_content, int) const
    {







        lhs_content = ::boost::detail::variant::move(*static_cast<T* >(rhs_storage_));
                                     ;
    }

};
# 564 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename T>
class direct_assigner
    : public static_visitor<bool>
{
private:

    const T& rhs_;

public:

    explicit direct_assigner(const T& rhs)
        : rhs_(rhs)
    {
    }

public:

    bool operator()(T& lhs)
    {
        lhs = rhs_;
        return true;
    }

    template <typename U>
    bool operator()(U&)
    {
        return false;
    }






};
# 607 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename T>
class direct_mover
    : public static_visitor<bool>
{
private:

    T& rhs_;

public:

    explicit direct_mover(T& rhs)
        : rhs_(rhs)
    {
    }

public:

    bool operator()(T& lhs)
    {
        lhs = ::boost::detail::variant::move(rhs_);
        return true;
    }

    template <typename U>
    bool operator()(U&)
    {
        return false;
    }






};
# 653 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename Variant>
class backup_assigner
    : public static_visitor<>
{
private:

    Variant& lhs_;
    int rhs_which_;
    const void* rhs_content_;
    void (*copy_rhs_content_)(void*, const void*);

public:

    template<class RhsT>
    backup_assigner(Variant& lhs, int rhs_which, const RhsT& rhs_content)
        : lhs_(lhs)
        , rhs_which_(rhs_which)
        , rhs_content_(&rhs_content)
        , copy_rhs_content_(&construct_impl<RhsT>)
    {
    }

private:

    template<class RhsT>
    static void construct_impl(void* addr, const void* obj)
    {
        new(addr) RhsT(*static_cast<const RhsT*>(obj));
    }

    template <typename LhsT>
    void backup_assign_impl(
          backup_holder<LhsT>& lhs_content
        , mpl::false_
        , long
        )
    {

        backup_holder<LhsT> backup_lhs_content(0);
        backup_lhs_content.swap(lhs_content);


        lhs_content.~backup_holder<LhsT>();

        { try
        {

            copy_rhs_content_(lhs_.storage_.address(), rhs_content_);
        }
        catch(...)
        {

            new(lhs_.storage_.address())
                    backup_holder<LhsT>( 0 );

            static_cast<backup_holder<LhsT>* >(lhs_.storage_.address())
                    ->swap(backup_lhs_content);


            throw;;
        }
        }


        lhs_.indicate_which(rhs_which_);
    }

    template <typename LhsT>
    void backup_assign_impl(
          LhsT& lhs_content
        , mpl::true_
        , int
        )
    {

        LhsT backup_lhs_content(
              ::boost::detail::variant::move(lhs_content)
            );


        lhs_content.~LhsT();

        { try
        {

            copy_rhs_content_(lhs_.storage_.address(), rhs_content_);
        }
        catch(...)
        {

            new(lhs_.storage_.address())
                LhsT(
                      ::boost::detail::variant::move(backup_lhs_content)
                    );


            throw;;
        }
        }


        lhs_.indicate_which(rhs_which_);
    }

    template <typename LhsT>
    void backup_assign_impl(
          LhsT& lhs_content
        , mpl::false_
        , int
        )
    {

        LhsT* backup_lhs_ptr = new LhsT(lhs_content);


        lhs_content.~LhsT();

        { try
        {

            copy_rhs_content_(lhs_.storage_.address(), rhs_content_);
        }
        catch(...)
        {

            new(lhs_.storage_.address())
                backup_holder<LhsT>( backup_lhs_ptr );


            lhs_.indicate_backup_which( lhs_.which() );


            throw;;
        }
        }


        lhs_.indicate_which(rhs_which_);


        delete backup_lhs_ptr;
    }

public:

    template <typename LhsT>
        void
    internal_visit(LhsT& lhs_content, int)
    {
        typedef typename is_nothrow_move_constructible<LhsT>::type
            nothrow_move;

        backup_assign_impl( lhs_content, nothrow_move(), 1L);

                                     ;
    }






};
# 824 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename Variant>
struct swap_with
    : public static_visitor<>
{
private:

    Variant& toswap_;

public:

    explicit swap_with(Variant& toswap)
        : toswap_(toswap)
    {
    }

public:

    template <typename T>
    void operator()(T& operand) const
    {

        known_get<T> getter;
        T& other = toswap_.apply_visitor(getter);


        ::boost::detail::variant::move_swap( operand, other );
    }

private:
    swap_with& operator=(const swap_with&);

};







class reflect
    : public static_visitor<const boost::typeindex::type_info&>
{
public:

    template <typename T>
    const boost::typeindex::type_info& operator()(const T&) const
    {
        return boost::typeindex::type_id<T>().type_info();
    }

};
# 884 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename Variant, typename Comp>
class comparer
    : public static_visitor<bool>
{
private:

    const Variant& lhs_;

public:

    explicit comparer(const Variant& lhs)
        : lhs_(lhs)
    {
    }

public:

    template <typename T>
    bool operator()(const T& rhs_content) const
    {

        known_get<const T> getter;
        const T& lhs_content = lhs_.apply_visitor(getter);


        return Comp()(lhs_content, rhs_content);
    }

private:
    comparer& operator=(const comparer&);

};






struct equal_comp
{
    template <typename T>
    bool operator()(const T& lhs, const T& rhs) const
    {
        return lhs == rhs;
    }
};






struct less_comp
{
    template <typename T>
    bool operator()(const T& lhs, const T& rhs) const
    {
        return lhs < rhs;
    }
};
# 952 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
template <typename Visitor>
class invoke_visitor
{
private:

    Visitor& visitor_;

public:

    typedef typename Visitor::result_type
        result_type;

public:

    explicit invoke_visitor(Visitor& visitor)
        : visitor_(visitor)
    {
    }



public:

    template <typename T>
    result_type internal_visit(T& operand, int)
    {
        return visitor_(operand);
    }
# 1022 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
public:

    template <typename T>
        result_type
    internal_visit(boost::recursive_wrapper<T>& operand, long)
    {
        return internal_visit( operand.get(), 1L );
    }

    template <typename T>
        result_type
    internal_visit(const boost::recursive_wrapper<T>& operand, long)
    {
        return internal_visit( operand.get(), 1L );
    }

    template <typename T>
        result_type
    internal_visit(boost::detail::reference_content<T>& operand, long)
    {
        return internal_visit( operand.get(), 1L );
    }

    template <typename T>
        result_type
    internal_visit(const boost::detail::reference_content<T>& operand, long)
    {
        return internal_visit( operand.get(), 1L );
    }

    template <typename T>
        result_type
    internal_visit(boost::detail::variant::backup_holder<T>& operand, long)
    {
        return internal_visit( operand.get(), 1L );
    }

    template <typename T>
        result_type
    internal_visit(const boost::detail::variant::backup_holder<T>& operand, long)
    {
        return internal_visit( operand.get(), 1L );
    }






};

}}






template <
      typename T0_
    , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19
    >
class variant
{
private:

    typedef variant wknd_self_t;

    struct is_recursive_
        : detail::variant::is_recursive_flag<T0_>
    {
    };

    typedef typename mpl::eval_if<
          is_recursive_
        , T0_
        , mpl::identity< T0_ >
        >::type unwrapped_T0_;

    struct is_sequence_based_
        : detail::variant::is_over_sequence<unwrapped_T0_>
    {
    };



private:

    typedef typename mpl::eval_if<
          is_sequence_based_
        , unwrapped_T0_
        , detail::variant::make_variant_list<
              unwrapped_T0_
            , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19
            >
        >::type specified_types;

    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( ::boost::mpl::not_< mpl::empty<specified_types> >::value )) >)> boost_static_assert_typedef_1121 ;



    typedef typename mpl::eval_if<
          is_recursive_
        , mpl::transform<
              specified_types
            , mpl::protect<
                  detail::variant::quoted_enable_recursive<wknd_self_t>
                >
            >
        , mpl::identity< specified_types >
        >::type recursive_enabled_types;

public:

    typedef typename mpl::transform<
          recursive_enabled_types
        , unwrap_recursive<mpl::_1>
        >::type types;

private:

    typedef typename mpl::transform<
          recursive_enabled_types
        , mpl::protect< detail::make_reference_content<> >
        >::type internal_types;

    typedef typename mpl::front<
          internal_types
        >::type internal_T0;
# 1228 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
private:

    typedef typename detail::variant::find_fallback_type<
          internal_types
        >::type fallback_type_result_;

    typedef typename fallback_type_result_::first
        fallback_type_index_;
    typedef typename fallback_type_result_::second
        fallback_type_;

    struct has_fallback_type_
        : mpl::not_<
              is_same< fallback_type_, detail::variant::no_fallback_type >
            >
    {
    };

    typedef has_fallback_type_
        never_uses_backup_flag;

    typedef typename detail::variant::make_storage<
          internal_types, never_uses_backup_flag
        >::type storage_t;
# 1264 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
private:
# 1275 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    typedef int which_t;
# 1295 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    private:




    which_t which_;
    storage_t storage_;

    void indicate_which(int which_arg)
    {
        which_ = static_cast<which_t>( which_arg );
    }

    void indicate_backup_which(int which_arg)
    {
        which_ = static_cast<which_t>( -(which_arg + 1) );
    }

private:

    bool using_backup() const
    {
        return which_ < 0;
    }

public:

    int which() const
    {

        if (using_backup())

            return -(which_ + 1);


        return which_;
    }

private:

    struct initializer
        : ::boost::mpl::iter_fold< recursive_enabled_types , ::boost::mpl::pair< ::boost::detail::variant::initializer_root , ::boost::mpl::int_<0> > , ::boost::mpl::protect< ::boost::detail::variant::make_initializer_node > >::type::first


    {
    };

    void destroy_content()
    {
        detail::variant::destroyer visitor;
        this->internal_apply_visitor(visitor);
    }

public:

    ~variant()
    {
        destroy_content();
    }

    variant()
    {

#pragma warning(push)

#pragma warning(disable: 4345)






 new( storage_.address() ) internal_T0();
        indicate_which(0);

#pragma warning(pop)

 }

private:

    class convert_copy_into
        : public static_visitor<int>
    {
    private:

        void* storage_;

    public:

        explicit convert_copy_into(void* storage)
            : storage_(storage)
        {
        }

    public:

        template <typename T>
        int internal_visit(T& operand, int) const
        {





            return initializer::initialize(storage_, operand);
        }
# 1411 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
        template <typename T>
        int internal_visit(boost::detail::reference_content<T>& operand, long) const
        {
            return internal_visit( operand.get(), 1L );
        }

        template <typename T>
        int internal_visit(const boost::detail::reference_content<T>& operand, long) const
        {
            return internal_visit( operand.get(), 1L );
        }

        template <typename T>
        int internal_visit(boost::detail::variant::backup_holder<T>& operand, long) const
        {
            return internal_visit( operand.get(), 1L );
        }

        template <typename T>
        int internal_visit(const boost::detail::variant::backup_holder<T>& operand, long) const
        {
            return internal_visit( operand.get(), 1L );
        }

        template <typename T>
        int internal_visit(boost::recursive_wrapper<T>& operand, long) const
        {
            return internal_visit( operand.get(), 1L );
        }

        template <typename T>
        int internal_visit(const boost::recursive_wrapper<T>& operand, long) const
        {
            return internal_visit( operand.get(), 1L );
        }

    };

    friend class convert_copy_into;
# 1519 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
private:

    template <typename T>
    void convert_construct(
          T& operand
        , int
        , mpl::false_ = mpl::false_()
        )
    {





        indicate_which(
              initializer::initialize(
                  storage_.address()
                , operand
                )
            );
    }
# 1563 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    template <typename Variant>
    void convert_construct(
          Variant& operand
        , long
        , mpl::true_
        )
    {
        convert_copy_into visitor(storage_.address());
        indicate_which(
              operand.internal_apply_visitor(visitor)
            );
    }
# 1591 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    template <typename Variant>
    void convert_construct_variant(Variant& operand)
    {




        typedef typename mpl::find_if<
              types
            , is_same<
                  add_const<mpl::_1>
                , const Variant
                >
            >::type found_it;

        typedef typename mpl::end<types>::type not_found;
        typedef typename is_same<
              found_it, not_found
            >::type is_foreign_variant;


        convert_construct(
              operand, 1L
            , is_foreign_variant()
            );
    }
# 1647 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    template < typename U0 , typename U1 , typename U2 , typename U3 , typename U4 , typename U5 , typename U6 , typename U7 , typename U8 , typename U9 , typename U10 , typename U11 , typename U12 , typename U13 , typename U14 , typename U15 , typename U16 , typename U17 , typename U18 , typename U19>
    void convert_construct(
          boost::variant< U0 , U1 , U2 , U3 , U4 , U5 , U6 , U7 , U8 , U9 , U10 , U11 , U12 , U13 , U14 , U15 , U16 , U17 , U18 , U19>& operand
        , long
        )
    {
        convert_construct_variant(operand);
    }

    template < typename U0 , typename U1 , typename U2 , typename U3 , typename U4 , typename U5 , typename U6 , typename U7 , typename U8 , typename U9 , typename U10 , typename U11 , typename U12 , typename U13 , typename U14 , typename U15 , typename U16 , typename U17 , typename U18 , typename U19>
    void convert_construct(
          const boost::variant< U0 , U1 , U2 , U3 , U4 , U5 , U6 , U7 , U8 , U9 , U10 , U11 , U12 , U13 , U14 , U15 , U16 , U17 , U18 , U19>& operand
        , long
        )
    {
        convert_construct_variant(operand);
    }
# 1676 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
public:



    template <typename T>
    variant(const T& operand)
    {
        convert_construct(operand, 1L);
    }

    template <typename T>
    variant(T& operand)
    {
        convert_construct(operand, 1L);
    }
# 1736 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
public:


    variant(const variant& operand)
    {

        detail::variant::copy_into visitor( storage_.address() );
        operand.internal_apply_visitor(visitor);


        indicate_which(operand.which());
    }
# 1761 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
private:


    template <typename Variant>
    friend class detail::variant::backup_assigner;
# 1774 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    class assigner
        : public static_visitor<>
    {
    protected:

        variant& lhs_;
        const int rhs_which_;

    public:

        assigner(variant& lhs, int rhs_which)
            : lhs_(lhs)
            , rhs_which_(rhs_which)
        {
        }

    protected:

        template <typename RhsT, typename B1, typename B2>
        void assign_impl(
              const RhsT& rhs_content
            , mpl::true_
            , B1
            , B2
            ) const
        {

            lhs_.destroy_content();


            new(lhs_.storage_.address())
                RhsT( rhs_content );


            lhs_.indicate_which(rhs_which_);
        }

        template <typename RhsT, typename B>
        void assign_impl(
              const RhsT& rhs_content
            , mpl::false_
            , mpl::true_
            , B
            ) const
        {

            RhsT temp(rhs_content);


            lhs_.destroy_content();


            new(lhs_.storage_.address())
                RhsT( detail::variant::move(temp) );


            lhs_.indicate_which(rhs_which_);
        }

        void construct_fallback() const {

            new (lhs_.storage_.address())
                fallback_type_;


            lhs_.indicate_which(
                  fallback_type_index_::value
                );
        }

        template <typename RhsT>
        void assign_impl(
              const RhsT& rhs_content
            , mpl::false_
            , mpl::false_
            , mpl::true_
            ) const
        {

            lhs_.destroy_content();

            { try
            {

                new(lhs_.storage_.address())
                    RhsT( rhs_content );
            }
            catch(...)
            {
                construct_fallback();


                throw;;
            }
            }


            lhs_.indicate_which(rhs_which_);
        }

        template <typename RhsT>
        void assign_impl(
              const RhsT& rhs_content
            , mpl::false_
            , mpl::false_
            , mpl::false_
            ) const
        {
            detail::variant::backup_assigner<wknd_self_t>
                visitor(lhs_, rhs_which_, rhs_content);
            lhs_.internal_apply_visitor(visitor);
        }

    public:

        template <typename RhsT>
            void
        internal_visit(const RhsT& rhs_content, int) const
        {
            typedef typename has_nothrow_copy<RhsT>::type
                nothrow_copy;
            typedef typename mpl::or_<
                  nothrow_copy
                , is_nothrow_move_constructible<RhsT>
                >::type nothrow_move_constructor;

            assign_impl(
                  rhs_content
                , nothrow_copy()
                , nothrow_move_constructor()
                , has_fallback_type_()
                );

                                         ;
        }






    };

    friend class assigner;
# 2042 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    void variant_assign(const variant& rhs)
    {

        if (which_ == rhs.which_)
        {

            detail::variant::assign_storage visitor(rhs.storage_.address());
            this->internal_apply_visitor(visitor);
        }
        else
        {

            assigner visitor(*this, rhs.which());
            rhs.internal_apply_visitor(visitor);
        }
    }
# 2078 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
private:

    template <typename T>
    void assign(const T& rhs)
    {

        detail::variant::direct_assigner<T> direct_assign(rhs);
        if (this->apply_visitor(direct_assign) == false)
        {






            variant temp(rhs);
            variant_assign( detail::variant::move(temp) );
        }
    }
# 2118 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
public:
# 2130 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    template <typename T>
    variant& operator=(const T& rhs)
    {
        assign(rhs);
        return *this;
    }


    variant& operator=(const variant& rhs)
    {
        variant_assign(rhs);
        return *this;
    }
# 2155 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp"
    void swap(variant& rhs)
    {

        if (which() == rhs.which())
        {

            detail::variant::swap_with<variant> visitor(rhs);
            this->apply_visitor(visitor);
        }
        else
        {

            variant tmp( detail::variant::move(rhs) );
            rhs = detail::variant::move(*this);
            *this = detail::variant::move(tmp);
        }
    }

public:





    bool empty() const
    {
        return false;
    }

    const boost::typeindex::type_info& type() const
    {
        detail::variant::reflect visitor;
        return this->apply_visitor(visitor);
    }

public:





    template <typename U>
    void operator==(const U&) const
    {
        typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(false && sizeof(U)) >)> boost_static_assert_typedef_2199 ;
    }

    template <typename U>
    void operator<(const U&) const
    {
        typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(false && sizeof(U)) >)> boost_static_assert_typedef_2205 ;
    }

    template <typename U>
    void operator!=(const U&) const
    {
        typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(false && sizeof(U)) >)> boost_static_assert_typedef_2211 ;
    }

    template <typename U>
    void operator>(const U&) const
    {
        typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(false && sizeof(U)) >)> boost_static_assert_typedef_2217 ;
    }

    template <typename U>
    void operator<=(const U&) const
    {
        typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(false && sizeof(U)) >)> boost_static_assert_typedef_2223 ;
    }

    template <typename U>
    void operator>=(const U&) const
    {
        typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(false && sizeof(U)) >)> boost_static_assert_typedef_2229 ;
    }

public:



    bool operator==(const variant& rhs) const
    {
        if (this->which() != rhs.which())
            return false;

        detail::variant::comparer<
              variant, detail::variant::equal_comp
            > visitor(*this);
        return rhs.apply_visitor(visitor);
    }

    bool operator<(const variant& rhs) const
    {




        if (this->which() != rhs.which())
            return this->which() < rhs.which();

        detail::variant::comparer<
              variant, detail::variant::less_comp
            > visitor(*this);
        return rhs.apply_visitor(visitor);
    }



    inline bool operator!=(const variant& rhs) const
    {
        return !(*this == rhs);
    }

    inline bool operator>(const variant& rhs) const
    {
        return rhs < *this;
    }

    inline bool operator<=(const variant& rhs) const
    {
        return !(*this > rhs);
    }

    inline bool operator>=(const variant& rhs) const
    {
        return !(*this < rhs);
    }




    template < typename U0 , typename U1 , typename U2 , typename U3 , typename U4 , typename U5 , typename U6 , typename U7 , typename U8 , typename U9 , typename U10 , typename U11 , typename U12 , typename U13 , typename U14 , typename U15 , typename U16 , typename U17 , typename U18 , typename U19 >
    friend class variant;

private:







    template <typename Visitor, typename VoidPtrCV>
    static
        typename Visitor::result_type


    internal_apply_visitor_impl(
          int internal_which
        , int logical_which
        , Visitor& visitor
        , VoidPtrCV storage
        )
    {
        typedef mpl::int_<0> first_which;
        typedef typename mpl::begin<internal_types>::type first_it;
        typedef typename mpl::end<internal_types>::type last_it;

        typedef detail::variant::visitation_impl_step<
              first_it, last_it
            > first_step;

        return detail::variant::visitation_impl(
              internal_which, logical_which
            , visitor, storage, mpl::false_()
            , never_uses_backup_flag()
            , static_cast<first_which*>(0), static_cast<first_step*>(0)
            );
    }

    template <typename Visitor>
        typename Visitor::result_type


    internal_apply_visitor(Visitor& visitor)
    {
        return internal_apply_visitor_impl(
              which_, which(), visitor, storage_.address()
            );
    }

    template <typename Visitor>
        typename Visitor::result_type


    internal_apply_visitor(Visitor& visitor) const
    {
        return internal_apply_visitor_impl(
              which_, which(), visitor, storage_.address()
            );
    }

public:

    template <typename Visitor>
        typename Visitor::result_type


    apply_visitor(Visitor& visitor)
    {
        detail::variant::invoke_visitor<Visitor> invoker(visitor);
        return this->internal_apply_visitor(invoker);
    }

    template <typename Visitor>
        typename Visitor::result_type


    apply_visitor(Visitor& visitor) const
    {
        detail::variant::invoke_visitor<Visitor> invoker(visitor);
        return this->internal_apply_visitor(invoker);
    }

};






template <typename Types>
struct make_variant_over
{
private:

    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( ::boost::mpl::is_sequence<Types>::value )) >)> boost_static_assert_typedef_2382 ;

public:

    typedef variant<
          detail::variant::over_sequence< Types >
        > type;

};







template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline void swap(
      variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& lhs
    , variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& rhs
    )
{
    lhs.swap(rhs);
}

}





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/variant_io.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/variant_io.hpp"
namespace boost {
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/variant_io.hpp"
template <
      typename E , typename T
    ,
      typename U0 , typename U1 , typename U2 , typename U3 , typename U4 , typename U5 , typename U6 , typename U7 , typename U8 , typename U9 , typename U10 , typename U11 , typename U12 , typename U13 , typename U14 , typename U15 , typename U16 , typename U17 , typename U18 , typename U19
    >
inline std::basic_ostream< E , T >& operator<<(
      std::basic_ostream< E , T >& out
    , const variant< U0 , U1 , U2 , U3 , U4 , U5 , U6 , U7 , U8 , U9 , U10 , U11 , U12 , U13 , U14 , U15 , U16 , U17 , U18 , U19 >& rhs
    );

namespace detail { namespace variant {

template <typename OStream>
class printer
    : public boost::static_visitor<>
{
private:

    OStream& out_;

public:

    explicit printer(OStream& out)
        : out_( out )
    {
    }

public:

    template <typename T>
    void operator()(const T& operand) const
    {
        out_ << operand;
    }

private:
    printer& operator=(const printer&);

};

}}

template <
      typename E , typename T
    ,
      typename U0 , typename U1 , typename U2 , typename U3 , typename U4 , typename U5 , typename U6 , typename U7 , typename U8 , typename U9 , typename U10 , typename U11 , typename U12 , typename U13 , typename U14 , typename U15 , typename U16 , typename U17 , typename U18 , typename U19
    >
inline std::basic_ostream< E , T >& operator<<(
      std::basic_ostream< E , T >& out
    , const variant< U0 , U1 , U2 , U3 , U4 , U5 , U6 , U7 , U8 , U9 , U10 , U11 , U12 , U13 , U14 , U15 , U16 , U17 , U18 , U19 >& rhs
    )
{
    detail::variant::printer<
          std::basic_ostream< E , T >
        > visitor(out);

    rhs.apply_visitor(visitor);

    return out;
}

}
# 2412 "C:/Programing/Libs/boost_1_59_0\\boost/variant/variant.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/repeat.hpp" 1
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/repeat.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 41 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/aux_/preprocessor/repeat.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 30 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/empty.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 1
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iterate.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iterate.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/dec.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/arithmetic/inc.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/elem.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/array/size.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/slot.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/slot.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/slot.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/detail/def.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/slot.hpp" 2
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/tuple/elem.hpp" 1
# 21 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/iterate.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iterate.hpp" 2
# 33 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 2


namespace boost {
namespace detail { namespace variant {
# 49 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      typename T, typename Dest, typename Source



    >
struct substitute
{
    typedef T type;
};
# 77 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <typename Dest, typename Source> struct substitute< Source , Dest , Source > { typedef Dest type; };
template <typename Dest, typename Source> struct substitute< const Source , Dest , Source > { typedef const Dest type; };
template <typename Dest, typename Source> struct substitute< volatile Source , Dest , Source > { typedef volatile Dest type; };
template <typename Dest, typename Source> struct substitute< const volatile Source , Dest , Source > { typedef const volatile Dest type; };
# 102 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <typename T, typename Dest, typename Source> struct substitute< T * , Dest , Source > { typedef typename substitute< T, Dest, Source >::type * type; };
template <typename T, typename Dest, typename Source> struct substitute< T * const , Dest , Source > { typedef typename substitute< T, Dest, Source >::type * const type; };
template <typename T, typename Dest, typename Source> struct substitute< T * volatile , Dest , Source > { typedef typename substitute< T, Dest, Source >::type * volatile type; };
template <typename T, typename Dest, typename Source> struct substitute< T * const volatile , Dest , Source > { typedef typename substitute< T, Dest, Source >::type * const volatile type; };






template <typename T, typename Dest, typename Source>
struct substitute<
      T&
    , Dest
    , Source

    >
{
    typedef typename substitute<
          T, Dest, Source
        >::type & type;
};
# 162 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 1
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/bounds/lower1.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/detail/shared.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/bounds/lower1.hpp" 2
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/bounds/upper1.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/slot/detail/shared.hpp" 1
# 12 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/bounds/upper1.hpp" 2
# 19 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2
# 47 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 233 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      typename R, typename Dest, typename Source
    >
struct substitute<
      R (*)( void )
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< R, Dest, Source >::type r;

public:
    typedef r (*type)( void );
};
# 47 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 184 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      template < typename P1 > class T
    , typename U1
    , typename Dest
    , typename Source
    >
struct substitute<
      T< U1 >
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< U1, Dest, Source >::type u1;

public:
    typedef T< u1 > type;
};




template <
      typename R
    , typename U1
    , typename Dest
    , typename Source
    >
struct substitute<
      R (*)( U1 )
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< R, Dest, Source >::type r;
    typedef typename substitute< U1, Dest, Source >::type u1;

public:
    typedef r (*type)( u1 );
};
# 52 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 184 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      template < typename P1 , typename P2 > class T
    , typename U1 , typename U2
    , typename Dest
    , typename Source
    >
struct substitute<
      T< U1 , U2 >
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2;

public:
    typedef T< u1 , u2 > type;
};




template <
      typename R
    , typename U1 , typename U2
    , typename Dest
    , typename Source
    >
struct substitute<
      R (*)( U1 , U2 )
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< R, Dest, Source >::type r;
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2;

public:
    typedef r (*type)( u1 , u2 );
};
# 57 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 184 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      template < typename P1 , typename P2 , typename P3 > class T
    , typename U1 , typename U2 , typename U3
    , typename Dest
    , typename Source
    >
struct substitute<
      T< U1 , U2 , U3 >
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2; typedef typename substitute< U3, Dest, Source >::type u3;

public:
    typedef T< u1 , u2 , u3 > type;
};




template <
      typename R
    , typename U1 , typename U2 , typename U3
    , typename Dest
    , typename Source
    >
struct substitute<
      R (*)( U1 , U2 , U3 )
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< R, Dest, Source >::type r;
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2; typedef typename substitute< U3, Dest, Source >::type u3;

public:
    typedef r (*type)( u1 , u2 , u3 );
};
# 62 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 184 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      template < typename P1 , typename P2 , typename P3 , typename P4 > class T
    , typename U1 , typename U2 , typename U3 , typename U4
    , typename Dest
    , typename Source
    >
struct substitute<
      T< U1 , U2 , U3 , U4 >
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2; typedef typename substitute< U3, Dest, Source >::type u3; typedef typename substitute< U4, Dest, Source >::type u4;

public:
    typedef T< u1 , u2 , u3 , u4 > type;
};




template <
      typename R
    , typename U1 , typename U2 , typename U3 , typename U4
    , typename Dest
    , typename Source
    >
struct substitute<
      R (*)( U1 , U2 , U3 , U4 )
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< R, Dest, Source >::type r;
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2; typedef typename substitute< U3, Dest, Source >::type u3; typedef typename substitute< U4, Dest, Source >::type u4;

public:
    typedef r (*type)( u1 , u2 , u3 , u4 );
};
# 67 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2





# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 1
# 184 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp"
template <
      template < typename P1 , typename P2 , typename P3 , typename P4 , typename P5 > class T
    , typename U1 , typename U2 , typename U3 , typename U4 , typename U5
    , typename Dest
    , typename Source
    >
struct substitute<
      T< U1 , U2 , U3 , U4 , U5 >
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2; typedef typename substitute< U3, Dest, Source >::type u3; typedef typename substitute< U4, Dest, Source >::type u4; typedef typename substitute< U5, Dest, Source >::type u5;

public:
    typedef T< u1 , u2 , u3 , u4 , u5 > type;
};




template <
      typename R
    , typename U1 , typename U2 , typename U3 , typename U4 , typename U5
    , typename Dest
    , typename Source
    >
struct substitute<
      R (*)( U1 , U2 , U3 , U4 , U5 )
    , Dest
    , Source

    >
{
private:
    typedef typename substitute< R, Dest, Source >::type r;
    typedef typename substitute< U1, Dest, Source >::type u1; typedef typename substitute< U2, Dest, Source >::type u2; typedef typename substitute< U3, Dest, Source >::type u3; typedef typename substitute< U4, Dest, Source >::type u4; typedef typename substitute< U5, Dest, Source >::type u5;

public:
    typedef r (*type)( u1 , u2 , u3 , u4 , u5 );
};
# 72 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/iteration/detail/iter/forward1.hpp" 2
# 162 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/substitute.hpp" 2







}}
}
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp" 2
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper.hpp" 1
# 20 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper.hpp"
namespace boost {







template <typename T>
class recursive_wrapper
{
public:

    typedef T type;

private:

    T* p_;

public:

    ~recursive_wrapper();
    recursive_wrapper();

    recursive_wrapper(const recursive_wrapper& operand);
    recursive_wrapper(const T& operand);






private:

    void assign(const T& rhs);

public:

    recursive_wrapper& operator=(const recursive_wrapper& rhs)
    {
        assign( rhs.get() );
        return *this;
    }

    recursive_wrapper& operator=(const T& rhs)
    {
        assign( rhs );
        return *this;
    }

    void swap(recursive_wrapper& operand)
    {
        T* temp = operand.p_;
        operand.p_ = p_;
        p_ = temp;
    }
# 92 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper.hpp"
public:

    T& get() { return *get_pointer(); }
    const T& get() const { return *get_pointer(); }

    T* get_pointer() { return p_; }
    const T* get_pointer() const { return p_; }

};

template <typename T>
recursive_wrapper<T>::~recursive_wrapper()
{
    boost::checked_delete(p_);
}

template <typename T>
recursive_wrapper<T>::recursive_wrapper()
    : p_(new T)
{
}

template <typename T>
recursive_wrapper<T>::recursive_wrapper(const recursive_wrapper& operand)
    : p_(new T( operand.get() ))
{
}

template <typename T>
recursive_wrapper<T>::recursive_wrapper(const T& operand)
    : p_(new T(operand))
{
}
# 140 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_wrapper.hpp"
template <typename T>
void recursive_wrapper<T>::assign(const T& rhs)
{
    this->get() = rhs;
}





template <typename T>
inline void swap(recursive_wrapper<T>& lhs, recursive_wrapper<T>& rhs)
{
    lhs.swap(rhs);
}

}
# 34 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp" 2


namespace boost {
namespace detail { namespace variant {
# 82 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/enable_recursive.hpp"
template <typename T, typename RecursiveVariant, typename NoWrapper>
struct enable_recursive
    : substitute< T , RecursiveVariant , ::boost::recursive_variant_ >


{
};

template <typename T, typename RecursiveVariant>
struct enable_recursive< T,RecursiveVariant,mpl::false_ >
{
private:

    typedef typename substitute< T , RecursiveVariant , ::boost::recursive_variant_ >::type t_;



public:


    typedef typename mpl::if_<
          mpl::or_<
              is_same< t_,T >
            , is_reference<t_>
            , is_pointer<t_>
            >
        , t_
        , boost::recursive_wrapper<t_>
        >::type type;

};







template <typename RecursiveVariant, typename NoWrapper>
struct quoted_enable_recursive
{
    template <typename T>
    struct apply
        : enable_recursive<T, RecursiveVariant, NoWrapper>
    {
    };
};

}}
}
# 17 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/equal.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/equal.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/bind.hpp" 1
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/equal.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/apply.hpp" 1
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/mpl/equal.hpp" 2








namespace boost { namespace mpl {

namespace aux {

template<
      typename Predicate
    , typename LastIterator1
    , typename LastIterator2
    >
struct equal_pred
{
    template<
          typename Iterator2
        , typename Iterator1
        >
    struct apply
    {
        typedef typename and_<
              not_< is_same<Iterator1,LastIterator1> >
            , not_< is_same<Iterator2,LastIterator2> >
            , aux::iter_apply2<Predicate,Iterator1,Iterator2>
            >::type type;
    };
};

template<
      typename Sequence1
    , typename Sequence2
    , typename Predicate
    >
struct equal_impl
{
    typedef typename begin<Sequence1>::type first1_;
    typedef typename begin<Sequence2>::type first2_;
    typedef typename end<Sequence1>::type last1_;
    typedef typename end<Sequence2>::type last2_;

    typedef aux::iter_fold_if_impl<
          first1_
        , first2_
        , next<>
        , protect< aux::equal_pred<Predicate,last1_,last2_> >
        , void_
        , always<false_>
        > fold_;

    typedef typename fold_::iterator iter1_;
    typedef typename fold_::state iter2_;
    typedef and_<
          is_same<iter1_,last1_>
        , is_same<iter2_,last2_>
        > result_;

    typedef typename result_::type type;
};


}


template<
      typename Sequence1 = na
    , typename Sequence2 = na
    , typename Predicate = is_same<_,_>
    >
struct equal
    : aux::msvc_eti_base<
          typename aux::equal_impl<Sequence1,Sequence2,Predicate>::type
        >::type
{

};

template<> struct equal< na , na > { template< typename T1 , typename T2 , typename T3 =na , typename T4 =na , typename T5 =na > struct apply : equal< T1 , T2 > { }; }; template< typename Tag > struct lambda< equal< na , na > , Tag > { typedef false_ is_le; typedef equal< na , na > result_; typedef equal< na , na > type; };

}}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp" 2







# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/cat.hpp" 1
# 31 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp" 2

# 1 "C:/Programing/Libs/boost_1_59_0\\boost/preprocessor/repeat.hpp" 1
# 32 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp" 2






namespace boost {

namespace detail { namespace variant {
# 50 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp"
template <
      typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19
    , typename RecursiveVariant

    >
struct substitute<
      ::boost::variant<
          recursive_flag< T0 >
        , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19
        >
    , RecursiveVariant
    , ::boost::recursive_variant_

    >
{
    typedef ::boost::variant<
          recursive_flag< T0 >
        , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19
        > type;
};

template <
      typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19
    , typename RecursiveVariant

    >
struct substitute<
      ::boost::variant<
          ::boost::detail::variant::over_sequence< T0 >
        , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19
        >
    , RecursiveVariant
    , ::boost::recursive_variant_

    >
{
private:

    typedef T0 initial_types;

    typedef typename mpl::transform<
          initial_types
        , mpl::protect< quoted_enable_recursive<RecursiveVariant,mpl::true_> >
        >::type types;

public:

    typedef typename mpl::if_<
          mpl::equal<initial_types, types, ::boost::is_same<mpl::_1, mpl::_2> >
        , ::boost::variant<
              ::boost::detail::variant::over_sequence< T0 >
            , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19
            >
        , ::boost::variant< over_sequence<types> >
        >::type type;
};

template <
      typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19
    , typename RecursiveVariant

    >
struct substitute<
      ::boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >
    , RecursiveVariant
    , ::boost::recursive_variant_

    >
{
# 136 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp"
private:
# 146 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp"
    typedef typename enable_recursive< T0 , RecursiveVariant , mpl::true_ >::type wknd_T0; typedef typename enable_recursive< T1 , RecursiveVariant , mpl::true_ >::type wknd_T1; typedef typename enable_recursive< T2 , RecursiveVariant , mpl::true_ >::type wknd_T2; typedef typename enable_recursive< T3 , RecursiveVariant , mpl::true_ >::type wknd_T3; typedef typename enable_recursive< T4 , RecursiveVariant , mpl::true_ >::type wknd_T4; typedef typename enable_recursive< T5 , RecursiveVariant , mpl::true_ >::type wknd_T5; typedef typename enable_recursive< T6 , RecursiveVariant , mpl::true_ >::type wknd_T6; typedef typename enable_recursive< T7 , RecursiveVariant , mpl::true_ >::type wknd_T7; typedef typename enable_recursive< T8 , RecursiveVariant , mpl::true_ >::type wknd_T8; typedef typename enable_recursive< T9 , RecursiveVariant , mpl::true_ >::type wknd_T9; typedef typename enable_recursive< T10 , RecursiveVariant , mpl::true_ >::type wknd_T10; typedef typename enable_recursive< T11 , RecursiveVariant , mpl::true_ >::type wknd_T11; typedef typename enable_recursive< T12 , RecursiveVariant , mpl::true_ >::type wknd_T12; typedef typename enable_recursive< T13 , RecursiveVariant , mpl::true_ >::type wknd_T13; typedef typename enable_recursive< T14 , RecursiveVariant , mpl::true_ >::type wknd_T14; typedef typename enable_recursive< T15 , RecursiveVariant , mpl::true_ >::type wknd_T15; typedef typename enable_recursive< T16 , RecursiveVariant , mpl::true_ >::type wknd_T16; typedef typename enable_recursive< T17 , RecursiveVariant , mpl::true_ >::type wknd_T17; typedef typename enable_recursive< T18 , RecursiveVariant , mpl::true_ >::type wknd_T18; typedef typename enable_recursive< T19 , RecursiveVariant , mpl::true_ >::type wknd_T19;







public:

    typedef ::boost::variant< wknd_T0 , wknd_T1 , wknd_T2 , wknd_T3 , wknd_T4 , wknd_T5 , wknd_T6 , wknd_T7 , wknd_T8 , wknd_T9 , wknd_T10 , wknd_T11 , wknd_T12 , wknd_T13 , wknd_T14 , wknd_T15 , wknd_T16 , wknd_T17 , wknd_T18 , wknd_T19 > type;

};
# 168 "C:/Programing/Libs/boost_1_59_0\\boost/variant/recursive_variant.hpp"
}}






template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
struct make_recursive_variant
{
public:

    typedef boost::variant<
          detail::variant::recursive_flag< T0 >
        , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19
        > type;

};






template <typename Types>
struct make_recursive_variant_over
{
private:

    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)(( ::boost::mpl::is_sequence<Types>::value )) >)> boost_static_assert_typedef_197 ;

public:

    typedef typename make_recursive_variant<
          detail::variant::over_sequence< Types >
        >::type type;

};

}
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant.hpp" 2




# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/utility/addressof.hpp" 1
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp" 2


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/element_index.hpp" 1
# 23 "C:/Programing/Libs/boost_1_59_0\\boost/variant/detail/element_index.hpp"
namespace boost { namespace detail { namespace variant {

template <class VariantElement, class T>
struct variant_element_functor :
    boost::mpl::or_<
        boost::is_same<VariantElement, T>,
        boost::is_same<VariantElement, boost::recursive_wrapper<T> >,
        boost::is_same<VariantElement, T& >
    >
{};

template <class Types, class T>
struct element_iterator_impl :
    boost::mpl::find_if<
        Types,
        boost::mpl::or_<
            variant_element_functor<boost::mpl::_1, T>,
            variant_element_functor<boost::mpl::_1, typename boost::remove_cv<T>::type >
        >
    >
{};

template <class Variant, class T>
struct element_iterator :
    element_iterator_impl< typename Variant::types, typename boost::remove_reference<T>::type >
{};

template <class Variant, class T>
struct holds_element :
    boost::mpl::not_<
        boost::is_same<
            typename boost::mpl::end<typename Variant::types>::type,
            typename element_iterator<Variant, T>::type
        >
    >
{};


}}}
# 24 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_pointer.hpp" 1
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_pointer.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/template_arity_spec.hpp" 1
# 14 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_def.hpp" 2
# 15 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_pointer.hpp" 2


namespace boost {

namespace detail {
# 55 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_pointer.hpp"
template <typename T>
struct add_pointer_impl
{
    typedef typename remove_reference<T>::type no_ref_type;
    typedef no_ref_type* type;
};



}

template< typename T > struct add_pointer { public: typedef typename boost::detail::add_pointer_impl<T>::type type; };

}


# 1 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/detail/type_trait_undef.hpp" 1
# 70 "C:/Programing/Libs/boost_1_59_0\\boost/type_traits/add_pointer.hpp" 2
# 27 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp" 2


namespace boost {






class bad_get
    : public std::exception
{
public:

    virtual const char * what() const throw()
    {
        return "boost::bad_get: "
               "failed value get using boost::get";
    }

};
# 56 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp"
namespace detail { namespace variant {






template <typename T>
struct get_visitor
{
private:

    typedef typename add_pointer<T>::type pointer;
    typedef typename add_reference<T>::type reference;

public:

    typedef pointer result_type;

public:

    pointer operator()(reference operand) const
    {
        return boost::addressof(operand);
    }

    template <typename U>
    pointer operator()(const U&) const
    {
        return static_cast<pointer>(0);
    }
};

}}
# 103 "C:/Programing/Libs/boost_1_59_0\\boost/variant/get.hpp"
template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_pointer<U>::type
relaxed_get(
      boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >* operand

    )
{
    typedef typename add_pointer<U>::type U_ptr;
    if (!operand) return static_cast<U_ptr>(0);

    detail::variant::get_visitor<U> v;
    return operand->apply_visitor(v);
}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_pointer<const U>::type
relaxed_get(
      const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >* operand

    )
{
    typedef typename add_pointer<const U>::type U_ptr;
    if (!operand) return static_cast<U_ptr>(0);

    detail::variant::get_visitor<const U> v;
    return operand->apply_visitor(v);
}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_reference<U>::type
relaxed_get(
      boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& operand

    )
{
    typedef typename add_pointer<U>::type U_ptr;
    U_ptr result = relaxed_get<U>(&operand);

    if (!result)
        boost::throw_exception(bad_get());
    return *result;
}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_reference<const U>::type
relaxed_get(
      const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& operand

    )
{
    typedef typename add_pointer<const U>::type U_ptr;
    U_ptr result = relaxed_get<const U>(&operand);

    if (!result)
        boost::throw_exception(bad_get());
    return *result;
}






template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_pointer<U>::type
strict_get(
      boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >* operand

    )
{
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((boost::detail::variant::holds_element<boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >, U >::value)) >)> boost_static_assert_typedef_182 ;





    return relaxed_get<U>(operand);
}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_pointer<const U>::type
strict_get(
      const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >* operand

    )
{
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((boost::detail::variant::holds_element<boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >, const U >::value)) >)> boost_static_assert_typedef_199 ;





    return relaxed_get<U>(operand);
}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_reference<U>::type
strict_get(
      boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& operand

    )
{
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((boost::detail::variant::holds_element<boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >, U >::value)) >)> boost_static_assert_typedef_216 ;





    return relaxed_get<U>(operand);
}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_reference<const U>::type
strict_get(
      const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& operand

    )
{
    typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< (bool)((boost::detail::variant::holds_element<boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >, const U >::value)) >)> boost_static_assert_typedef_233 ;





    return relaxed_get<U>(operand);
}





template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_pointer<U>::type
get(
      boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >* operand

    )
{



    return strict_get<U>(operand);


}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_pointer<const U>::type
get(
      const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >* operand

    )
{



    return strict_get<U>(operand);

}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_reference<U>::type
get(
      boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& operand

    )
{



    return strict_get<U>(operand);

}

template <typename U, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
inline
    typename add_reference<const U>::type
get(
      const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& operand

    )
{



    return strict_get<U>(operand);

}

}
# 22 "C:/Programing/Libs/boost_1_59_0\\boost/variant.hpp" 2



# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/visitor_ptr.hpp" 1
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/variant/visitor_ptr.hpp"
# 1 "C:/Programing/Libs/boost_1_59_0\\boost/variant/bad_visit.hpp" 1
# 18 "C:/Programing/Libs/boost_1_59_0\\boost/variant/bad_visit.hpp"
namespace boost {







struct bad_visit
    : std::exception
{
public:

    virtual const char * what() const throw()
    {
        return "boost::bad_visit: "
               "failed visitation using boost::apply_visitor";
    }

};

}
# 16 "C:/Programing/Libs/boost_1_59_0\\boost/variant/visitor_ptr.hpp" 2
# 26 "C:/Programing/Libs/boost_1_59_0\\boost/variant/visitor_ptr.hpp"
namespace boost {







template <typename T, typename R>
class visitor_ptr_t
    : public static_visitor<R>
{
private:

    typedef R (*visitor_t)(T);

    visitor_t visitor_;

public:

    typedef R result_type;

private:

    typedef typename mpl::eval_if<
          is_reference<T>
        , mpl::identity<T>
        , add_reference<const T>
        >::type argument_fwd_type;

public:

    explicit visitor_ptr_t(visitor_t visitor)
      : visitor_(visitor)
    {
    }

public:

    template <typename U>
    result_type operator()(const U&) const
    {
        boost::throw_exception(bad_visit());
    }



public:

    result_type operator()(argument_fwd_type operand) const
    {
        return visitor_(operand);
    }
# 107 "C:/Programing/Libs/boost_1_59_0\\boost/variant/visitor_ptr.hpp"
};

template <typename R, typename T>
inline visitor_ptr_t<T,R> visitor_ptr(R (*visitor)(T))
{
    return visitor_ptr_t<T,R>(visitor);
}

}
# 25 "C:/Programing/Libs/boost_1_59_0\\boost/variant.hpp" 2
# 22 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h" 2








namespace json_spirit
{
    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };

    static std::string value_type_to_string( Value_type vtype );

    struct Null{};

    template< class Config >

    class Value_impl
    {
    public:

        typedef Config Config_type;
        typedef typename Config::String_type String_type;
        typedef typename Config::Object_type Object;
        typedef typename Config::Array_type Array;
        typedef typename String_type::const_pointer Const_str_ptr;

        Value_impl();
        Value_impl( Const_str_ptr value );
        Value_impl( const String_type& value );
        Value_impl( const Object& value );
        Value_impl( const Array& value );
        Value_impl( bool value );
        Value_impl( int value );
        Value_impl( boost::int64_t value );
        Value_impl( boost::uint64_t value );
        Value_impl( double value );

        template< class Iter >
        Value_impl( Iter first, Iter last );

        template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
        Value_impl( const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& variant );

        Value_impl( const Value_impl& other );

        bool operator==( const Value_impl& lhs ) const;

        Value_impl& operator=( const Value_impl& lhs );

        Value_type type() const;

        bool is_uint64() const;
        bool is_null() const;

        const String_type& get_str() const;
        const Object& get_obj() const;
        const Array& get_array() const;
        bool get_bool() const;
        int get_int() const;
        boost::int64_t get_int64() const;
        boost::uint64_t get_uint64() const;
        double get_real() const;

        Object& get_obj();
        Array& get_array();

        template< typename T > T get_value() const;


        static const Value_impl null;

    private:

        void check_type( const Value_type vtype ) const;

        typedef boost::variant< boost::recursive_wrapper< Object >, boost::recursive_wrapper< Array >,
                                String_type, bool, boost::int64_t, double, Null, boost::uint64_t > Variant;

        Variant v_;

        class Variant_converter_visitor : public boost::static_visitor< Variant >
        {
        public:

              template< typename T, typename A, template< typename, typename > class Cont >
              Variant operator()( const Cont< T, A >& cont ) const
              {
                  return Array( cont.begin(), cont.end() );
              }

              Variant operator()( int i ) const
              {
                  return static_cast< boost::int64_t >( i );
              }

              template<class T>
              Variant operator()( const T& t ) const
              {
                  return t;
              }
        };
    };



    template< class Config >
    struct Pair_impl
    {
        typedef typename Config::String_type String_type;
        typedef typename Config::Value_type Value_type;

        Pair_impl()
        {
        }

        Pair_impl( const String_type& name, const Value_type& value );

        bool operator==( const Pair_impl& lhs ) const;

        String_type name_;
        Value_type value_;
    };


    template< class String >
    struct Config_vector
    {
        typedef String String_type;
        typedef Value_impl< Config_vector > Value_type;
        typedef Pair_impl < Config_vector > Pair_type;
        typedef std::vector< Value_type > Array_type;
        typedef std::vector< Pair_type > Object_type;

        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )
        {
            obj.push_back( Pair_type( name , value ) );

            return obj.back().value_;
        }

        static const String_type& get_name( const Pair_type& pair )
        {
            return pair.name_;
        }

        static const Value_type& get_value( const Pair_type& pair )
        {
            return pair.value_;
        }
    };





    typedef Config_vector< std::string > Config;

    typedef Config::Value_type Value;
    typedef Config::Pair_type Pair;
    typedef Config::Object_type Object;
    typedef Config::Array_type Array;





    typedef Config_vector< std::wstring > wConfig;

    typedef wConfig::Value_type wValue;
    typedef wConfig::Pair_type wPair;
    typedef wConfig::Object_type wObject;
    typedef wConfig::Array_type wArray;





    template< class String >
    struct Config_map
    {
        typedef String String_type;
        typedef Value_impl< Config_map > Value_type;
        typedef std::vector< Value_type > Array_type;
        typedef std::map< String_type, Value_type > Object_type;
        typedef std::pair< const String_type, Value_type > Pair_type;

        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )
        {
            return obj[ name ] = value;
        }

        static const String_type& get_name( const Pair_type& pair )
        {
            return pair.first;
        }

        static const Value_type& get_value( const Pair_type& pair )
        {
            return pair.second;
        }
    };





    typedef Config_map< std::string > mConfig;

    typedef mConfig::Value_type mValue;
    typedef mConfig::Object_type mObject;
    typedef mConfig::Array_type mArray;





    typedef Config_map< std::wstring > wmConfig;

    typedef wmConfig::Value_type wmValue;
    typedef wmConfig::Object_type wmObject;
    typedef wmConfig::Array_type wmArray;






    inline bool operator==( const Null&, const Null& )
    {
        return true;
    }

    template< class Config >
    const Value_impl< Config > Value_impl< Config >::null;

    template< class Config >
    Value_impl< Config >::Value_impl()
    : v_( Null() )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( const Const_str_ptr value )
    : v_( String_type( value ) )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( const String_type& value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( const Object& value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( const Array& value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( bool value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( int value )
    : v_( static_cast< boost::int64_t >( value ) )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( boost::int64_t value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( boost::uint64_t value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( double value )
    : v_( value )
    {
    }

    template< class Config >
    Value_impl< Config >::Value_impl( const Value_impl< Config >& other )
    : v_( other.v_ )
    {
    }

    template< class Config >
    template< class Iter >
    Value_impl< Config >::Value_impl( Iter first, Iter last )
    : v_( Array( first, last ) )
    {
    }

    template< class Config >
    template< typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
    Value_impl< Config >::Value_impl( const boost::variant< T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 >& variant )
    : v_( boost::apply_visitor( Variant_converter_visitor(), variant) )
    {
    }

    template< class Config >
    Value_impl< Config >& Value_impl< Config >::operator=( const Value_impl& lhs )
    {
        Value_impl tmp( lhs );

        std::swap( v_, tmp.v_ );

        return *this;
    }

    template< class Config >
    bool Value_impl< Config >::operator==( const Value_impl& lhs ) const
    {
        if( this == &lhs ) return true;

        if( type() != lhs.type() ) return false;

        return v_ == lhs.v_;
    }

    template< class Config >
    Value_type Value_impl< Config >::type() const
    {
        if( is_uint64() )
        {
            return int_type;
        }

        return static_cast< Value_type >( v_.which() );
    }

    template< class Config >
    bool Value_impl< Config >::is_uint64() const
    {
        return v_.which() == null_type + 1;
    }

    template< class Config >
    bool Value_impl< Config >::is_null() const
    {
        return type() == null_type;
    }

    template< class Config >
    void Value_impl< Config >::check_type( const Value_type vtype ) const
    {
        if( type() != vtype )
        {
            std::ostringstream os;

            os << "get_value< " << value_type_to_string( vtype ) << " > called on " << value_type_to_string( type() ) << " Value";

            throw std::runtime_error( os.str() );
        }
    }

    template< class Config >
    const typename Config::String_type& Value_impl< Config >::get_str() const
    {
        check_type( str_type );

        return *boost::get< String_type >( &v_ );
    }

    template< class Config >
    const typename Value_impl< Config >::Object& Value_impl< Config >::get_obj() const
    {
        check_type( obj_type );

        return *boost::get< Object >( &v_ );
    }

    template< class Config >
    const typename Value_impl< Config >::Array& Value_impl< Config >::get_array() const
    {
        check_type( array_type );

        return *boost::get< Array >( &v_ );
    }

    template< class Config >
    bool Value_impl< Config >::get_bool() const
    {
        check_type( bool_type );

        return boost::get< bool >( v_ );
    }

    template< class Config >
    int Value_impl< Config >::get_int() const
    {
        check_type( int_type );

        return static_cast< int >( get_int64() );
    }

    template< class Config >
    boost::int64_t Value_impl< Config >::get_int64() const
    {
        check_type( int_type );

        if( is_uint64() )
        {
            return static_cast< boost::int64_t >( get_uint64() );
        }

        return boost::get< boost::int64_t >( v_ );
    }

    template< class Config >
    boost::uint64_t Value_impl< Config >::get_uint64() const
    {
        check_type( int_type );

        if( !is_uint64() )
        {
            return static_cast< boost::uint64_t >( get_int64() );
        }

        return boost::get< boost::uint64_t >( v_ );
    }

    template< class Config >
    double Value_impl< Config >::get_real() const
    {
        if( type() == int_type )
        {
            return is_uint64() ? static_cast< double >( get_uint64() )
                               : static_cast< double >( get_int64() );
        }

        check_type( real_type );

        return boost::get< double >( v_ );
    }

    template< class Config >
    typename Value_impl< Config >::Object& Value_impl< Config >::get_obj()
    {
        check_type( obj_type );

        return *boost::get< Object >( &v_ );
    }

    template< class Config >
    typename Value_impl< Config >::Array& Value_impl< Config >::get_array()
    {
        check_type( array_type );

        return *boost::get< Array >( &v_ );
    }

    template< class Config >
    Pair_impl< Config >::Pair_impl( const String_type& name, const Value_type& value )
    : name_( name )
    , value_( value )
    {
    }

    template< class Config >
    bool Pair_impl< Config >::operator==( const Pair_impl< Config >& lhs ) const
    {
        if( this == &lhs ) return true;

        return ( name_ == lhs.name_ ) && ( value_ == lhs.value_ );
    }



    template < class String_type >
    String_type to_str( const char* c_str )
    {
        String_type result;

        for( const char* p = c_str; *p != 0; ++p )
        {
            result += *p;
        }

        return result;
    }



    namespace internal_
    {
        template< typename T >
        struct Type_to_type
        {
        };

        template< class Value >
        int get_value( const Value& value, Type_to_type< int > )
        {
            return value.get_int();
        }

        template< class Value >
        boost::int64_t get_value( const Value& value, Type_to_type< boost::int64_t > )
        {
            return value.get_int64();
        }

        template< class Value >
        boost::uint64_t get_value( const Value& value, Type_to_type< boost::uint64_t > )
        {
            return value.get_uint64();
        }

        template< class Value >
        double get_value( const Value& value, Type_to_type< double > )
        {
            return value.get_real();
        }

        template< class Value >
        typename Value::String_type get_value( const Value& value, Type_to_type< typename Value::String_type > )
        {
            return value.get_str();
        }

        template< class Value >
        typename Value::Array get_value( const Value& value, Type_to_type< typename Value::Array > )
        {
            return value.get_array();
        }

        template< class Value >
        typename Value::Object get_value( const Value& value, Type_to_type< typename Value::Object > )
        {
            return value.get_obj();
        }

        template< class Value >
        bool get_value( const Value& value, Type_to_type< bool > )
        {
            return value.get_bool();
        }
    }

    template< class Config >
    template< typename T >
    T Value_impl< Config >::get_value() const
    {
        return internal_::get_value( *this, internal_::Type_to_type< T >() );
    }

    static std::string value_type_to_string( const Value_type vtype )
    {
        switch( vtype )
        {
            case obj_type: return "Object";
            case array_type: return "Array";
            case str_type: return "string";
            case bool_type: return "boolean";
            case int_type: return "integer";
            case real_type: return "real";
            case null_type: return "null";
        }

        (void)( (!!(false)) || (_wassert(L"false", L"C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_value.h", (unsigned)(599)), 0) );

        return "unknown type";
    }
}
# 13 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_reader.h" 1
# 14 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_reader.h"
# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_error_position.h" 1
# 15 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_error_position.h"
namespace json_spirit
{




    struct Error_position
    {
        Error_position();
        Error_position( unsigned int line, unsigned int column, const std::string& reason );
        bool operator==( const Error_position& lhs ) const;
        unsigned int line_;
        unsigned int column_;
        std::string reason_;
    };

    inline Error_position::Error_position()
    : line_( 0 )
    , column_( 0 )
    {
    }

    inline Error_position::Error_position( unsigned int line, unsigned int column, const std::string& reason )
    : line_( line )
    , column_( column )
    , reason_( reason )
    {
    }

    inline bool Error_position::operator==( const Error_position& lhs ) const
    {
        if( this == &lhs ) return true;

        return ( reason_ == lhs.reason_ ) &&
               ( line_ == lhs.line_ ) &&
               ( column_ == lhs.column_ );
    }
}
# 14 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_reader.h" 2



namespace json_spirit
{



    bool read( const std::string& s, Value& value );
    bool read( std::istream& is, Value& value );
    bool read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value );

    void read_or_throw( const std::string& s, Value& value );
    void read_or_throw( std::istream& is, Value& value );
    void read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value );



    bool read( const std::wstring& s, wValue& value );
    bool read( std::wistream& is, wValue& value );
    bool read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value );

    void read_or_throw( const std::wstring& s, wValue& value );
    void read_or_throw( std::wistream& is, wValue& value );
    void read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value );



    bool read( const std::string& s, mValue& value );
    bool read( std::istream& is, mValue& value );
    bool read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value );

    void read_or_throw( const std::string& s, mValue& value );
    void read_or_throw( std::istream& is, mValue& value );
    void read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value );



    bool read( const std::wstring& s, wmValue& value );
    bool read( std::wistream& is, wmValue& value );
    bool read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value );

    void read_or_throw( const std::wstring& s, wmValue& value );
    void read_or_throw( std::wistream& is, wmValue& value );
    void read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value );

}
# 14 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_writer.h" 1
# 14 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_writer.h"
# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_writer_options.h" 1
# 13 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_writer_options.h"
namespace json_spirit
{
    enum Output_options{ none = 0,

                         pretty_print = 0x01,

                         raw_utf8 = 0x02,




                         remove_trailing_zeros = 0x04,

                         single_line_arrays = 0x08,


                         always_escape_nonascii = 0x10,


                       };
}
# 14 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_writer.h" 2



namespace json_spirit
{





    void write( const Value& value, std::ostream& os, int options = none, unsigned int precision_of_doubles = 0 );
    std::string write( const Value& value, int options = none, unsigned int precision_of_doubles = 0 );



    void write( const mValue& value, std::ostream& os, int options = none, unsigned int precision_of_doubles = 0 );
    std::string write( const mValue& value, int options = none, unsigned int precision_of_doubles = 0 );



    void write( const wValue& value, std::wostream& os, int options = none, unsigned int precision_of_doubles = 0 );
    std::wstring write( const wValue& value, int options = none, unsigned int precision_of_doubles = 0 );



    void write( const wmValue& value, std::wostream& os, int options = none, unsigned int precision_of_doubles = 0 );
    std::wstring write( const wmValue& value, int options = none, unsigned int precision_of_doubles = 0 );






    void write_formatted( const Value& value, std::ostream& os, unsigned int precision_of_doubles = 0 );
    std::string write_formatted( const Value& value, unsigned int precision_of_doubles = 0 );


    void write_formatted( const mValue& value, std::ostream& os, unsigned int precision_of_doubles = 0 );
    std::string write_formatted( const mValue& value, unsigned int precision_of_doubles = 0 );



    void write_formatted( const wValue& value, std::wostream& os, unsigned int precision_of_doubles = 0 );
    std::wstring write_formatted( const wValue& value, unsigned int precision_of_doubles = 0 );


    void write_formatted( const wmValue& value, std::wostream& os, unsigned int precision_of_doubles = 0 );
    std::wstring write_formatted( const wmValue& value, unsigned int precision_of_doubles = 0 );

}
# 15 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_utils.h" 1
# 16 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit_utils.h"
namespace json_spirit
{
    template< class Obj_t, class Map_t >
    void obj_to_map( const Obj_t& obj, Map_t& mp_obj )
    {
        mp_obj.clear();

        for( typename Obj_t::const_iterator i = obj.begin(); i != obj.end(); ++i )
        {
            mp_obj[ i->name_ ] = i->value_;
        }
    }

    template< class Obj_t, class Map_t >
    void map_to_obj( const Map_t& mp_obj, Obj_t& obj )
    {
        obj.clear();

        for( typename Map_t::const_iterator i = mp_obj.begin(); i != mp_obj.end(); ++i )
        {
            obj.push_back( typename Obj_t::value_type( i->first, i->second ) );
        }
    }


    typedef std::map< std::string, Value > Mapped_obj;



    typedef std::map< std::wstring, wValue > wMapped_obj;


    template< class Object_type, class String_type >
    const typename Object_type::value_type::Value_type& find_value( const Object_type& obj, const String_type& name )
    {
        for( typename Object_type::const_iterator i = obj.begin(); i != obj.end(); ++i )
        {
            if( i->name_ == name )
            {
                return i->value_;
            }
        }

        return Object_type::value_type::Value_type::null;
    }
}
# 16 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/../Libs/json_spirit/json_spirit.h" 2
# 2 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/using_json.h" 2

# 1 "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\\fstream" 1 3







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const char *,
 ios_base::openmode, int);
extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const wchar_t *,
 ios_base::openmode, int);


extern __declspec(dllimport) FILE *__cdecl _Fiopen(
 const unsigned short *,
 ios_base::openmode, int);



template<class _Elem> inline
 bool _Fgetc(_Elem& _Ch, FILE *_File)
 {
 return (fread(&_Ch, sizeof (_Elem), 1, _File) == 1);
 }

template<> inline bool _Fgetc(char& _Byte, FILE *_File)
 {
 int _Meta;
 if ((_Meta = fgetc(_File)) == (-1))
  return (false);
 else
  {
  _Byte = (char)_Meta;
  return (true);
  }
 }

template<> inline bool _Fgetc(wchar_t& _Wchar, FILE *_File)
 {
 wint_t _Meta;
 if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
  return (false);
 else
  {
  _Wchar = (wchar_t)_Meta;
  return (true);
  }
 }


template<> inline bool _Fgetc(unsigned short& _Wchar, FILE *_File)
 {
 wint_t _Meta;
 if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
  return (false);
 else
  {
  _Wchar = (unsigned short)_Meta;
  return (true);
  }
 }



template<class _Elem> inline
 bool _Fputc(_Elem _Ch, FILE *_File)
 {
 return (fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
 }

template<> inline bool _Fputc(char _Byte, FILE *_File)
 {
 return (fputc(_Byte, _File) != (-1));
 }

template<> inline bool _Fputc(wchar_t _Wchar, FILE *_File)
 {
 return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }


template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File)
 {
 return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }



template<class _Elem> inline
 bool _Ungetc(const _Elem& _Ch, FILE *_File)
 {
 return (false);
 }

template<> inline bool _Ungetc(const char& _Byte, FILE *_File)
 {
 return (ungetc((unsigned char)_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const signed char& _Byte, FILE *_File)
 {
 return (ungetc((unsigned char)_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const unsigned char& _Byte, FILE *_File)
 {
 return (ungetc(_Byte, _File) != (-1));
 }

template<> inline bool _Ungetc(const wchar_t& _Wchar, FILE *_File)
 {
 return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }


template<> inline bool _Ungetc(const unsigned short& _Wchar, FILE *_File)
 {
 return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
 }



template<class _Elem,
 class _Traits>
 class basic_filebuf
  : public basic_streambuf<_Elem, _Traits>
 {
public:
 typedef basic_filebuf<_Elem, _Traits> _Myt;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef typename _Traits::state_type _Myst;
 typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

 basic_filebuf(FILE *_File = 0)
  : _Mysb()
  {
  _Init(_File, _Newfl);
  }

 virtual ~basic_filebuf() noexcept
  {
  if (_Myfile != 0)
   _Reset_back();
  if (_Closef)
   close();
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 basic_filebuf(_Uninitialized)
  : _Mysb(_Noinit)
  {
  }

 basic_filebuf(_Myt&& _Right)
  {
  _Init(_Right._Myfile, _Newfl);
  _Init((FILE *)0, _Closefl);
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {

   FILE *_Myfile_sav = _Myfile;
   const _Cvt *_Pcvt_sav = _Pcvt;
   typename _Traits::state_type _State_sav = _State;
   bool _Wrotesome_sav = _Wrotesome;
   bool _Closef_sav = _Closef;
   bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
   bool _Set_eback_live = _Mysb::gptr() == &_Mychar;

   _Elem *_Pfirst0 = _Mysb::pbase();
   _Elem *_Pnext0 = _Mysb::pptr();
   _Elem *_Pend = _Mysb::epptr();
   _Elem *_Gfirst0 = _Mysb::eback();
   _Elem *_Gnext0 = _Mysb::gptr();
   _Elem *_Gend = _Mysb::egptr();


   _Init(_Right._Myfile, _Right._Myfile != 0 ? _Openfl : _Newfl);
   _Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   if (_Right.eback() != &_Right._Mychar)
    _Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   else if (_Right.gptr() != &_Right._Mychar)
    _Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
   else
    _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

   _Pcvt = _Right._Pcvt;
   _State = _Right._State;
   _Wrotesome = _Right._Wrotesome;
   _Closef = _Right._Closef;


   _Right._Init(_Myfile_sav, _Myfile_sav != 0 ? _Openfl : _Newfl);
   _Right.setp(_Pfirst0, _Pnext0, _Pend);
   if (!_Set_eback_sav)
    _Right.setg(_Gfirst0, _Gnext0, _Gend);
   else if (!_Set_eback_live)
    _Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
     &_Right._Mychar + 1);
   else
    _Right.setg(&_Right._Mychar, &_Right._Mychar,
     &_Right._Mychar + 1);

   _Right._Pcvt = _Pcvt_sav;
   _Right._State = _State_sav;
   _Right._Wrotesome = _Wrotesome_sav;
   _Right._Closef = _Closef_sav;


   ::std:: swap(_Set_eback, _Right._Set_eback);
   ::std:: swap(_Set_egptr, _Right._Set_egptr);

   ::std:: swap(_Mychar, _Right._Mychar);
   ::std:: swap(_Mysb::_Plocale, _Right._Plocale);
   }
  }

 basic_filebuf(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 enum _Initfl
  {
  _Newfl, _Openfl, _Closefl};

 bool is_open() const
  {
  return (_Myfile != 0);
  }

 _Myt *open(const char *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const string& _Str,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  return (open(_Str.c_str(), _Mode, _Prot));
  }

 _Myt *open(const char *_Filename, ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }

 _Myt *open(const wchar_t *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const wstring& _Str,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  return (open(_Str.c_str(), _Mode, _Prot));
  }

 _Myt *open(const wchar_t *_Filename,
  ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }


 _Myt *open(const unsigned short *_Filename,
  ios_base::openmode _Mode,
  int _Prot = (int)ios_base::_Openprot)
  {
  FILE *_File;
  if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
   return (0);

  _Init(_File, _Openfl);
  _Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
  return (this);
  }

 _Myt *open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  return (open(_Filename, (ios_base::openmode)_Mode));
  }


 _Myt *close()
  {
  _Myt *_Ans = this;
  if (_Myfile == 0)
   _Ans = 0;
  else
   {
   if (!_Endwrite())
    _Ans = 0;
   if (fclose(_Myfile) != 0)
    _Ans = 0;
   }
  _Init(0, _Closefl);
  return (_Ans);
  }

 virtual void _Lock()
  {
  if (_Myfile)
   :: _lock_file(_Myfile);
  }

 virtual void _Unlock()
  {
  if (_Myfile)
   :: _unlock_file(_Myfile);
  }

protected:
 virtual int_type overflow(int_type _Meta =
  _Traits::eof())
  {
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::not_eof(_Meta));
  else if (_Mysb::pptr() != 0
   && _Mysb::pptr() < _Mysb::epptr())
   {
   *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
   return (_Meta);
   }
  else if (_Myfile == 0)
   return (_Traits::eof());
  _Reset_back();
  if (_Pcvt == 0)
   return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
    ? _Meta : _Traits::eof());
  else
   {
   const int _STRING_INC = 8;
   const _Elem _Ch = _Traits::to_char_type(_Meta);
   const _Elem *_Src;
   char *_Dest;

   string _Str(_STRING_INC, '\0');
   for (; ; )
    switch (_Pcvt->out(_State,
     &_Ch, &_Ch + 1, _Src,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
    {
    case codecvt_base::partial:
    case codecvt_base::ok:
     {
     size_t _Count = _Dest - &*_Str.begin();
     if (0 < _Count && _Count !=
      fwrite(&*_Str.begin(), 1, _Count, _Myfile))
      return (_Traits::eof());

     _Wrotesome = true;
     if (_Src != &_Ch)
      return (_Meta);

     if (0 < _Count)
      ;
     else if (_Str.size() < 4 * _STRING_INC)
      _Str.append(_STRING_INC, '\0');
     else
      return (_Traits::eof());
     break;
     }

    case codecvt_base::noconv:
     return (_Fputc(_Ch, _Myfile) ? _Meta
      : _Traits::eof());

    default:
     return (_Traits::eof());
    }
   }
 }

 virtual int_type pbackfail(int_type _Meta =
  _Traits::eof())
  {
  if (_Mysb::gptr() != 0
   && _Mysb::eback() < _Mysb::gptr()
   && (_Traits::eq_int_type(_Traits::eof(), _Meta)
   || _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
    _Meta)))
   {
   _Mysb::_Gndec();
   return (_Traits::not_eof(_Meta));
   }
  else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
   return (_Traits::eof());
  else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
   return (_Meta);
  else if (_Mysb::gptr() != &_Mychar)
   {
   _Mychar = _Traits::to_char_type(_Meta);
   _Set_back();
   return (_Meta);
   }
  else
   return (_Traits::eof());
 }

 virtual int_type underflow()
  {
  int_type _Meta;
  if (_Mysb::gptr() != 0
   && _Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(*_Mysb::gptr()));
  else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
   return (_Meta);
  else
   {
   pbackfail(_Meta);
   return (_Meta);
   }
  }

 virtual int_type uflow()
  {
  if (_Mysb::gptr() != 0
   && _Mysb::gptr() < _Mysb::egptr())
   return (_Traits::to_int_type(
    *_Mysb::_Gninc()));
  else if (_Myfile == 0)
   return (_Traits::eof());
  _Reset_back();
  if (_Pcvt == 0)
   {
   _Elem _Ch = 0;
   return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
    : _Traits::eof());
   }
  else
   {
   string _Str;

   for (; ; )
    {
    _Elem _Ch, *_Dest;
    const char *_Src;
    int _Nleft;
    int _Meta = fgetc(_Myfile);

    if (_Meta == (-1))
     return (_Traits::eof());

    _Str.append(1, (char)_Meta);
    switch (_Pcvt->in(_State,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
     &_Ch, &_Ch + 1, _Dest))
     {
    case codecvt_base::partial:
    case codecvt_base::ok:
     if (_Dest != &_Ch)
      {
      _Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
      for (; 0 < _Nleft; )
       ungetc(_Src[--_Nleft], _Myfile);
      return (_Traits::to_int_type(_Ch));
      }
     else
      _Str.erase((size_t)0,
       (size_t)(_Src - &*_Str.begin()));
     break;

    case codecvt_base::noconv:
     if (_Str.size() < sizeof (_Elem))
      break;

     ::memcpy_s((&_Ch), (sizeof (_Elem)), (&*_Str.begin()), (sizeof (_Elem)));


     return (_Traits::to_int_type(_Ch));

    default:
     return (_Traits::eof());
     }
    }
   }
  }

 virtual pos_type seekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode =
   (ios_base::openmode)(ios_base::in | ios_base::out))
  {
  fpos_t _Fileposition;

  if (_Mysb::gptr() == &_Mychar
   && _Way == ios_base::cur
   && _Pcvt == 0)
   _Off -= (off_type)sizeof (_Elem);

  if (_Myfile == 0 || !_Endwrite()
   || ((_Off != 0 || _Way != ios_base::cur)
    && _fseeki64(_Myfile, _Off, _Way) != 0)
   || fgetpos(_Myfile, &_Fileposition) != 0)
   return (pos_type(_BADOFF));

  _Reset_back();
  return (pos_type(_State, _Fileposition));

  }

 virtual pos_type seekpos(pos_type _Pos,
  ios_base::openmode =
   (ios_base::openmode)(ios_base::in | ios_base::out))
  {
  fpos_t _Fileposition = _Pos.seekpos();
  off_type _Off = (off_type)_Pos - (off_type)((long long)(_Fileposition));

  if (_Myfile == 0 || !_Endwrite()
   || fsetpos(_Myfile, &_Fileposition) != 0
   || (_Off != 0 && _fseeki64(_Myfile, _Off, 1) != 0)
   || fgetpos(_Myfile, &_Fileposition) != 0)
   return (pos_type(_BADOFF));

  _State = _Pos.state();

  _Reset_back();
  return (pos_type(_State, _Fileposition));

  }

 virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
  {
  if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
   _Buffer == 0 && _Count == 0 ? 0x0004 : 0x0000,
   (size_t)_Count * sizeof (_Elem)) != 0)
   return (0);
  else
   {
   _Init(_Myfile, _Openfl);
   return (this);
   }
  }

 virtual int sync()
  {
  return (_Myfile == 0
   || _Traits::eq_int_type(_Traits::eof(), overflow())
   || 0 <= fflush(_Myfile) ? 0 : -1);
  }

 virtual void imbue(const locale& _Loc)
  {
  _Initcvt(&use_facet< _Cvt >(_Loc));
  }

 void _Init(FILE *_File, _Initfl _Which)
  {
                          static _Myst _Stinit;

  _Closef = _Which == _Openfl;
  _Wrotesome = false;

  _Mysb::_Init();






#pragma warning(push)
#pragma warning(disable: 6240)
 if (_File != 0 && sizeof (_Elem) == 1)
#pragma warning(pop)

 {
   _Elem **_Pb = 0;
   _Elem **_Pn = 0;
   int *_Nr = 0;

   ::_get_stream_buffer_pointers(
    _File,
    reinterpret_cast<char***>(&_Pb),
    reinterpret_cast<char***>(&_Pn),
    &_Nr);
   int *_Nw = _Nr;

   _Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
   }

  _Myfile = _File;
  _State = _Stinit;
  _Pcvt = 0;
  }

 bool _Endwrite()
  {
  if (_Pcvt == 0 || !_Wrotesome)
   return (true);
  else
   {
   const int _STRING_INC = 8;
   char *_Dest;
   if (_Traits::eq_int_type(_Traits::eof(), overflow()))
    return (false);

   string _Str(_STRING_INC, '\0');
   for (; ; )
    switch (_Pcvt->unshift(_State,
     &*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
    {
    case codecvt_base::ok:
     _Wrotesome = false;

    case codecvt_base::partial:
     {
     size_t _Count = _Dest - &*_Str.begin();
     if (0 < _Count && _Count !=
      fwrite(&*_Str.begin(), 1, _Count, _Myfile))
      return (false);
     if (!_Wrotesome)
      return (true);
     if (_Count == 0)
      _Str.append(_STRING_INC, '\0');
     break;
     }

    case codecvt_base::noconv:
     return (true);

    default:
     return (false);
    }
   }
  }

 void _Initcvt(const _Cvt *_Newpcvt)
  {
  if (_Newpcvt->always_noconv())
   _Pcvt = 0;
  else
   {
   _Pcvt = _Newpcvt;
   _Mysb::_Init();
   }
  }

private:
 const _Cvt *_Pcvt;
 _Elem _Mychar;
 bool _Wrotesome;
 typename _Traits::state_type _State;
 bool _Closef;
 FILE *_Myfile;

 void _Reset_back()
  {
  if (_Mysb::eback() == &_Mychar)
   _Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);
  }

 void _Set_back()
  {
  if (_Mysb::eback() != &_Mychar)
   {
   _Set_eback = _Mysb::eback();
   _Set_egptr = _Mysb::egptr();
   }
  _Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
  }

 _Elem *_Set_eback;
 _Elem *_Set_egptr;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_filebuf<_Elem, _Traits>& _Left,
  basic_filebuf<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_ifstream
  : public basic_istream<_Elem, _Traits>
 {
public:
 typedef basic_ifstream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;

 basic_ifstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_ifstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ifstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ifstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ifstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_ifstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_ifstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }

 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 virtual ~basic_ifstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::in,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }

 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }

 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
  }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ifstream<_Elem, _Traits>& _Left,
  basic_ifstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_ofstream
  : public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_ofstream<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;

 basic_ofstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_ofstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_ofstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ofstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_ofstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_ofstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_ofstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }

 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 virtual ~basic_ofstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }

 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }

 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
  }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ofstream<_Elem, _Traits>& _Left,
  basic_ofstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_fstream
  : public basic_iostream<_Elem, _Traits>
 {
public:
 typedef basic_fstream<_Elem, _Traits> _Myt;
 typedef basic_iostream<_Elem, _Traits> _Mybase;
 typedef basic_filebuf<_Elem, _Traits> _Myfb;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 basic_fstream()
  : _Mybase(&_Filebuffer)
  {
  }

 explicit basic_fstream(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const string& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }

 explicit basic_fstream(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_fstream(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  : _Mybase(&_Filebuffer)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  }


 explicit basic_fstream(FILE *_File)
  : _Mybase(&_Filebuffer),
   _Filebuffer(_File)
  {
  }

 basic_fstream(_Myt&& _Right)
  : _Mybase(&_Filebuffer)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Filebuffer.close();
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mybase::swap(_Right);
   _Filebuffer.swap(_Right._Filebuffer);
   }
  }

 basic_fstream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 void open(const wchar_t *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const wstring& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }

 void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 void open(const unsigned short *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const unsigned short *_Filename,
  ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }


 virtual ~basic_fstream() noexcept
  {
  }

 _Myfb *rdbuf() const
  {
  return ((_Myfb *)&_Filebuffer);
  }

 bool is_open() const
  {
  return (_Filebuffer.is_open());
  }

 void open(const char *_Filename,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
   _Myios::setstate(ios_base::failbit);
  else
   _Myios::clear();
  }

 void open(const string& _Str,
  ios_base::openmode _Mode = ios_base::in | ios_base::out,
  int _Prot = (int)ios_base::_Openprot)
  {
  open(_Str.c_str(), _Mode, _Prot);
  }

 void open(const char *_Filename, ios_base::open_mode _Mode)
  {
  open(_Filename, (ios_base::openmode)_Mode);
  }

 void close()
  {
  if (_Filebuffer.close() == 0)
   _Myios::setstate(ios_base::failbit);
 }

private:
 _Myfb _Filebuffer;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_fstream<_Elem, _Traits>& _Left,
  basic_fstream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }
}


#pragma warning(pop)
#pragma pack(pop)
# 3 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/using_json.h" 2



inline sf::IntRect GetIntRect(std::string entity, std::string action, std::string file_name) {
 sf::IntRect anim_rect;
 std::ifstream is("Resourses/" + file_name);
 json_spirit::Value value;
 read(is, value);
 const json_spirit::Object& object = value.get_obj();
 for (size_t i = 0; i < object.size(); i++) {
  const json_spirit::Pair& pair = object[i];
  const std::string& entity_name = pair.name_;
  const json_spirit::Value& entity_val = pair.value_;
  if (entity_name == entity) {
   const json_spirit::Object& entity_obj = entity_val.get_obj();
   for (size_t j = 0; j < entity_obj.size(); j++) {
    if (entity_obj[j].name_ == action) {
     const json_spirit::Pair& x = entity_obj[j].value_.get_obj()[0];
     const json_spirit::Pair& y = entity_obj[j].value_.get_obj()[1];
     const json_spirit::Pair& width = entity_obj[j].value_.get_obj()[2];
     const json_spirit::Pair& height = entity_obj[j].value_.get_obj()[3];
     anim_rect = sf::IntRect(x.value_.get_int(), y.value_.get_int(), width.value_.get_int(), height.value_.get_int());
     break;
    }
   }
   break;

  }
 }
 is.close();
 return anim_rect;

}

inline std::string TypeToString(Type type) {
 switch (type) {
 case PLAYER:
  return "PLAYER";
 case SPEARMAN:
  return "SPEARMAN";
 case SWORDSMAN:
  return "SWORDSMAN";
 default:
  return "INVALID ENUM";
 }
}
# 3 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/frame_rect.h" 2


struct FrameRects {
 sf::IntRect move;
 sf::IntRect stay;
 sf::IntRect jump;
 sf::IntRect attack;
 sf::IntRect gravity;
};


void FrameRectInit(FrameRects&, Type);
# 2 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/frame.h" 2



struct Frame {
 sf::String file;
 sf::Image image;
 sf::Texture texture;
 sf::Sprite sprite;
 float displacement;
 FrameRects* rect;
};

void FrameInit(Frame& frame, Type type);
# 3 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/animation.h" 2

struct Animation {
 bool left_attack;
 bool right_attack;
 float current_attack_frame;
 float current_move_frame;
 float current_jump_frame;
 float current_stay_frame;
 float max_attack_frame;
 float max_move_frame;
 float max_jump_frame;
 float max_stay_frame;
 float anim_speed;
 float anim_stay_speed;
 Frame * frame;
};

void AnimationInit(Animation & animation, Type type);

void GravityAnimation(Animation & animation);

void JumpAnimation(Animation & animation, float game_step);

void AttackAnimation(Animation & animation, float game_step);

void MoveAndStayAnimation(Animation & animation, State state, float game_step);

void DisableAttack(Animation & animation);

void CheckMoveReset(Animation& animation);

void CheckAttackReset(Animation& animation);

void CheckJumpReset(Animation& animation);

void CheckStayReset(Animation& animation);

void FlipRectHoriz(sf::IntRect & rect);

void CheckStayFlip(sf::Sprite & sprite, sf::IntRect & rect);
# 3 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/visual.h" 2



struct Visual {
 Animation* animation;

 sf::FloatRect* rect;
};

void VisualInit(Visual & visual, Type type, sf::FloatRect & rect);
# 6 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/enemy.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/logic.h" 1

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/fight_logic.h" 1

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/hp_bar.h" 1





struct HpBar {
 sf::Texture bar_texture;
 sf::Sprite bar_sprite;
 sf::Sprite strip_sprite;
 sf::IntRect strip_rect;
 sf::IntRect bar_rect;
};

void HpBarInit(HpBar & hp, Type type);
# 2 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/fight_logic.h" 2



const float CPlayerDamage = 15.f;
const float BPlayerDamage = 30.f;
const float APlayerDamage = 45.f;

const float CEnemyDamage = 10.f;
const float BEnemyDamage = 20.f;
const float AEnemyDamage = 30.f;

struct FightLogic {
 float health_points;
 float max_health_points;
 float damage;
 bool attack_occured;
 bool is_dead;
 HpBar* hp_bar;
};

void FightLogicInit(FightLogic& fight, Type type);

void HpBarUpdate(FightLogic & fight, sf::FloatRect rect_for_place, Type type);

void PlayerHpBarUpdate(FightLogic & fight, sf::View & view);
# 2 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/logic.h" 2

# 1 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/movement.h" 1




struct Movement {
 float x_pos;
 float y_pos;
 float step;
 float delta_x;
 float delta_y;
 State state;
 State prev_state;
};

void MovementInit(Movement & movement, Type type);

void CheckMovementLogic(Movement & movement);
# 3 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/logic.h" 2



struct Logic {
 Movement * movement;

 FightLogic * fight;
};

void LogicInit(Logic & logic, Type type);
# 7 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/../Headers/enemy.h" 2



enum EnemyState {
 NOT_DETECT,
 DETECT
};
struct Enemy {
 Logic * logic;
 Visual * visual;
};

void EnemyInit(Enemy & enemy, Type type, sf::FloatRect & rect);

sf::FloatRect GetEnemyRectFromLvl(Level & lvl, Type type, int number);

int GetEnemiesCount(Level & lvl, Type type);

void EnemyLevelCollision(Enemy & enemy, const Object & map_object);

void EnemyUpdate(Enemy& enemy, const sf::Time& deltaTime);

void AnimationsUpdate(Enemy& enemy);
# 2 "C:/Users/Dzzirt/Documents/Game-and-Book-exercise/Game/DarkCastle/DarkCastle/Source/enemy.cpp" 2


void EnemyInit(Enemy & enemy, Type type, sf::FloatRect & rect) {
 enemy.visual = new Visual();
 enemy.logic = new Logic();
 VisualInit(*enemy.visual, type, rect);
 LogicInit(*enemy.logic, type);
}

sf::FloatRect GetEnemyRectFromLvl(Level & lvl, Type type, int number) {
 std::stringstream str_number;
 std::string enemy_type = TypeToString(type);
 str_number << number;
 return lvl.GetObject(enemy_type + str_number.str()).rect;
}

int GetEnemiesCount(Level& lvl, Type type) {
 switch (type) {
 case SPEARMAN:
  return lvl.GetMatchObjects(0, 8, "SPEARMAN").size();
 case SWORDSMAN:
  return lvl.GetMatchObjects(0, 9, "SWORDMAN").size();
 default:
  break;
 }
 return 0;
}


void EnemyUpdate(Enemy& enemy, const sf::Time& deltaTime) {
 Movement & movement = *enemy.logic->movement;
 Animation & animation = *enemy.visual->animation;
 sf::FloatRect & enemy_rect = *enemy.visual->rect;
 CheckMovementLogic(movement);


 AnimationsUpdate(enemy);

 enemy.visual->rect->left += movement.delta_x * deltaTime.asSeconds();
 enemy.visual->rect->top += movement.delta_y * deltaTime.asSeconds();

 sf::FloatRect enemy_bound = enemy.visual->animation->frame->sprite.getGlobalBounds();
 HpBarUpdate(*enemy.logic->fight, enemy_bound, SPEARMAN);
}

void AnimationsUpdate(Enemy& enemy) {
 Animation & animation = *enemy.visual->animation;
 State & state = enemy.logic->movement->state;
 float game_step = enemy.logic->movement->step * TimePerFrame.asSeconds();
 MoveAndStayAnimation(animation, state, game_step);
 AttackAnimation(animation, game_step);
}

void EnemyLevelCollision(Enemy& enemy, const Object & map_object) {
 Frame & frame = *enemy.visual->animation->frame;
 sf::FloatRect& enemy_rect = *enemy.visual->rect;
 Movement & movement = *enemy.logic->movement;
 if (enemy_rect.intersects(map_object.rect)) {
  if (map_object.name == "trap") {
   enemy.logic->fight->health_points = 0.f;
  }
  else if (map_object.name == "solid") {
   bool bottom_collision = enemy_rect.top + enemy_rect.height - 5 < map_object.rect.top;
   bool upper_collision = enemy_rect.top + 5 > map_object.rect.top + map_object.rect.height;

   if (movement.delta_y > 0 && bottom_collision) {
    enemy_rect.top = map_object.rect.top - enemy_rect.height + 1;
   }
   else if (movement.delta_y < 0 && upper_collision) {
    enemy_rect.top = map_object.rect.top + map_object.rect.height;
   }

   if (movement.delta_x < 0 && !upper_collision && !bottom_collision) {
    enemy_rect.left = map_object.rect.left + map_object.rect.width;
   }
   else if (movement.delta_x > 0 && !upper_collision && !bottom_collision) {
    enemy_rect.left -= enemy_rect.left + enemy_rect.width - map_object.rect.left;
   }
  }
 }
 movement.x_pos = enemy_rect.left;
 movement.y_pos = enemy_rect.top + enemy_rect.height;

 frame.sprite.setOrigin(0, frame.sprite.getGlobalBounds().height);
 frame.sprite.setPosition(movement.x_pos, movement.y_pos);
}
